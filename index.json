[{"content":" 안녕하세요! 👋 이 블로그에서는 개발과 관련된 다양한 이야기를 나누고자 합니다. 일부 페이지들은 반응형 최적화가 되어있지 않습니다. (업데이트 예정) ","date":null,"permalink":"/","section":"✨ Welcome to My Blog! ✨","summary":"안녕하세요!","title":"✨ Welcome to My Blog! ✨"},{"content":"","date":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories"},{"content":"","date":null,"permalink":"/categories/eureka/","section":"Categories","summary":"","title":"Eureka"},{"content":"지난 3일간의 강의에서 eureka 서버 구조를 처음 접했다. 최신 설계 구조라고해서 구글링을 했는데 이미 4-5년 전부터 작성된 기술 블로그 글들이 빼곡히 페이지를 채웠다. 괜히 긴장이 됐다. 구현해봐야 할 기능들은 너무나 많은데, 언제 다 하고있나.\n작은 규모 프로젝트라도 전반에 걸친 경험을 해보자는 취지에서 정말 최소한의 기능으로 이 모든 것들의 과정을 익히기 위한 프로젝트를 시작한다.\n이번 프로젝트에서 경험하고자 하는 핵심 사항들\nEureka 마이크로서비스 아키텍쳐 - 마이크로서비스 간의 서비스 등록과 발견을 관리 경험 OAuth2 및 JWT - OAuth2를 사용한 인증 및 권한 부여와 JWT 토큰 기반 인증을 구현 QueryDSL - 타입 안전한 쿼리 작성 도구 사용해보기 MapStruct - 객체 매핑을 위한 MapStruct를 사용해서 DTO와 엔티티 간의 변환을 자동화 Resilience4j - 회복성 있는 애플리케이션을 위해 회로 차단기 패턴 등 사용 Spring WebFlux - 논블로킹 방식 구현 경험 EventListener, EventPublisher - 애플리케이션 내의 비동기 이벤트 처리 TDD - 테스트 주도 개발 방법론을 적용 Swagger - API 문서화 \u0026ldquo;차근차근 시작해보자.\u0026rdquo;\n구상한 서비스는 카페 웹앱이다. 프론트만 고민하다가는 시간이 너무 지체될 것 같아 구조를 잡아가면서 생각해보고자 한다. 트리에는 아직 넣지 못한 기능들이 있지만 우선은 뼈대를 만들어 기초 세팅을 완료해보자.\n계획한 프로젝트 순서 # graph LR A[아키텍처 설계 및 생성] --\u003e B[Docker Compose 배포] B --\u003e C[Jenkins CI/CD] C --\u003e D[개발 시작] D --\u003e E[기능 확장] 프로젝트 구조 # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 /demo-app ├── .gitlab-ci.yml (또는 Jenkinsfile, .circleci/config.yml) ├── api-gateway │ ├── src │ └── Dockerfile ├── user-service │ ├── src │ └── Dockerfile ├── product-service │ ├── src │ └── Dockerfile ├── order-service │ ├── src │ └── Dockerfile ├── payment-service │ ├── src │ └── Dockerfile ├── eureka-server │ ├── src │ └── Dockerfile ├── config-server │ ├── src │ └── Dockerfile ├── docker-compose.yml ├── config-repo │ ├── user-service.yml │ ├── product-service.yml │ ├── order-service.yml │ ├── payment-service.yml │ └── api-gateway.yml ├─── security │ └── oauth2 │ ├── client-config.yml │ └── resource-server-config.yml ├── swagger ├── user-service └── openapi.yaml Eureka Github 레퍼런스 # Simple Version Architecture Production-like Architecture 중간중간 막힐 때마다 참고할 스프링 공식 문헌 레퍼런스이다. 심플 버전과 실제 서비스 유형 버전이 있다.\n추후 확장해서 공부해야 할 것들 #아래 기능들은 구현 희망사항으로 남겨놓는다.\n로그 및 모티터링 : ELK Stack (Elasticsearch, Logstash, Kibana), Prometheus 및 Grafana 1 2 3 4 5 6 7 8 /demo-app ... ├── monitoring │ ├── prometheus.yml │ ├── grafana │ │ └── dashboards │ └── logstash.conf ... ServiceMesh 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 /demo-app ... ├── k8s-deployment │ ├── api-gateway-deployment.yml │ ├── user-service-deployment.yml │ ├── product-service-deployment.yml │ ├── order-service-deployment.yml │ ├── payment-service-deployment.yml │ ├── eureka-server-deployment.yml │ ├── config-server-deployment.yml │ └── istio-gateway.yml ├── istio ├── gateway.yaml ├── virtual-service.yaml └── destination-rule.yaml 마이크로서비스 간의 비동기 메시징 시스템 - Apache Kafka, RabbitMQ 1 2 3 4 5 6 7 8 9 /demo-app ... ├── messaging │ ├── kafka │ │ ├── kafka-producer.yml │ │ └── kafka-consumer.yml │ └── rabbitmq │ ├── rabbitmq-producer.yml │ └── rabbitmq-consumer.yml ","date":"2024-07-08","permalink":"/posts/eureka_001/","section":"Posts","summary":"지난 3일간의 강의에서 eureka 서버 구조를 처음 접했다.","title":"Eureka 마이크로서비스 아키텍쳐 설계"},{"content":"","date":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts"},{"content":"","date":null,"permalink":"/tags/hugo/","section":"Tags","summary":"","title":"Hugo"},{"content":"","date":null,"permalink":"/categories/hugo/","section":"Categories","summary":"","title":"Hugo"},{"content":"","date":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags"},{"content":"이전에 개발 교육 중 배웠던 것을 작성한 포스트들을 분리시킬 필요성을 느꼈다. 앞으로 블로그를 얼마나 관리를 잘 할 수 있을지는 미지수지만, 정리를 하는 김에 jekyll에서 hugo로 엔진을 바꾸기로 결심했다.\n이유는 간단, hugo 템플릿 디자인이 훨씬 예뻤기 때문이다. 이번에는 오래 열심히 포스팅을 해보자는 결심을 다진 후 템플릿들의 최근 업데이트 여부, 디자인, 데이터 표현의 자유도, 목록 구조 등 세심히 훑어보았다.\n그렇게 고른 템플릿은 congo\n사실 gray + purple 이라는 색조합이 첫번째 선택 이유였지만, mermaid와 코드블럭 하이라이트 스타일, 그리고\n바로 이 alert 지원이 그 이유였다. 숲보다 나무에 꽂히는 나였다.\n템플릿을 다운받은 나는 광활한 회색 배경과 그 안에 navbar만 있는 텅-빈 페이지를 보며 갑자기 밀려오는 막막한 심정을 어찌할 지 몰랐다.\n우선은 보기도 좋은 떡이 먹기에도 좋다고. 내가 열심히 블로그를 하기 위한 선제 조건은, 쓸 맛이 나게끔 커스텀해야한다는 것이다.\n그래서 아래 작업을 진행했다.\nPretendard 폰트 적용 블로그 아이텐티티 부여 블로그 이름 생성 : nuuv 로고 이미지 제작 (어디서 많이 본 느낌이 든다면.. 정확하다) 메인 페이지 Tag 키워드로 최신 글목록 조회 (반응형 최적화 필요) 이전 블로그 내용을 DevLearn에 배치 (반응형 최적화 필요) 커스텀하면서 좀 헤맸던 부분이 있는데, 이건 hugo로 분류를 만들어 포스트를 작성하려고한다. 그리고 앞으로 개발 포스트는 Blog에 작성할 것이다.\n음.. 몇몇 커스텀 페이지들은 아직 반응형 최적화가 안되어있다. 당장은 어쩔 수 없고, 차차 바꾸어 나갈 것이다.\n","date":"2024-07-07","permalink":"/posts/hugo_001/","section":"Posts","summary":"이전에 개발 교육 중 배웠던 것을 작성한 포스트들을 분리시킬 필요성을 느꼈다.","title":"블로그 리뉴얼"},{"content":"CherryWeather #🌐 GitHub　🌐 YouTube - 프로젝트 시연 영상　🌐 비트캠프 수료 페이지\n교육 기간 : 2023.08.29. ~ 2024.03.08. 프로젝트 기간 : 2023.1.?? ~ 2024.03.07. Presentation 전체화면 보기 ↘ 프로젝트 소개 # 프로젝트 목표\n오늘의 날씨부터 주간 예보까지, 최신 기상 데이터를 기반으로 여러분에게 딱 맞는 옷차림을 추천해드립니다. 날씨에 어울리는 스타일 이미지로 매일 아침, 어떤 옷을 입을지 고민하는 시간을 줄여줍니다. 커뮤니티 클럽에서는 같은 관심사를 가진 친구들과 모임을 만들고, 채팅으로 실시간 대화는 물론, 날씨 에 어울리는 모임들을 추천해줍니다. 기술 스택\nBack Java17, SpringBoot3.2.2, Spring Security, JPA, Redis, JWT, Oauth2, WebClient, Aws-Java-SDK(Object Storage), Log4j2 Front React, React-Router, React-cookie, HTML5, JavaScript, Axios, Recoil, NextUI, Swiper, Figma, TailWindCSS, ApexCharts, cross-env, CSS3, Notification, Framer-motion Naver Cloud \u0026amp; API LinuxServer(ubuntu-20.04), Cloud DB for MySQL, ObjectStorage, NaverLogin, Cloud DB for Redis, Image Optimizer, NCP GeoLocation, OpenAI-Chat(ChatGPT3.5-Turbo), OpenAI-Images(Dall.E-3), KaKao Login, NCloud Chat, Web-push, ip-api, firebase cloud, react-daum-postcode, Ncloud Chat JavaScriptSDK, 공공데이터포털-기상청API, 공공데이터포털-한국환경공단API, 공공데이터포털-한국천문연구원API Tool \u0026amp; CI/CD Git, GitHub, Jenkins, Docker, DockerHub, Gradle, npm, IntelliJ, VS Code, Discord, Slack, Trello, DB-Diagram.io, MySQL Workbench, Postman 역할 및 기여도 # 백엔드\nClub(모임), Membership, Feed, Search 기능 구현\n사용 기술 프론트엔드\n그 외\n트렐로 설계 및 관리\n프로젝트 진행 상황을 효율적으로 관리하기 위해 트렐로 보드를 설계하고 운영했습니다. 이를 통해 팀원 간의 협업을 촉진하고, 작업의 우선순위를 체계적으로 정리했습니다. 최종 발표 준비\nPPT 제작 프로젝트의 주요 내용을 효과적으로 전달하기 위해 최종 발표용 PPT를 제작했습니다. 슬라이드 디자인과 내용 구성에 신경 써 보는 사람들의 이해를 돕고자 했습니다. 영상 제작 프로젝트 시연과 주요 기능을 시각적으로 보여주기 위해 데모 영상 및 발표 영상을 제작했습니다. 학습 및 성장 #전체 시스템 설계 능력\n프론트엔드와 백엔드를 모두 경험하면서 전체적인 시스템 설계 능력을 향상시킬 수 있었습니다. 특히, 클라이언트와 서버 간의 효율적인 데이터 통신을 위한 최적의 아키텍처를 설계할 수 있는 능력을 배웠습니다.\n팀 내 다양한 역할 수행\n프로젝트에서 프론트엔드와 백엔드 모두에 기여함으로써 팀 내 다양한 역할을 수행할 수 있는 능력을 보여주었습니다. 이는 전체 개발 과정에서 발생할 수 있는 문제를 종합적으로 이해하고 해결하는 데 큰 도움이 되었습니다.\n","date":"2024-07-06","permalink":"/about/cw/","section":"Tech Showcase","summary":"체리웨더 프로젝트 요약입니다.","title":"Cherry Weather"},{"content":"","date":null,"permalink":"/tags/project/","section":"Tags","summary":"","title":"Project"},{"content":"","date":null,"permalink":"/categories/project/","section":"Categories","summary":"","title":"Project"},{"content":"✨About Me # 이 소 연 Lee soyeon wxy890@gmail.com 010-6744-6992 ↓ 이력서 다운받기 Introduce 백엔드 / 프론트엔드 / DB설계 / 배포 경험이 있습니다. 코드의 가독성과 명확한 네이밍에 많은 노력을 기울입니다. 빠르고 효율적으로 데이터를 얻기 위한 아키텍쳐를 구상하는 것에 흥미를 느낍니다. ▪️ DevCourse #네이버 × 비트캠프에서 주관하는 웹 개발자 교육🌐을 수료하였으며, 현재 비트캠프 AWS 프로젝트 코스를 진행중입니다. 동시에 항해99 취업 리부트 코스를 진행하며 계속 개발 공부를 하고있습니다. - 2024.07.09\nProgram Content Status 항해99 취업리부트24.07 ~ 24.10 (10주) - 자료구조 \u0026 알고리즘 - 대기업 시나리오 프로젝트 진행중 AWS 데브옵스 웹개발24.06 ~ 24.07 (4주) - 도커 컴포즈를 활용하여 AWS 배포 - EUREKA SEVER 아키텍쳐, SOLID 원칙 - 자율 프로젝트 진행중 네이버 데브옵스 웹개발23.08 ~ 24.03 (약 6개월) - 웹 어플리케이션 개발 팀 프로젝트 - 개발자를 위한 DevOps - NCP DB \u0026 스토리지 - 도커 컨테이너 애플리케이션 배포 - 운영자를 위한 DevOps `수료` ▪ Skills # Back-end \u0026amp; Ops Back-end JAVA OOP, 스트림API,컬렉션 프레임워크(List, Map),\n불변성 유지(record, Builder패턴) Spring Boot 애플리케이션 개발 Spring MVC 웹 애플리케이션 개발 JPA, MyBatis 데이터베이스 연동, CRUD 작업, 엔티티 매핑 Spring Security \u0026amp; JWT 인증 및 권한부여 데이터베이스 MySQL, Redis 도구 및 환경 Gradle/Maven, Docker, Git 테스트 및 품질관리 JUnit, Slf4j Front-end Front-end 언어 JavaScript, TypeScript 마크업\u0026amp; 스타일 시트 HTML5, CSS3 프레임워크 React 상태 관리 Recoil 도구 및 환경 npm / yarn Tools Certifications SQLD (SQRD 자격) - 2023.11 ✨Project #▪ Cherry Weather # 체리웨더는 날씨를 기반 커뮤니티 추천 + AI를 이용한 복장 추천 서비스입니다.\n️[→ 프로젝트 상세 보기] ▪ YellowBoard # 옐로우보드는 블로그형 커뮤니티 서비스입니다.\n️[→ 프로젝트 상세 보기] ","date":null,"permalink":"/about/","section":"Tech Showcase","summary":"✨About Me # 이 소 연 Lee soyeon wxy890@gmail.","title":"Tech Showcase"},{"content":"","date":"2024-07-06","permalink":"/about/yb/","section":"Tech Showcase","summary":"옐로보드 프로젝트 요약입니다.","title":"Yellow Board"},{"content":"","date":null,"permalink":"/devl/aws/","section":"Developer Course","summary":"","title":"Aws Dev Course"},{"content":"","date":null,"permalink":"/categories/awsdevcourse/","section":"Categories","summary":"","title":"AwsDevCourse"},{"content":" 여기는 교육 과정 중 배운 것을 기록한 공간입니다. 🤗 DevOps 개발자 교육 과정 gantt dateFormat YY-MM axisFormat %y-%m section 비트캠프 [NCP] DevOps :active, 23-08, 24-03 section 비트캠프 [AWS] DevOps :active, 24-06, 24-07 section 항해99 취업 리부트 :active, 24-07, 24-07 Program Content Status 항해99 취업리부트24.07 ~ 24.10 (10주) - 자료구조 \u0026 알고리즘 - 대기업 시나리오 프로젝트 진행중 AWS 데브옵스 웹개발24.06 ~ 24.07 (4주) - 도커 컴포즈를 활용하여 AWS 배포 - EUREKA SEVER 아키텍쳐, SOLID 원칙 - 자율 프로젝트 진행중 네이버 데브옵스 웹개발23.08 ~ 24.03 (약 6개월) - 웹 어플리케이션 개발 팀 프로젝트 - 개발자를 위한 DevOps - NCP DB \u0026 스토리지 - 도커 컨테이너 애플리케이션 배포 - 운영자를 위한 DevOps `수료` 항해99 취업리부트 코스부터는 학습 과정을 Blog에 기록하고 있습니다. ","date":null,"permalink":"/devl/","section":"Developer Course","summary":"여기는 교육 과정 중 배운 것을 기록한 공간입니다.","title":"Developer Course"},{"content":"스캐폴딩 #CRUD - 무지성으로 노래들으면서 생각없이 할 수 있어야 함.\n한 테이블의 CRUD를 빠르게 작성 (프론트도 다 같이 빠르게 붙어서 작업) 조인(쿼리 DSL) - (백엔드에서 작업) 로드존슨 - 마틴파울러 - Getter,Setter의 창시자\n마치 공자와 맹자 같은..\nERD 다음엔 UML(설계도)을 그려야함.\n클래스 다이어그램 (ERD-이름, 속성와 비슷) : 이름, 속성, 기능\n디자인패턴이 java보다 일찍나옴.\n디자인패턴: 입사 2년 전에는 신입들에게 알려주지 말라는 패턴.. (짐싸서 떠난다고?)\n1970년 컴퓨터 프로그래밍의 서기 1년 =\u0026gt; C언어 탄생\n1969년 달 착륙 (코딩없이 달 착륙을 함) - 0과 1로 된 수학적 지식으로만 성공함. 이후 컴파일 가능한 것을 A언어 만듦 - 망함 - B언어 - 망함 - C언어(절차 지향 언어 )\n1971년 : C언어 탄생\n그러나 대중화 및 돈이 안됨 -\u0026gt; 재활용성 개념이 생김 (reUse)\nreUse: 객체 지향의 핵심 1995년: 자바 탄생\n1995년 이후 웹혁명이 일어남.\nreUse가 30년동안 계속 이어져왔음 . reUse -\u0026gt; 의존성이 생김 (공통기능 커먼기능 .. )\nreUse가 지금까지의 방식이었다면 SOLID 원칙으로 바뀌는 추세.\n디자인패턴 : 총 22개\n숙지하면 모든 차종을 운전할 수 있는 생성 패턴 : 객체 하나에 대한 패턴\n행동 패턴 : 메서드에 대한 패턴\n구조 패턴 : 자료 구조에 대한 패턴\n자바 스크립트는 프로토타입 패턴 자바는 싱글톤, 빌더\nMVC - 모델? 클래스는 모델이 객체인 상황 : 서비스와 클래스는 속성과 기능의 집합\n스프링의과 JPA는 동등한 관계\nJPA의 속성은 엔티티\n모델의 속성은 DTO\nMVC 패턴 M = 모델 = 2가지로 나뉨\n스프링과 JPA VO와 DTO의 차이점 : setter 유무 차이 (VO가 없음 - 보안성 강화)\n모델(속성 + 기능)은 두가지 측면으로 생성해야함 =\u0026gt; 스프링과 JPA\n속성\n스프링에서 속성 : DTO (domain) JPA에서의 속성 : 엔티티 기능\n자바 측면에서 기능은 == Service JPA 측면에서 기능은 == Repository SOLID 원칙에서 ISP 적용\nISP 인터페이스 분리 원칙 (Repository, Service 모두 분리) Dto에는 @Component 를 붙여야함\n@Component public class PostDto() { } 어노테이션 역할 : 컴포넌트 생성 (객체 생성) == \u0026rsquo;new\u0026rsquo; 와 같음 new 로 생성 (패턴이 아니라 syntax)\n스프링에서는 어노테이션(new)로 생성해서 어플리케이션 컨텍스트에 저장함.\n인터페이스는 객체가 아님. (속성이 없음 - 객체가 아니라 함수)\n객체가 아니니 어노테이션은 impl에 붙여야 함.\npublic interface PostService() { } @Service public class PostServiceImpl() implements PostService{ } repository - PostRepositoryImpl 스프링의 핵심\n모델 = 도메인, 엔티티, 레파지토리, 서비스, 컨트롤러\nmvc - 모델을 만들고, 뷰를 만들고 컨트롤러로 연결 (순서)\n컨트롤러 - 모델과 뷰의 교차점\n컨텍스트 구조 - 값을 공유하는 것 스프링에서 dto를 가지고 있는 것 - 어플리케이션 컨텍스트 String은 상수 따옴표 안은 자연어, 따옴표가 없는 것은 기계어로 인식.\nString str = \u0026#34;텍스트\u0026#34;; // 따옴표는 자연어 int a; //변수 리액트 - 스크립트 언어 자바 \u0026amp; 파이썬 - 컴파일 (자연어로 변환)\nmutable, immutable\nmutable : 값이 변함 immutable : 값이 변하지 않음 상수에서 그 안의 값을 변화시킬 수 있게 권한을 주는게 =\u0026gt; mutable\n변수 =\u0026gt; Path\n변수인데 변하는 변수 =\u0026gt; PathVariable\n@RestControler @RequestMappint(\u0026#34;/post\u0026#34;) //=\u0026gt; immutable public class PostController () { @GetMapping(\u0026#34;/{id}\u0026#34;) //=\u0026gt; mutable public String getPostDetail(@PathVariable String id) { return \u0026#34;getPostList\u0026#34;; } } 프로그래밍에서 관계는 부모-자식관계와 형제 관계 2가지만 존재한다.\n부모 - 자식 : has a 부모는 부모 유전자만 가짐, 자식은 부모 유전자와 자식 유전자를 가짐, 자식이 의존성을 가짐 (자식은 부모의 인스턴스) Service가 부모 Controller가 자식 Repository가 부모 Service가 자식 @RequiredArgsConstructor를 사용해야 하는 이유 # @Autowired : 스프링이 부모의 인스턴스를 생성하고 이를 자식에게 주입\n@RequiredArgsConstructor\n싱클톤 구조로 인스턴스 생성 (반드시 하나만 만들게 함.) 한번 생성된 것을 가져다 쓰게 함 지네릭 \u0026lt;\u0026gt; # 만물은 변한다? 변하지 않는다? // ↓ 리터럴 a = 0; a = 0.0; a = 0L; a = \u0026#34;a\u0026#34;; a = new Member(); a = new ArrayList(); 타입 추론 : 뒤에 값으로 앞의 타입을 추론하는 것 타입을 바꾸게 하고 싶음 =\u0026gt; 뮤터럴 =\u0026gt; 지네릭 선언 \u003c?\u003e 지네릭 : 타입을 나중에 설정하겠다\npublic interface UserRepository extends JpaRepository\u0026lt;UserEntity, Long\u0026gt; 파이썬은 모두 지네릭 타입.\nsave는 엔터티를 받음. S 타입 엔터티를 파라미터로 받아서 S타입 엔터티으로 반환하게 되었있음.\n결합도를 낮추기 위해 역정규화를 해라. (join을 줄이기) JPA에서 제공하는 메서드 이름을 그대로 사용할 것. =\u0026gt; controller 및 service 뿐만 아니라 프론트에서도 통일시킬 것. 쿼리 등록 방식 # // 1. 쿼리 @Modifying @Query(\u0026#34;update PostEntity set title = :title where id = :id\u0026#34;) void updateTitleByid(Long id); // 2. 쿼리스트링 // 3. QueryDSL 쿼리는 스트링 (이뮤터블)인데 뮤터블로 방식으로 하면 됨.\n완성된 프레임워크 + 라이브러리 = 컨테이너 도커는 빈컨테이너\nprisma = 프론트용 데이터베이스.\n리덕스 - 스토어 (java에서 domain)\nreact = 화면 처리\nchat.init.ts : java에서 생성자 역할 chat.ts : java 에서 클랙스 역할\n자바스크립트 객체의 이름? =\u0026gt; JSON\n프론트는 ERD로 인터페이스를 만듦.\n리덕스js는 컨테이너. 리덕스 안에 있는 툴킷을 import.\n저장 장소를 슬라이스 치는 것.\n순수 함수 : 입력 + 출력 순수 하지 않은 함수 : 입력은 있고 출력이 없는것 (void) 그래서 자바는 메서드라고 칭함.\n","date":"2024-07-03","permalink":"/devl/aws/004/","section":"Developer Course","summary":"스캐폴딩 #CRUD - 무지성으로 노래들으면서 생각없이 할 수 있어야 함.","title":"교육 Day3 #1"},{"content":" root: build.gradle edit #plugins { id \u0026#39;java\u0026#39; id \u0026#39;org.springframework.boot\u0026#39; version \u0026#39;3.3.0\u0026#39; id \u0026#39;io.spring.dependency-management\u0026#39; version \u0026#39;1.1.5\u0026#39; } bootJar.enabled = false // 빌드시 현재 모듈(multi-module)의 .jar를 생성하지 않습니다. group = \u0026#39;site.lawmate\u0026#39; version = \u0026#39;0.0.1-SNAPSHOT\u0026#39; java { toolchain { languageVersion = JavaLanguageVersion.of(17) } } repositories { mavenCentral() } subprojects { // 모든 하위 모듈들에 이 설정을 적용합니다. group \u0026#39;site.lawmate\u0026#39; version \u0026#39;0.0.1-SNAPSHOT\u0026#39; sourceCompatibility = \u0026#39;17\u0026#39; apply plugin: \u0026#39;java\u0026#39; apply plugin: \u0026#39;java-library\u0026#39; apply plugin: \u0026#39;org.springframework.boot\u0026#39; apply plugin: \u0026#39;io.spring.dependency-management\u0026#39; configurations { compileOnly { extendsFrom annotationProcessor } } repositories { mavenCentral() } dependencies { testImplementation \u0026#39;org.springframework.boot:spring-boot-starter-test\u0026#39; testRuntimeOnly \u0026#39;org.junit.platform:junit-platform-launcher\u0026#39; } tasks.named(\u0026#39;test\u0026#39;) { useJUnitPlatform() } } root: settings.gradle 편집 #rootProject.name = \u0026#39;root\u0026#39; include \u0026#39;api\u0026#39; include \u0026#39;chat\u0026#39; include \u0026#39;eureka\u0026#39; include \u0026#39;post\u0026#39; include \u0026#39;trip\u0026#39; include \u0026#39;user\u0026#39; plugins { id \u0026#39;org.gradle.toolchains.foojay-resolver-convention\u0026#39; version \u0026#39;0.8.0\u0026#39; } 각 서브프로젝트에서 표시된 부분 제거\n게이트웨이 build.gradle 추가 항목 #bootJar { enabled = false } jar { enabled = true } configurations { compileOnly { extendsFrom annotationProcessor } } 게이트웨이에 추가하는 디펜던시 #implementation \u0026#39;org.springframework.boot:spring-boot-starter-security\u0026#39; implementation \u0026#39;org.springframework.boot:spring-boot-starter-webflux\u0026#39; implementation \u0026#39;org.springframework.cloud:spring-cloud-starter-gateway\u0026#39; implementation group: \u0026#39;org.springframework.cloud\u0026#39;, name: \u0026#39;spring-cloud-starter-netflix-eureka-client\u0026#39;, version: \u0026#39;4.1.2\u0026#39; implementation \u0026#39;io.jsonwebtoken:jjwt-api:0.12.5\u0026#39; runtimeOnly \u0026#39;io.jsonwebtoken:jjwt-impl:0.12.5\u0026#39; runtimeOnly \u0026#39;io.jsonwebtoken:jjwt-jackson:0.12.5\u0026#39; implementation group: \u0026#39;org.springframework.boot\u0026#39;, name: \u0026#39;spring-boot-starter-actuator\u0026#39;, version: \u0026#39;3.3.1\u0026#39; implementation group: \u0026#39;io.micrometer\u0026#39;, name: \u0026#39;micrometer-registry-prometheus\u0026#39;, version: \u0026#39;1.13.1\u0026#39; implementation \u0026#39;org.springdoc:springdoc-openapi-starter-webflux-ui:2.5.0\u0026#39; compileOnly \u0026#39;org.projectlombok:lombok\u0026#39; annotationProcessor \u0026#39;org.projectlombok:lombok\u0026#39; testImplementation \u0026#39;org.springframework.boot:spring-boot-starter-test\u0026#39; testImplementation \u0026#39;io.projectreactor:reactor-test\u0026#39; testImplementation \u0026#39;org.springframework.security:spring-security-test\u0026#39; testRuntimeOnly \u0026#39;org.junit.platform:junit-platform-launcher\u0026#39; 컨피그 서버에 추가하는 내용??\n유레카 서버는 디펜더시만 추가 #dependencies { implementation \u0026#39;org.springframework.cloud:spring-cloud-starter-netflix-eureka-server\u0026#39; testImplementation \u0026#39;org.springframework.boot:spring-boot-starter-test\u0026#39; testRuntimeOnly \u0026#39;org.junit.platform:junit-platform-launcher\u0026#39; } 리액티브 서비스 디펜던시 #implementation \u0026#39;org.springframework.boot:spring-boot-starter-webflux\u0026#39; implementation \u0026#39;org.springframework.boot:spring-boot-starter-data-mongodb-reactive\u0026#39; implementation \u0026#39;io.projectreactor:reactor-core\u0026#39; compileOnly \u0026#39;org.projectlombok:lombok\u0026#39; annotationProcessor \u0026#39;org.projectlombok:lombok\u0026#39; implementation group: \u0026#39;org.springframework.cloud\u0026#39;, name: \u0026#39;spring-cloud-starter-netflix-eureka-client\u0026#39;, version: \u0026#39;4.1.2\u0026#39; implementation \u0026#39;org.springframework.boot:spring-boot-starter-data-redis-reactive\u0026#39; implementation \u0026#39;org.springframework.boot:spring-boot-starter-mail\u0026#39; testRuntimeOnly \u0026#39;org.junit.platform:junit-platform-launcher\u0026#39; testRuntimeOnly \u0026#39;org.junit.platform:junit-platform-launcher\u0026#39; testImplementation \u0026#39;io.projectreactor:reactor-test\u0026#39; testImplementation \u0026#39;org.springframework.boot:spring-boot-starter-test\u0026#39; 서블릿 서비스 디펜던시 #implementation group: \u0026#39;org.springframework.cloud\u0026#39;, name: \u0026#39;spring-cloud-starter-netflix-eureka-client\u0026#39;, version: \u0026#39;4.1.2\u0026#39; implementation \u0026#39;org.springframework.boot:spring-boot-starter-web\u0026#39; implementation \u0026#39;org.springframework.boot:spring-boot-starter-web-services\u0026#39; implementation \u0026#39;org.springframework.boot:spring-boot-starter-data-jpa\u0026#39; implementation \u0026#39;org.springframework.boot:spring-boot-starter-tomcat:3.3.1\u0026#39; implementation group: \u0026#39;io.springfox\u0026#39;, name: \u0026#39;springfox-swagger-ui\u0026#39;, version: \u0026#39;3.0.0\u0026#39; implementation \u0026#39;org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0\u0026#39; implementation \u0026#39;org.apache.logging.log4j:log4j-api:2.23.1\u0026#39; implementation \u0026#39;org.apache.logging.log4j:log4j-core:2.23.1\u0026#39; implementation \u0026#39;org.modelmapper:modelmapper:3.2.0\u0026#39; implementation \u0026#39;com.querydsl:querydsl-jpa:5.1.0:jakarta\u0026#39; annotationProcessor \u0026#39;org.springframework.boot:spring-boot-configuration-processor\u0026#39; annotationProcessor \u0026#34;com.querydsl:querydsl-apt:5.1.0:jakarta\u0026#34; annotationProcessor \u0026#34;jakarta.annotation:jakarta.annotation-api\u0026#34; annotationProcessor \u0026#34;jakarta.persistence:jakarta.persistence-api\u0026#34; compileOnly group: \u0026#39;jakarta.servlet\u0026#39;, name: \u0026#39;jakarta.servlet-api\u0026#39;, version: \u0026#39;6.1.0\u0026#39; implementation \u0026#39;jakarta.validation:jakarta.validation-api:3.1.0\u0026#39; compileOnly \u0026#39;org.projectlombok:lombok\u0026#39; developmentOnly \u0026#39;org.springframework.boot:spring-boot-devtools\u0026#39; runtimeOnly \u0026#39;com.mysql:mysql-connector-j\u0026#39; annotationProcessor \u0026#39;org.projectlombok:lombok\u0026#39; testImplementation \u0026#39;org.junit.jupiter:junit-jupiter-api:5.10.2\u0026#39; testImplementation \u0026#39;org.springframework.boot:spring-boot-starter-test\u0026#39; config-server 추가\n","date":"2024-07-03","permalink":"/devl/aws/005/","section":"Developer Course","summary":"root: build.","title":"교육 Day3 #2"},{"content":"Eureka 서버 #넷플릭스에서 Eureka 시스템을 만들어서 스프링 재단에 무료로 제공\n계기 # 서비스할 국가가 많음. 국가급 서버가 필요하다보니 서버 부하 발생. 고가용성 서버의 필요 : 고가용성 ? 중단되지 않게 분산. Scale-Up : 높이를 올림. 한계가 있음. Scale-Out : 옆으로 볼륨을 올림. Eureka 서버\n수동으로 늘리는 것은 비효율적 -\u0026gt; 자동적으로 늘리고 줄일 수 있게하는 역할만 하는 서버\n(서비스를 모니터링 하는 것 -\u0026gt; discovery ) 연결된 서비스의 트래픽을 봄. 유레카는 서버, 나머지 기능은 서비스 ○○○○-service : 프로그래밍 언어로 되어있음 (java == service)\nservice 앞에는 controller 뒤로는 repository가 있어야 함.\ncontroller 앞에는 프론트가 있어야함. 맨뒤에는 DB가 있어야 함.\ncontroller + service + repository 프로젝트를 묶어 ○○○○-service라고 정의함 -\u0026gt; 컨트롤러와 리포지토리가 필요함\n그 컨트롤러 역할을 하는 것을 discovery (유레카 서버) eureka port는 : 8761\njava Service는 MVC 패턴\n클래스에서 속성만 있으면? entity (개체 = 추상화 된 개념)\n클래스에서 함수만 있으면? 함수형 프로그래밍\nmodel에서 기능? service\nmodel에서 속성? dto (entity는 db와의 연동만의 기능을 하기 때문에 dto)\nmodel = entity + dto + service\nmodel은 함수가 없는 존재. 값을 꺼내고 넣는 존재를 연결시켜주는 것 -\u0026gt; repository\nJPA와 스프링부트는 모두 프레임워크 (mybatis도 프레임워크) JPA와 스프링부트는 동등관계 그렇기 때문에 JPA를 빼고 MyBatis를 연결해도 동등한 관계이기 때문에 상관없음\n(휴대폰과 휴대폰케이스의 관계)\nJPA DB 친화적(model == DB)\njava == service (java는 알고리즘 언어)\nmodel 은 자바의 서비스와 JPA의 모델이 결합 된 것.\ncontroller는 repository와 역할이 비슷함 restful과 친화적.\n이렇게 되어있는 프로젝트를 기능별로 쪼개보자.\n구조 # 유레카 서버는 1개, 나머지는 클라이언트 (api-gateway도 클라이언트) 유레카와, 클라이언트 build.gradle 설정 #eureka-server #dependencies { ... implementation \u0026#39;org.springframework.cloud:spring-cloud-starter-netflix-eureka-server\u0026#39; ... } ○○○○-service (클라이언트) #dependencies { ... implementation group: \u0026#39;org.springframework.cloud\u0026#39;, name: \u0026#39;spring-cloud-starter-netflix-eureka-client\u0026#39;, version: \u0026#39;4.1.2\u0026#39; ... } api-게이트웨이에는 시큐리티 설정 필요 api-gateway # eureka보다 앞에 있어야함. 유레카는 인증, 인가를 검증하지 않음. 필터는 게이트웨이 걸어주면 됨. 이 세상은 0과 1의 세상.\n스프링 스프링 부트 : 내장 톰캣을 가지고 있음 Servlet : Reactive : 스프링 프레임워크 : 도태됨. Servlet과 JSP : 원래 한 몸이었음 (모놀식) 서블릿 조각과 스크립트 조각으로 나뉘게 됨.\n리액트: 서블릿 방식\nsync와 async : 동기 비동기\nsync - 리퀘스트를 요청을 했을 때 응답을 기다려야하는 것 (전화), 금융권에서 사용 async - 응답을 기다릴 필요없이 다른작업을 할 수 있고 응답이 오면 반응하는 것.(카톡) 서블릿 디폴트 - sync\n프론트와 자바의 연결(네트워킹) : restfulApi (공개망)\nDB와 java의 연결 : connection (비공개망 - sync)\n블록킹 : sync non-블록킹 : async 논블록킹 구현 : 음악 서비스가 재생되면서 다른것을 할 수 있도록 하는 것 (ex) yml #yml은 제이슨 형식. (yml만 잘알면 쿠버도 )\nhtml - xml - yml - zml\nhtml과 xml\n태그 사용 html - 프론트에서 사용 xml - 백엔드에서 사용 mark-up\n자연어 문법은 grammar (조금 틀려도 괜찮음) 프로그래머 문법 syntax (틀리면 안됨) \u0026lt;\u0026gt;\u0026lt;/\u0026gt; == tag 태그가 있으면 mark-up, 없으면 mark-down\n우리나라는 json의 도입이 늦은 편.\n인증시스템에서 xml은 공인인증서 json은 paypal\n자료구조 List와 Map의 차이\n일반적으로는 List가 더 빠름 데이터가 많아질 수록 Map이 더 빠름. json에서 {key:value}에서 {} 괄호가 사라진 이유 : 웹표준으로 지정되었기 때문에.\napi-gateway/src/main/resource/application.yml # switch 케이스 형식으로 작동하기 때문에 중요한 api를 순서에 맞게 배치 할 것 cloud: gateway: routes: - id: auth-service-sign-up uri: lb://auth-service # lb - 로드밸런서의 약자 predicates: - Path=/api/v1/auth/sign-up - Method=POST filters: - RemoveRequestHeader=Cookie - RewritePath=/api/v1/auth/(?\u0026lt;segment\u0026gt;.*), /$\\{segment} # *: 파일만, **: 폴더까지 Aws Lightsail 생성한 서버 접속해서 아래 명령어 진행 # PS C:\\Users\\wxy89\\.ssh\u0026gt; ssh -i \u0026#39;.\\LightsailDefaultKey-ap-northeast-2.pem\u0026#39;ubuntu@3.38.246.139 sudo apt update sudo apt upgrade # 분홍색 화면 나오면 모두 esc 누르면 됨 sudo apt-get update sudo apt-get install snapd sudo snap refresh sudo snap install hello-world hello-world sudo snap install docker sudo addgroup --system docker sudo adduser $USER docker newgrp docker sudo snap disable docker sudo snap enable docker source .bashrc docker ps 실행순서\nserver - gateway - service클라이언트\n포트 설정해주기\nredis 설정 ## 레디스 컨테이너 내부로 들어가기 docker exec -it redis-container /bin/bash # 레디스 설정 파일 수정 ","date":"2024-07-02","permalink":"/devl/aws/003/","section":"Developer Course","summary":"Eureka 서버 #넷플릭스에서 Eureka 시스템을 만들어서 스프링 재단에 무료로 제공","title":"교육 Da02 #2"},{"content":"Front 서버 올리기 #가비아에서 도메인 작업하기 #가장 먼저 빌드가 성공해야함.\nwxy89@Gyul MINGW64 /c/project/yellowboard-FE (feature/add-css-framework) $ yarn build 위와같은 메세지가 떠서 아래 종속성 추가 설치\nwxy89@Gyul MINGW64 /c/project/yellowboard-FE (feature/add-css-framework) $ yarn add @babel/plugin-proposal-private-property-in-object --dev 가비아 DNS 설정 # 위 도메인에서 설정으로 들어가기\n레코드 수정 \u0026gt; 레코드 추가 클릭\n값/위치에는 vercel 값을 넣으면됩니다. https://vercel.com/\nVercel # Start Deploying - GitHub 로그인 - Vercel연동 -\ninstall\n설치할 리포지토리 선택 후 install\nimport\nConfigure Project - Root Directory - Edit - (팝업창에서 루트 디렉토리 선택 후 ) - Deploy\nContinue\n좌측 Add Domain 선택\n첫번째 값 (value) # value : 76.76.21.21\n두번째 값 (value) # value : cname.vercel-dns.com.\n가비아로 돌아가서\n이렇게 입력해준다. 반드시 \u0026lsquo;확인\u0026rsquo;을 눌러주고 \u0026lsquo;저장\u0026rsquo;할 것.\n내가 구매한 도메인을 입력해서 들어가서 확인한다. 정상적으로 프론트엔드가 출력되면 ok.\n","date":"2024-07-02","permalink":"/devl/aws/002/","section":"Developer Course","summary":"Front 서버 올리기 #가비아에서 도메인 작업하기 #가장 먼저 빌드가 성공해야함.","title":"교육 Day2 #1"},{"content":" 프레임워크로 작업이 완료되면 라이브러리 - 프레임워크에서 라이브러리 사용 - 무한반복\n라이브러리 모인 곳 - 깃 허브\n프론트는 vercel에 올려서 도메인처리하는 방법을 알아야 함\nGradle\n설치하면 라이브러리가 생김 기계어로 전환시켜주는 역할 객체\n클래스와 인스턴스의 차이점 = 상태가 다르다. 클래스 : 개발자가 인지하기 위한 객체 인스턴스 : 기계가 인지하기 위한 객체 디스크에서 메모리로 상태를 변환하는 것(올리는 것) : loading\n메모리에서 디스크로 상태를 변환하는 것 : save\n추상적인 개념은 사람이 만든 것 (ex. H20)\n객체가 여러개면 자료구조. 선형으로 등록되면 리스트 ..\nDocker # 상태 종류 : 이미지와 컨테이너\n저장은 이미지로 실행하면 컨테이너 이미지 == 클래스 컨테이너 == 인스턴스 자바에서 클래스 -\u0026gt; 인스턴스로 만들 때 new로 생성\n도커에서 이미지 -\u0026gt; 컨테이너로 만들 때 명령어 running\n명령어가 확장자가 되고 확장자가 명령어가 됨.\n객체의 차원을 올리는 것 -\u0026gt; 자료 구조\nDocker 라이브러리 # 라이브러리를 가져올 때는 이미지로 가져온다. 도커를 처음 가져왔을 때에는 이미지 상태. 컴포즈와 도커 # 한번에 올리면 컴포즈, 하나씩 올리면 도커 -\u0026gt; 차원이 다름.\n도커(1차원-물한컵) - 컴포즈(2차원-대야) - 쿠버네틱스 (3차원-바다)\n3차원까지는 인간이 인지할 수 있음.\n쿠버네티스는 어렵고 도커는 쉽다? 도커를 모르기때문에 쿠버가 어려운 것.\n(미니쿠베는 무거운 편.)\nvs에서 프로젝트 생성 # \u0026lsquo;workspace\u0026rsquo; 디렉토리 생성 :\nvs에서 스프링 프레임워크 추가\n스프링 프로젝트 생성 3.3.1 \u0026gt; java \u0026gt; 가비아에서 구매한 도메인 등록 \u0026gt; 기능 등록 \u0026gt; 17 \u0026gt; jar \u0026gt; 의존성 Spring web 선택 후 생성\n기능 추가 필수 : eureka, api, user 기타 프로젝트 기능 : post, search 등 명령어로 도커 실행 ## 도커 버전 확인 \u0026gt; docker --version Docker version 24.0.7, build afdd53b # 도커 도움말 \u0026gt; docker --help Common Commands: run Create and run a new container from an image # create로 컨테이너 만들고 실행. 컨테이너가 있으면 그냥 실행 exec Execute a command in a running container # 실행 ps List containers # 컨테이너를 보는 것 build Build an image from a Dockerfile pull Download an image from a registry # 이 이미지를 다운 push Upload an image to a registry images List images login Log in to a registry logout Log out from a registry search Search Docker Hub for images version Show the Docker version information info Display system-wide information mySql 설치 # 다운 \u0026gt; docker pull mysql # \u0026gt; docker images REPOSITORY TAG IMAGE ID CREATED SIZE mysql latest 05247af91864 12 days ago 578MB redis latest 76506809a39f 6 months ago 138MB swaggerapi/swagger-editor latest 6a988710578c 9 months ago 65MB testcontainers/ryuk 0.5.1 ec913eeff75a 13 months ago 12.7MB mailhog/mailhog latest 4de68494cd0d 3 years ago 392MB # 실행시키기 \u0026gt; docker run 05247af91864 # 실행시키면 옵션값을 지정해주지 않아 에러가 생긴다 2024-07-01 04:43:14+00:00 [Note] [Entrypoint]: Entrypoint script for MySQL Server 8.4.0-1.el9 started. 2024-07-01 04:43:16+00:00 [Note] [Entrypoint]: Switching to dedicated user \u0026#39;mysql\u0026#39; 2024-07-01 04:43:16+00:00 [Note] [Entrypoint]: Entrypoint script for MySQL Server 8.4.0-1.el9 started. 2024-07-01 04:43:16+00:00 [ERROR] [Entrypoint]: Database is uninitialized and password option is not specified You need to specify one of the following as an environment variable: - MYSQL_ROOT_PASSWORD - MYSQL_ALLOW_EMPTY_PASSWORD - MYSQL_RANDOM_ROOT_PASSWORD mysql show tables; use mydb # 실행중인 컨테이너 확인 \u0026gt; docker ps # 모든 컨테이너 확인 \u0026gt; docker ps -a # ID로 실행중인 컨테이너 삭제(이미지는 남아있음) \u0026gt; docker rm -f ID # 이미지 파일 목록 조회 \u0026gt; docker images # 이미지 ID로 파일 삭제 \u0026gt; docker rmi ID # mySql 실행 \u0026gt; docker exec -it mydb-container bash \u0026gt; mysql -u root -p EC2 #EC2 \u0026gt; 인스턴스 \u0026gt; 인스턴스 시작\n인스턴스 이름 지정\n젠킨스를 하려면 t2.medium 정도는 사용해야함..\n키 생성해서 로컬\u0026gt;사용자\u0026gt;.ssh에 저장\n이렇게 나오면 ok.\n서버안 파일들 확인된다.\nubuntu@ip-172-31-2-157:~$ touch docker-compose.yml ubuntu@ip-172-31-2-157:~$ ls docker-compose.yml ubuntu@ip-172-31-2-157:~$ vim docker-compose.yml 편집기 열어서 아래 내용 복사 붙여넣기 후 저장 ( :wq!)\nservices: mysql: container_name: mydb-container image: mysql:latest volumes: - ./mysql/demo/etc/mysql/conf.d:/etc/mysql/conf.d:ro - ./mysql/demo/var/lib/mysql:/var/lib/mysql - ./mysql/demo/var/log/mysql:/var/log/mysql environment: - MYSQL_DATABASE=mydb - MYSQL_ROOT_PASSWORD=rootpass - MYSQL_ROOT_HOST=% command: [\u0026#39;--character-set-server=utf8mb4\u0026#39;, \u0026#39;--collation-server=utf8mb4_unicode_ci\u0026#39;] ports: - \u0026#34;3306:3306\u0026#34; restart: always mongodb: container_name: mgdb-container image: mongo:latest ports: - 27017:27017 volumes: - ./mongodb:/data/mgdb environment: - MONGO_INITDB_ROOT_USERNAME=root - MONGO_INITDB_ROOT_PASSWORD=rootpass - MONGO_INITDB_DATABASE=mgdb restart: always redis: container_name: redis-container image: redis:latest ports: - 6379:6379 command: redis-server --requirepass rootpass volumes: - ./redis/data:/data - ./redis/conf/redis.conf:/usr/local/conf/redis.conf labels: - \u0026#34;name=redis\u0026#34; - \u0026#34;mode=standalone\u0026#34; restart: always postgres: container_name: pgdb-container image: postgres:latest volumes: - ./postgres:/var/lib/postgresql/data ports: - \u0026#34;5432:5432\u0026#34; environment: POSTGRES_USER: root POSTGRES_PASSWORD: rootpass POSTGRES_DB: pgdb restart: always $ sudo apt update $ sudo apt upgrade $ sudo apt-get update $ sudo apt-get install snapd $ sudo snap refresh $ sudo snap install hello-world $ sudo snap install docker $ sudo addgroup --system docker $ sudo adduser $USER docker $ newgrp docker $ sudo snap disable docker $ sudo snap enable docke ","date":"2024-07-01","permalink":"/devl/aws/001/","section":"Developer Course","summary":"프레임워크로 작업이 완료되면 라이브러리 - 프레임워크에서 라이브러리 사용 - 무한반복","title":"교육 Day1"},{"content":"","date":null,"permalink":"/tags/bitcamp/","section":"Tags","summary":"","title":"Bitcamp"},{"content":"","date":null,"permalink":"/tags/navercloudcamp/","section":"Tags","summary":"","title":"NaverCloudCamp"},{"content":"","date":null,"permalink":"/categories/react/","section":"Categories","summary":"","title":"React"},{"content":"","date":null,"permalink":"/categories/springboot/","section":"Categories","summary":"","title":"Springboot"},{"content":"","date":null,"permalink":"/devl/springboot/","section":"Developer Course","summary":"","title":"SpringBoot"},{"content":"프로젝트 생성 및 Git 연결 # 레포지토리 생성 경로 설정. [CreateRepository]\n프로젝트 생성 build.gradle에서 jpa 및 security 항목들은 우선 주석 처리\ndependencies { // implementation \u0026#39;org.springframework.boot:spring-boot-starter-data-jpa\u0026#39; // implementation \u0026#39;org.springframework.boot:spring-boot-starter-security\u0026#39; implementation \u0026#39;org.springframework.boot:spring-boot-starter-web\u0026#39; compileOnly \u0026#39;org.projectlombok:lombok\u0026#39; developmentOnly \u0026#39;org.springframework.boot:spring-boot-devtools\u0026#39; runtimeOnly \u0026#39;com.mysql:mysql-connector-j\u0026#39; annotationProcessor \u0026#39;org.projectlombok:lombok\u0026#39; testImplementation \u0026#39;org.springframework.boot:spring-boot-starter-test\u0026#39; // testImplementation \u0026#39;org.springframework.security:spring-security-test\u0026#39; } 리액트 설치 src \u0026gt; main 경로에 진입해서 리액트 앱 설치.\n...\\src\\main\u0026gt; npx create-react-app reactjs Git 연결 및 초기 세팅 파일 push 원격 저장소에 있는 README 파일을 로컬 저장소로 복사하고, 로컬 저장소에 있는 프로젝트 파일이 원격 저장소로 푸쉬한다.\n#원격 저장소의 최신 정보를 가져오기 git fetch origin #원격의 main 브랜치를 로컬의 main 브랜치로 체크아웃하기 git checkout -b main origin/main #로컬 변경사항을 스테이징 하기 git add . #변경사항 커밋하기 git commit -m \u0026#34;Initial commit with project files\u0026#34; #로컬 변경사항을 원격 저장소에 푸시하기 git push -u origin main # \u0026#39;-u\u0026#39; 플래그는 upstream을 의미하고, 이후에 같은 브랜치로 푸시할 때 git push만 입력해도 해당 브랜치로 푸시가 된다. 서버 생성 #서버 생성\nncloud 에 2개의 서버 생성하기\n(react-jenkins, react-springboot)\n같은 방법으로 서버 2개를 설정한다.\n서버 비밀번호 변경 #서버의 공인 IP를 확인하고, 해당 서버의 초기 관리자 비밀번호를 확인한다.\n공인아이피 확인해서 리눅스 접속 (putty를 이용했다.)\n비밀번호 재설정 하기\nroot@react-jenkins:~# passwd New password: Retype new password: spring서버도 동일한 방법으로 비밀번호 재설정한다.\n참고 사이트\nSpringBoot+React CI/CD 블로그 https://velog.io/@haeny01/AWS-Jenkins%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-Docker-x-SpringBoot-CICD-%EA%B5%AC%EC%B6%95\n두개 서버에 도커 설치 #root 이므로 sudo를 제외하고 사용하면 된다.\n# 도커 설치 스크립트 다운로드 $ sudo apt-get update $ sudo apt-get install curl $ curl https://get.docker.com \u0026gt; docker-install.sh $ chmod 755 docker-install.sh # 도커 설치 $ sudo ./docker-install.sh # 도커 버전 확인 $ docker -v # 도커 이미지 목록 확인하기 $ docker image ls $ docker images jenkins 설치 #jenkins 용으로 생성한 서버에만 진행\n# Jenkins 사용법/Jenkins 설치 # 젠킨스 도커 컨테이너에서 사용할 브릿지 네트워크를 준비한다. ~# docker network ls ~# docker network create jenkins ~# docker network ls # JDK 젠킨스 이미지 가져오기 ~# docker pull jenkins/jenkins:lts-jdk17 //17버전 ~# docker image ls # vi 에디터 인스톨 ~#apt-get install vim # 작업 디렉토리 생성 ~# mkdir jenkins ~# cd jenkins install-docker.sh 파일 생성 #위 jenkins 폴더 내에 install-docker.sh 파일 생성 후 아래 내용을 등록하고 저장한다.\ninstall-docker.sh 파일 생성 및 편집 모드 열기 ~# vi install-docker.sh install-docker.sh 파일 내용 apt-get update apt-get -y install apt-transport-https \\ apt-utils \\ ca-certificates \\ curl \\ gnupg2 \\ zip \\ unzip \\ acl \\ software-properties-common curl -fsSL https://download.docker.com/linux/$(. /etc/os-release; echo \u0026#34;$ID\u0026#34;)/gpg \u0026gt; /tmp/dkey; apt-key add /tmp/dkey add-apt-repository \\ \u0026#34;deb [arch=amd64] https://download.docker.com/linux/$(. /etc/os-release; echo \u0026#34;$ID\u0026#34;) \\ $(lsb_release -cs) \\ stable\u0026#34; \u0026amp;\u0026amp; \\ apt-get update apt-get -y install docker-ce 도커 빌드 파일 생성 # Dockerfile 생성 및 편집모드 전환 ~# vi Dockerfile Dockerfile 내용 FROM jenkins/jenkins:lts-jdk17 USER root COPY install-docker.sh /install-docker.sh RUN chmod +x /install-docker.sh RUN /install-docker.sh RUN usermod -aG docker jenkins RUN setfacl -Rm d:g:docker:rwx,g:docker:rwx /var/run/ USER jenkins 도커 허브 ## 도커 이미지 생성 ~# docker build -t 도커허브계정/react-docker:1.0 . # \u0026#39;.\u0026#39;까지 명령어 # 도커 이미지를 도커 허브 사이트에 업로드 하기 ~# docker login # userID 및 password 입력한다. ~# docker push 도커허브계정/react-docker:1.0 # 도커허브에서 확인 이렇게 나오면 성공.\n컨테이너 생성 및 실행하기 (DooD -Docker Out of Docker 방식) #아래 명령어를 입력한다. (한줄 명령어임에 유의.)\ndocker run --privileged -d -v /var/run/docker.sock:/var/run/docker.sock -v jenkins_home:/var/jenkins_home -p 8080:8080 -p 50000:50000 --restart=on-failure --network=\u0026#34;jenkins\u0026#34; --name docker-jenkins 도커허브계정/react-docker:1.0 확인하기\n# 확인 1 \u0026gt; root@react-jenkins:~/jenkins# docker container ls CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES a99724ad398f ssomal62/react-docker:1.0 \u0026#34;/usr/bin/tini -- /u…\u0026#34; 58 seconds ago Up 57 seconds 0.0.0.0:8080-\u0026gt;8080/tcp, 0.0.0.0:50000-\u0026gt;50000/tcp docker-jenkins # 확인2 : 볼륨확인 \u0026gt; root@react-jenkins:~/jenkins# docker volume ls DRIVER VOLUME NAME local jenkins_home # ← 이렇게 나와야 성공! root@react-jenkins:~/jenkins# 젠킨스 #젠킨스 실행하기 #아래 경로로 접속한다.\nhttp://젠킨스서버공인IP주소:8080\n위 주소를 입력하면\n나온다. 초기 비밀번호 확인은 아래 명령어를 이용해서\n# 초기 비밀번호 확인 방법 ~# docker logs docker-jenkins 이렇게 입력하면 아래 결과가 띄워진다.\n************************************************************* ************************************************************* ************************************************************* Jenkins initial setup is required. An admin user has been created and a password generated. Please use the following password to proceed to installation: 3dd6afb3260c4736976ee7dc50cf826d # ← 이게 초기 비밀번호 ! This may also be found at: /var/jenkins_home/secrets/initialAdminPassword ************************************************************* ************************************************************* ************************************************************* 위 화면에서 좌측 Install suggested plugins를 눌러 설치한다.\n설치 중\u0026hellip;\nip 화면 그대로 넘기기\nStart using Jenkins 클릭\n젠킨스 준비 완료!\n젠킨스 환경설정 #JDK installations #Jenkins 관리 \u0026gt; Tools \u0026gt; JDK installations \u0026gt; addJDk \u0026gt; Save\n다시 Tools로 들어가보면 JDK가 install된 것을 확인할 수 있다.\nGradle 8.5 # 설정 후 Save\nnode.js #Jenkins \u0026gt; Plugins\nAvilble plugins선택 후 nodeJs 검색\n검색 결과 선택후 install\n다시 Tools로 가서 nodeJs 선택\n프로젝트 깃 연결 # [+ 새로운 Item] \u0026gt; 프로젝트명 작성 \u0026gt; FreeStyle \u0026gt; OK\n젠 패스워드에 깃허브 토큰 넣기\n[Apply]\n빌드 # [▶ 지금 빌드] 선택\n이렇게 나오면 성공.\n# 프로젝트 파일 \u0026gt; 작업공간\n프로젝트폴더 \u0026gt; build / libs 로 이동\ncherry-weather-0.0.1-SNAPSHOT.jar 위 파일 이름을 복사해둔다.\n스프링 프로젝트 파일로 동해서 #도커파일 생성\nFROM openjdk:17 ARG JAR_FILE=build/libs/cherry-weather-0.0.1-SNAPSHOT.jar COPY ${JAR_FILE} app.jar ENTRYPOINT [ \u0026#34;java\u0026#34;, \u0026#34;-jar\u0026#34;, \u0026#34;app.jar\u0026#34; ] ARG JAR_FILE 값으로 내 프로젝트의 스냅샷jar 파일을 등록한다. (경로는 그대로, 파일명만 변경)\n리액트 빌드 설정 #build.gradle에서 아래 내용 중간에 추가 삽입\n// React build 설정 def reactAppDir = \u0026#34;$projectDir/src/main/react-app\u0026#34; // 리액트 앱 경로 /* sourceSets { main { resources { srcDirs = [\u0026#34;$webappDir/build\u0026#34;, \u0026#34;$projectDir/src/main/resources\u0026#34;] } } } */ processResources { dependsOn \u0026#34;copyReactFile\u0026#34; //dependsOn \u0026#34;appNpmInstall\u0026#34; } task copyReactFile(type: Copy) { dependsOn \u0026#34;buildReact\u0026#34; from \u0026#34;$reactAppDir/build\u0026#34; //into \u0026#34;$buildDir/resources/main/static\u0026#34; into \u0026#34;$projectDir/src/main/resources/static/\u0026#34; } task buildReact(type: Exec) { dependsOn \u0026#34;installReact\u0026#34; workingDir \u0026#34;$reactAppDir\u0026#34; inputs.dir \u0026#34;$reactAppDir\u0026#34; group = BasePlugin.BUILD_GROUP if (System.getProperty(\u0026#39;os.name\u0026#39;).toLowerCase(Locale.ROOT).contains(\u0026#39;windows\u0026#39;)) { commandLine \u0026#34;npm.cmd\u0026#34;, \u0026#34;run-script\u0026#34;, \u0026#34;build\u0026#34; } else { commandLine \u0026#34;npm\u0026#34;, \u0026#34;run-script\u0026#34;, \u0026#34;build\u0026#34; } } task installReact(type: Exec) { workingDir \u0026#34;$reactAppDir\u0026#34; inputs.dir \u0026#34;$reactAppDir\u0026#34; group = BasePlugin.BUILD_GROUP if (System.getProperty(\u0026#39;os.name\u0026#39;).toLowerCase(Locale.ROOT).contains(\u0026#39;windows\u0026#39;)) { commandLine \u0026#34;npm.cmd\u0026#34;, \u0026#34;audit\u0026#34;, \u0026#34;fix\u0026#34; commandLine \u0026#34;npm.cmd\u0026#34;, \u0026#34;install\u0026#34; } else { commandLine \u0026#34;npm\u0026#34;, \u0026#34;audit\u0026#34;, \u0026#34;fix\u0026#34; commandLine \u0026#34;npm\u0026#34;, \u0026#34;install\u0026#34; } } // 젠킨스에서 다시한번 빌드 실행.\n웹훅 #웹훅 설정 #Git \u0026gt; Setting \u0026gt; Webhooks \u0026gt; AddWebHook\nPayload URL에 젠킨스 주소 + /github-webhook/ 으로 입력한다. / 누락 없도록 주의\n웹훅 주소 확인 # http://223.130.135.143:8080/github-webhook/ 스프링부트 애플리케이션 docker 이미지 생성 및 도커 허브에 push 하기 #젠킨스 \u0026gt; 프로젝트 \u0026gt; 구성 \u0026gt; Build Steps\nAdd build step : Execute shell 클릭\ndocker build -t 도커허브계정/react-docker:2.0 . docker login -u \u0026#39;도커허브계정\u0026#39; -p \u0026#39;도커허브비밀번호\u0026#39; docker.io docker push 도커허브계정/react-docker:2.0 입력 후 저장\n젠킨스용 서버로 이동해서 아래 명령어 실행. #안하면 충돌나므로 미리 설정.\nroot@react-jenkins:~/jenkins# chmod 666 /var/run/docker.sock 빌드 실행해서 정상인지 확인 # # docker images 명령어로 조회 root@react-jenkins:~/jenkins# docker images REPOSITORY TAG IMAGE ID CREATED SIZE ssomal62/react-docker 2.0 2e23e6bfaee2 About a minute ago 494MB # ↑ 2.0이 생성되면 정상. ssomal62/react-docker 1.0 5d148dab44bb 4 hours ago 1.1GB jenkins/jenkins lts-jdk17 b29eae45bb8c 45 hours ago 477MB 스프링부트 애플리케이션 컨테이너 실행하기/ssh-key 등록 #jenkins 서버에 작업 디렉토리 만들기 #root@react-jenkins:~/jenkins# mkdir springboot root@react-jenkins:~/jenkins# cd springboot/ # 도커 젠킨스 접속 root@react-jenkins:~/jenkins/springboot# docker exec -itu 0 docker-jenkins bash # 도커 젠킨스 키 생성 root@a99724ad398f:/# ssh-keygen -t rsa -C \u0026#34;docker-jenkins-key\u0026#34; -m PEM -P \u0026#34;\u0026#34; -f /root/.ssh/docker-jenkins-key # 프라이빗 키와 퍼블릭키 확인하기 root@a99724ad398f:/# ls ~/.ssh/ docker-jenkins-key docker-jenkins-key.pub # ↑ 프라이빗 키 ↑ 퍼블릭 키 # 프라이빗 키 확인 root@a99724ad398f:/# cat ~/.ssh/docker-jenkins-key # 퍼블릭 키 확인 root@a99724ad398f:/# cat ~/.ssh/docker-jenkins-key.pub SSH-KEY 개인키 파일을 젠킨스 홈 폴더에 두기 #root@a99724ad398f:/# cp ~/.ssh/docker-jenkins-key /var/jenkins_home/ root@a99724ad398f:/# chmod +r /var/jenkins_home/docker-jenkins-key root@a99724ad398f:/# exit #젠킨스를 나간다. docker-jenkins 컨테이너의 SSH-KEY 공개키 파일을 Host로 복사해오기 #root@react-jenkins:~/jenkins/springboot# docker cp docker-jenkins:/root/.ssh/docker-jenkins-key.pub ./docker-jenkins-key.pub Successfully copied 2.56kB to /root/jenkins/springboot/docker-jenkins-key.pub root@react-jenkins:~/jenkins/springboot# cat docker-jenkins-key.pub 젠킨스 서버에서 퍼블릭키 복사해두기 ##아래 명령어 치고 나오는 키 복사 root@react-jenkins:~/jenkins/springboot# cat docker-jenkins-key.pub 스프링부트 서버 #★★★ bitcamp-springboot 서버로 가서 작업\nSSH-KEY 공개키 등록하기 #root@react-springboot:~# mkdir .ssh root@react-springboot:~# cd .ssh root@react-springboot:~/.ssh# vi authorized_keys #편집모드에서 아까 복사한 젠킨스 키만 그대로 등록 후 저장 Jenkins에 Publish Over SSH 플러그인 설정 #Jenkins 관리 \u0026gt; Plugins \u0026gt; Available plugins\nPublish Over SSH 검색\n체크 후 인스톨\nSSH 플러그인 연동 #Jenkins 관리 \u0026gt; System\n맨 아래에 [Publish over SSH] 로 이동\nPassphrase: 접속하려는 서버 암호. Path to key: /var/jenkins_home/docker-jenkins-key Key: 개인키 파일의 내용 \u0026lt;=== SSH-KEY 개인키 파일의 내용을 직접 입력할 때 Key 가져오기 #젠킨스 서버에서 프라이빗 키 다시 확인 해서 복사\nroot@react-jenkins:~/springboot# docker exec -itu 0 docker-jenkins bash root@bd77b134919b:/# cat ~/.ssh/docker-jenkins-key #-----BEGIN RSA PRIVATE KEY----- 여기부터 #~~~~~ #-----END RSA PRIVATE KEY----- 여기까지 복사 위 키를 복사해서 Key를 넣는다.\n[추가] 누르고\nSSH Servers 설정 # Name : ncp 서버 이름 Hostname : 공인IP UseName : root [Test Configuration] 클릭해서 [Success] 뜨면 성공.\nJenkins 서버에서 스프링부트 서버를 제어하여 스프링부트 컨테이너 실행하기 #스프링부트 서버에서 docker pull 및 run #Dashboard \u0026gt; 프로젝트 선택 \u0026gt; 구성 \u0026gt; 빌드 환경\n원래 docker login -u \u0026#39;도커허브계정\u0026#39; -p \u0026#39;도커허브비밀번호\u0026#39; docker.io docker pull [dockerHub UserName]/[dockerHub Repository]:[version] docker ps -q --filter name=[containerName] | grep -q . \u0026amp;\u0026amp; docker rm -f $(docker ps -aq --filter n docker run -d --name [containerName] -p 80:스프링부트포트번호 [dockerHub UserName]/[dockerHub Repository]:[version] 실제 코드 docker login -u \u0026#39;도커허브계정\u0026#39; -p \u0026#39;도커허브비밀번호\u0026#39; docker.io docker pull 도커허브계정/react-docker:2.0 docker ps -q --filter name=docker-springboot | grep -q . \u0026amp;\u0026amp; docker rm -f $(docker ps -aq --filter name=docker-springboot) docker run -d --name docker-springboot -p 80:8080 도커허브계정/react-docker:2.0 저장하고 다시 빌드 실행 후\nspringboot 서버 아이피를 주소창에 입력했을 때 정상적으로 나오면 성공!\n긴 여정 종료 !\n","date":"2024-01-26","permalink":"/devl/springboot/004/","section":"Developer Course","summary":"프로젝트 생성 및 Git 연결 # 레포지토리 생성 경로 설정.","title":"프로젝트 배포"},{"content":"","date":null,"permalink":"/devl/react/","section":"Developer Course","summary":"","title":"React"},{"content":"\u0026gt; npx create-react-app day011person \u0026gt; npm install axios \u0026gt; npm install react-router-dom 기본 세팅 #index.js #root.render( \u0026lt;React.StrictMode\u0026gt; \u0026lt;Root /\u0026gt; \u0026lt;/React.StrictMode\u0026gt; ); Root.js #const Root = () =\u0026gt; { return ( \u0026lt;BrowserRouter\u0026gt; \u0026lt;RouterMain/\u0026gt; \u0026lt;/BrowserRouter\u0026gt; ); }; RouterMain.js #return ( \u0026lt;div\u0026gt; \u0026lt;Routes\u0026gt; \u0026lt;Route path=\u0026#34;/\u0026#34; element={\u0026lt;PersonList/\u0026gt;} /\u0026gt; \u0026lt;Route path=\u0026#34;/writeform\u0026#34; element={\u0026lt;PersonForm/\u0026gt;} /\u0026gt; \u0026lt;Route path=\u0026#34;/datail/:pnum\u0026#34; element={\u0026lt;PersonDetail/\u0026gt;} /\u0026gt; \u0026lt;Route path=\u0026#34;/updateform/:pnum\u0026#34; element={\u0026lt;PersonUpdateForm/\u0026gt;} /\u0026gt; {/* 위 외 매핑주소일 경우 404 호출 */} \u0026lt;Route path=\u0026#39;*\u0026#39; element={ \u0026lt;div style={{margin:\u0026#39;auto\u0026#39;}}\u0026gt; \u0026lt;img alt=\u0026#34;\u0026#34; src = {img404} /\u0026gt; \u0026lt;/div\u0026gt; } /\u0026gt; \u0026lt;/Routes\u0026gt; \u0026lt;/div\u0026gt; ); 각 컴포넌트 설정 #PersonList.js #const PersonList = () =\u0026gt; { const navi = useNavigate(); //router를 설치해야 나옴 return ( \u0026lt;div style={{margin: \u0026#39;30px, 50px\u0026#39;}}\u0026gt; \u0026lt;button type=\u0026#39;button\u0026#39; className=\u0026#39;btn btn-outline-secondary\u0026#39; onClick={() =\u0026gt; navi (\u0026#34;/writeform\u0026#34;)}\u0026gt;멤버 추가\u0026lt;/button\u0026gt; {/* ↑ navi 상수를 이용해서 경로 설정하는 방법 */} \u0026lt;br /\u0026gt; \u0026lt;h3 className=\u0026#39;alert alert-info\u0026#39;\u0026gt;Person 멤버 목록\u0026lt;/h3\u0026gt; \u0026lt;/div\u0026gt; ); } ","date":"2024-01-19","permalink":"/devl/react/007/","section":"Developer Course","summary":"\u0026gt; npx create-react-app day011person \u0026gt; npm install axios \u0026gt; npm install react-router-dom 기본 세팅 #index.","title":"React #7 기초 복습"},{"content":"새프로젝트 생성 후 사전 설치\n\u0026gt; npm install @mui/material @emotion/react @emotion/styled \u0026gt; npm install @mui/material @mui/styled-engine-sc styled-components \u0026gt; npm install @mui/icons-material \u0026gt; npm install axios \u0026gt; npm install react-router-dom 패키지 구조 # 세팅 #최상위 index #const root = ReactDOM.createRoot(document.getElementById(\u0026#39;root\u0026#39;)); root.render( \u0026lt;React.StrictMode\u0026gt; \u0026lt;Root /\u0026gt; \u0026lt;/React.StrictMode\u0026gt; ); Root.js #const Root = () =\u0026gt; { return ( \u0026lt;BrowserRouter\u0026gt; \u0026lt;RouterMain /\u0026gt; \u0026lt;/BrowserRouter\u0026gt; ); }; Menu.js #\u0026lt;a\u0026gt;태그를 사용할 수 없고 \u0026lt;NavLink\u0026gt; 로 대체해서 사용한다.\nconst Menu = () =\u0026gt; { return ( \u0026lt;div\u0026gt; \u0026lt;ul className=\u0026#39;menu\u0026#39;\u0026gt; \u0026lt;li\u0026gt; {/* \u0026lt;a\u0026gt;태그 사용 불가 */} \u0026lt;NavLink to={\u0026#34;/\u0026#34;}\u0026gt;HOME\u0026lt;/NavLink\u0026gt; {/* \u0026#39;/\u0026#39; 은 최상위 경로 */} \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;NavLink to={\u0026#34;/about\u0026#34;}\u0026gt;ABOUT\u0026lt;/NavLink\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;NavLink to={\u0026#34;/product\u0026#34;}\u0026gt;PRODUCT\u0026lt;/NavLink\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; ); }; RouterMain.js #import React from \u0026#39;react\u0026#39;; import Menu from \u0026#34;./components/Menu\u0026#34;; //import에 유의 const RouterMain = () =\u0026gt; { return ( \u0026lt;div\u0026gt; \u0026lt;Menu /\u0026gt; {/* Menu 연결 */} \u0026lt;hr style={{clear:\u0026#39;both\u0026#39;}} /\u0026gt; {/* element 에 내가 넣고 싶은 태그나 컴포넌트 주입 */} \u0026lt;Routes\u0026gt; \u0026lt;Route path = \u0026#34;/\u0026#34; element={\u0026lt;Home /\u0026gt;} /\u0026gt; \u0026lt;Route path = \u0026#34;/about\u0026#34; element={\u0026lt;About /\u0026gt;} /\u0026gt; \u0026lt;Route path = \u0026#34;/product\u0026#34; element={\u0026lt;Product /\u0026gt;} /\u0026gt; {/* 그 이외의 매핑주소로 되어있을 경우 */} \u0026lt;Route path = \u0026#39;*\u0026#39; element = { \u0026lt;div\u0026gt; 잘못된 URL 주소입니다.\u0026lt;br /\u0026gt; \u0026lt;img alt=\u0026#39;\u0026#39; src = {require(`../src/images/404.png`)} /\u0026gt; \u0026lt;/div\u0026gt; } /\u0026gt; \u0026lt;/Routes\u0026gt; \u0026lt;/div\u0026gt; ); }; url으로 변수 설정 #RouterMain.js #:변수명으로 url에 추가 입력\n// ↓\u0026#39;:emp\u0026#39;이 변수명 \u0026lt;Route path = \u0026#34;/about/:emp\u0026#34; element={\u0026lt;About /\u0026gt;} /\u0026gt; Menu.js #\u0026lt;li\u0026gt; \u0026lt;NavLink to={\u0026#34;/about/Google\u0026#34;}\u0026gt;ABOUT-구글\u0026lt;/NavLink\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;NavLink to={\u0026#34;/about/Samsung\u0026#34;}\u0026gt;ABOUT-삼성\u0026lt;/NavLink\u0026gt; \u0026lt;/li\u0026gt; About.js #const About = () =\u0026gt; { const {emp} = useParams(); console.log({emp}); console.log({emp}, emp); return ( \u0026lt;div\u0026gt; \u0026lt;Alert severity=\u0026#39;success\u0026#39; variant=\u0026#39;filled\u0026#39;\u0026gt; About component 입니다.\u0026lt;/Alert\u0026gt; \u0026lt;/div\u0026gt; ); }; //콘솔 출력 결과 console.log({emp}); 출력\u0026gt; {emp: \u0026#39;Samsung\u0026#39;} 또는 {emp: \u0026#39;Google\u0026#39;} console.log(emp); 출력\u0026gt; Samsung 또는 Google 변수에 따른 이미지 출력하기\nimport img1 from \u0026#39;../images/1.jpg\u0026#39; import img2 from \u0026#39;../images/2.jpg\u0026#39; return ( \u0026lt;img alt=\u0026#39;\u0026#39; src={(emp === \u0026#39;Samsung\u0026#39; ? img1 : img2)}/\u0026gt; ); url으로 변수 설정 2 #RouterMain.js #\u0026lt;Route path = \u0026#34;/about/:emp\u0026#34; element={\u0026lt;About /\u0026gt;} /\u0026gt; 위처럼 선언 대신 아래 방식을 사용할 수도 있다.\n\u0026lt;Route path = \u0026#34;/about\u0026#34;\u0026gt; \u0026lt;Route path = \u0026#34;:emp\u0026#34; element={\u0026lt;About/\u0026gt;} /\u0026gt; \u0026lt;/Route\u0026gt; 변수가 없는 About 추가 #이 상태에서 변수가 없는 about 경로 추가\nRouterMain.js #\u0026lt;Route path = \u0026#34;/about\u0026#34; element={\u0026lt;About/\u0026gt;} \u0026gt; {/* 변수 없는 about에도 element 추가 */} \u0026lt;Route path = \u0026#34;:emp\u0026#34; element={\u0026lt;About/\u0026gt;} /\u0026gt; \u0026lt;/Route\u0026gt; Menu.js #\u0026lt;li\u0026gt; \u0026lt;NavLink to={\u0026#34;/about/\u0026#34;}\u0026gt;ABOUT\u0026lt;/NavLink\u0026gt; {/* 변수 없는 about 추가 */} \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;NavLink to={\u0026#34;/about/Google\u0026#34;}\u0026gt;ABOUT-구글\u0026lt;/NavLink\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;NavLink to={\u0026#34;/about/Samsung\u0026#34;}\u0026gt;ABOUT-삼성\u0026lt;/NavLink\u0026gt; \u0026lt;/li\u0026gt; About.js #삼항연산자를 사용사요 emp가 null경우와 아닐때 보여주는 값을 다르게 설정한다\nreturn ( \u0026lt;div\u0026gt; { emp == null ? //emp값이 null일 때 실행 할 영역 \u0026lt;div\u0026gt; \u0026lt;h1\u0026gt;저는 취업준비생입니다.\u0026lt;/h1\u0026gt; \u0026lt;img alt=\u0026#39;\u0026#39; src = {require(\u0026#39;../images/7.jpg\u0026#39;)} /\u0026gt; \u0026lt;/div\u0026gt; : //emp값이 존재할 때 실행 할 영역 \u0026lt;div\u0026gt; \u0026lt;h1\u0026gt; 저는 {emp}에 다니고 있습니다.\u0026lt;/h1\u0026gt; \u0026lt;img alt=\u0026#39;\u0026#39; src={(emp === \u0026#39;Samsung\u0026#39; ? img1 : img2)}/\u0026gt; \u0026lt;/div\u0026gt; } \u0026lt;/div\u0026gt; ); pages \u0026gt; index.js의 용도 #RouterMain.js #RouterMain의 import 상황을 보면 컴포넌트를 각각 임포트 한 것을 볼 수 있다.\nimport Product from \u0026#34;./pages/Product\u0026#34;; import About from \u0026#34;./pages/About\u0026#34;; import Home from \u0026#34;./pages/Home\u0026#34;; pages \u0026gt; index.js #export {default as Home} from \u0026#39;./Home\u0026#39; export {default as About} from \u0026#39;./About\u0026#39; export {default as Product} from \u0026#39;./Product\u0026#39; 위 내용을 입력하고 다시 RouterMain.js로 이동\nRouterMain.js #import {About, Home, Product} from \u0026#34;./pages\u0026#34;; 이렇게 한줄로 import 가 가능해진다.\n서브메뉴 만들기 #RouterMain.js #Home 에 서브메뉴 테스트를 위해 경로를 아래와 같이 수정\n\u0026lt;Route path = \u0026#34;/home/*\u0026#34; element={\u0026lt;Home /\u0026gt;} /\u0026gt; Menu.js #마찬가지로 / 에서 /home으로 HOME 경로를 수정.\n\u0026lt;NavLink to={\u0026#34;/home\u0026#34;}\u0026gt;HOME\u0026lt;/NavLink\u0026gt; Home.js #\u0026lt;h2\u0026gt;서브 메뉴들\u0026lt;/h2\u0026gt; \u0026lt;NavLink to={\u0026#34;/home/sub1\u0026#34;} \u0026gt; 연혁 \u0026lt;/NavLink\u0026gt; \u0026amp;nbsp;\u0026amp;nbsp; \u0026lt;NavLink to={\u0026#34;/home/sub2\u0026#34;} \u0026gt; 회사 구조 \u0026lt;/NavLink\u0026gt; \u0026amp;nbsp;\u0026amp;nbsp; \u0026lt;NavLink to={\u0026#34;/home/sub3\u0026#34;} \u0026gt; 오시는 길 \u0026lt;/NavLink\u0026gt; \u0026lt;Routes\u0026gt; \u0026lt;Route path = \u0026#39;sub1\u0026#39; element={\u0026lt;HomeSub1/\u0026gt;} /\u0026gt; \u0026lt;Route path = \u0026#39;sub2\u0026#39; element={\u0026lt;HomeSub2/\u0026gt;} /\u0026gt; \u0026lt;Route path = \u0026#39;sub3\u0026#39; element={\u0026lt;HomeSub3/\u0026gt;} /\u0026gt; \u0026lt;/Routes\u0026gt; ","date":"2024-01-18","permalink":"/devl/react/006/","section":"Developer Course","summary":"새프로젝트 생성 후 사전 설치","title":"React #6 기초 Router"},{"content":"Axios 설정 #프로젝트 폴더에 설치 #\u0026gt; npm install axios axios import #import axios from \u0026#39;axios\u0026#39; 자식앱에서 부모앱으로 전송할 데이터 보내기 #부모앱 (OneApp.js) #//저장 이벤트 const personInsert = (data) =\u0026gt; { console.log(data); } 자식앱을 호출할 때 onSave라는 이름으로 설정한 함수 전달\n\u0026lt;PersonForm onSave = {personInsert}/\u0026gt; 자식앱 (PersonForm.js) #const PersonForm = ({onSave}) =\u0026gt; { // ↑ 파라미터 선언에 유의 const [name, setName] = useState(\u0026#39;\u0026#39;); const [age, setAge] = useState(\u0026#39;\u0026#39;); const [photo, setPhoto] = useState(\u0026#39;1.jpg\u0026#39;); return ( \u0026lt;input type=\u0026#39;text\u0026#39; className=\u0026#39;form-control\u0026#39; value={name} onChange={(e)=\u0026gt; setName(e.target.value)}/\u0026gt; \u0026lt;input type=\u0026#39;text\u0026#39; className=\u0026#39;form-control\u0026#39; value={age} onChange={(e)=\u0026gt; setAge(e.target.value)}/\u0026gt; \u0026lt;select className=\u0026#39;form-select\u0026#39; onChange={(e) =\u0026gt; setPhoto(e.target.value)} \u0026gt; { [...new Array(20)].map((photo, idx) =\u0026gt; \u0026lt;option key={idx}\u0026gt; {idx+1}.jpg \u0026lt;/option\u0026gt; ) } \u0026lt;/select\u0026gt; \u0026lt;button type=\u0026#39;button\u0026#39; className=\u0026#39;btn btn-outline-danger\u0026#39; onClick={addButtonEvent}\u0026gt;추가\u0026lt;/button\u0026gt; ); }; const addButtonEvent = () =\u0026gt; { //자식엡에서 부모 컴포넌트의 메서드를 통해 입력한 데이터를 부모 컴포넌트로 보낸다. onSave({name, age, mbti, photo}) //초기화 setName(\u0026#39;\u0026#39;); setAge(\u0026#39;\u0026#39;); } 만약 데이터의 key와 value가 다를 경우 아래처럼 설정해주면 된다.\n//key와 value가 같을 경우 onSave({name, age, mbti, photo}) //key와 value가 다를 경우 onSave({name : tName, age : tAge}) 버튼을 눌러 콘솔을 확인하면 정상적으로 데이터가 저장되고 있음을 확인할 수 있다.\naxios - Post DB 저장 #proxy 설정 #백엔드와 경로 package.json에서 맨아래에 추가로 설정\n.... //기타 앞에 다른 설정들 \u0026#34;development\u0026#34;: [ \u0026#34;last 1 chrome version\u0026#34;, \u0026#34;last 1 firefox version\u0026#34;, \u0026#34;last 1 safari version\u0026#34; ] }, //백엔드와 연결할 때 공통된 부분 따로 빼서 작성. \u0026#34;proxy\u0026#34; : \u0026#34;http://localhost:9002\u0026#34; } personInsert 에 axios 추가 # 기본 선언법 const personInsert = (data) =\u0026gt; { //스프링부트 서버로 데이터 보내서 DB 저장 axios.post(\u0026#34;/person/add\u0026#34;, data) .then((res) =\u0026gt; { //추가 성공 후 목록 다시 출력 영역 list(); }) .catch(error =\u0026gt; { console.log(\u0026#34;추가시 에러발생 : \u0026#34; + error); }); } await 선언법 const personInsert = async (data) =\u0026gt; { try { const res = await axios.post(\u0026#34;/person/add\u0026#34;, data); list(); } catch (error) { console.log(\u0026#34;추가시 에러발생 : \u0026#34; + error); } } axios - Get 데이터 가져오기 #list 호출 초기 설정\nconst list = ()=\u0026gt; { //GET 작성 } useEffect(() =\u0026gt; { list(); //처음 시작시 무조건 호출 },[]); // \u0026#39;[]\u0026#39;안에 아무 것도 쓰지 않으면 처음 시작시 한번만 호출 Get 요청 보내기 #const list = ()=\u0026gt; { axios.get(\u0026#34;/person/list\u0026#34;) .then(res =\u0026gt; { setPersonList(res.data); }) } \u0026lt;h5\u0026gt;총 {personList.length}명의 회원이 등록되어있습니다.\u0026lt;/h5\u0026gt; Get으로 받은 데이터 출력 #부모앱\n\u0026lt;table className=\u0026#39;table table-bordered\u0026#39; style={{width:\u0026#39;500px\u0026#39;}}\u0026gt; \u0026lt;tbody\u0026gt; { personList.map((rowData, idx) =\u0026gt; \u0026lt;PersonRowItem key={idx} row={rowData} idx={idx}/\u0026gt; ) } \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; Get데이터 출력할 PersonRowItem.js 생성\nconst PersonRowItem = (props) =\u0026gt; { const {row, idx} = props; return ( \u0026lt;tr\u0026gt; \u0026lt;td style={{width:\u0026#39;200px\u0026#39;}}\u0026gt; \u0026lt;img alt=\u0026#39;\u0026#39; src = {require(`../images/${row.photo}`)} style={{width:\u0026#39;200px\u0026#39;}}/\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;td valign=\u0026#39;middle\u0026#39;\u0026gt; \u0026lt;h5\u0026gt;번호 : {idx + 1}\u0026lt;/h5\u0026gt; \u0026lt;h5\u0026gt;이름 : {row.name}\u0026lt;/h5\u0026gt; \u0026lt;h5\u0026gt;나이 : {row.photo}\u0026lt;/h5\u0026gt; \u0026lt;h5\u0026gt;MBTI : {row.mbti}\u0026lt;/h5\u0026gt; \u0026lt;h6\u0026gt;등록일 : {row.writeDay}\u0026lt;/h6\u0026gt; \u0026lt;button type=\u0026#39;button\u0026#39; className=\u0026#39;btn btn-outline-info\u0026#39;\u0026gt;회원 삭제\u0026lt;/button\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; ); }; delete #//부모앱 const deletePerson = async (pnum) =\u0026gt; { const res = await axios.delete(\u0026#34;/person/delete/\u0026#34; + pnum); await list(); } ... \u0026lt;PersonRowItem key={idx} row={rowData} idx={idx} onDelete={deletePerson}/\u0026gt; //자식앱 const {row, idx, onDelete} = props; ... \u0026lt;button type=\u0026#39;button\u0026#39; className=\u0026#39;btn btn-outline-info\u0026#39; onClick={ () =\u0026gt; onDelete(row.pnum)}\u0026gt; 회원 삭제\u0026lt;/button\u0026gt; ","date":"2024-01-17","permalink":"/devl/react/005/","section":"Developer Course","summary":"Axios 설정 #프로젝트 폴더에 설치 #\u0026gt; npm install axios axios import #import axios from \u0026#39;axios\u0026#39; 자식앱에서 부모앱으로 전송할 데이터 보내기 #부모앱 (OneApp.","title":"React #5 기초 Axios"},{"content":"useRef # useRef : 값이 변경돼도 화면이 다시 랜더링되지 않음 값이 변경 시 화면에 바로 적용되는 state와는 달리 당장 화면에 출력할 필요없이 내부적인 값만 바뀌면 되는 경우에 사용한다. 새로고침 시 변경된 값을 확인할 수 있다. //1. state const [count, setCount] = useState(0); //2. useRef const countRef = useRef(0); \u0026lt;Button variant=\u0026#39;outlined\u0026#39; color=\u0026#39;success\u0026#39; size=\u0026#39;small\u0026#39; onClick = {()=\u0026gt;setCount(count + 1)}\u0026gt; count 변수 증가\u0026lt;/Button\u0026gt; \u0026lt;Button variant=\u0026#39;outlined\u0026#39; color=\u0026#39;primary\u0026#39; size=\u0026#39;small\u0026#39; onClick = {() =\u0026gt; { countRef.current = countRef.current + 1; // 화면에 바로 보이지 않기 때문에 콘솔로 확인하기. console.log(\u0026#34;countRef.current\u0026#34; + countRef.current); }}\u0026gt; useRef 변수 증가\u0026lt;/Button\u0026gt; useRef를 이용해서 값 입력하기 #상수 선언 #const [msg, setMsg] = useState(\u0026#39;\u0026#39;); const nameRef = useRef(\u0026#39;\u0026#39;); const korRef = useRef(0); const engRef = useRef(0); 폼생성 # \u0026lt;tr\u0026gt; \u0026lt;th style={{width:\u0026#39;100px\u0026#39;}}\u0026gt;이름\u0026lt;/th\u0026gt; \u0026lt;td\u0026gt;\u0026lt;input type=\u0026#39;text\u0026#39; className=\u0026#39;form-control\u0026#39; ref={nameRef}/\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th style={{width:\u0026#39;100px\u0026#39;}}\u0026gt;국어 점수\u0026lt;/th\u0026gt; \u0026lt;td\u0026gt;\u0026lt;input type=\u0026#39;text\u0026#39; className=\u0026#39;form-control\u0026#39; ref={korRef}/\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th style={{width:\u0026#39;100px\u0026#39;}}\u0026gt;영어 점수\u0026lt;/th\u0026gt; \u0026lt;td\u0026gt;\u0026lt;input type=\u0026#39;text\u0026#39; className=\u0026#39;form-control\u0026#39; ref={engRef}/\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td colSpan={2} align=\u0026#39;center\u0026#39;\u0026gt; \u0026lt;Button color = \u0026#39;info\u0026#39; variant=\u0026#39;outlined\u0026#39; onClick ={buttonResult}\u0026gt; 결과 확인 \u0026lt;/Button\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr style={{height:\u0026#39;100px\u0026#39;}}\u0026gt; \u0026lt;td colSpan={2} style={{whiteSpace:\u0026#39;pre-line\u0026#39;, backgroundColor:\u0026#39;aliceblue\u0026#39;}}\u0026gt; \u0026lt;h4\u0026gt;{msg}\u0026lt;/h4\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; 버튼이벤트 #const buttonResult = ()=\u0026gt; { //value를 붙여야함에 유의!! let name = nameRef.current.value; let kor = korRef.current.value; let eng = engRef.current.value; //숫자인지 확인 후 경고 if (isNaN(kor) || isNaN(eng)) { alert(\u0026#34;점수는 숫자로 입력해 주세요.\u0026#34;) return; } //총점, 평균 let total = Number(kor) + Number(eng); let avg = total / 2; //whiteSpace:\u0026#39;pre-line\u0026#39; 가 적용돼있어 작성한 그대로 줄바꿈되어 출력됨. let s = ` 이름 : ${name} 국어 점수 : ${kor} 영어 점수 : ${eng} 총점 : ${total} 평군 : ${avg} `; setMsg(s); //state변수 msg에 값 넣기 //입력값 초기화 nameRef.current.value = \u0026#39;\u0026#39;; korRef.current.value = \u0026#39;\u0026#39;; engRef.current.value = \u0026#39;\u0026#39;; nameRef.current.focus = \u0026#39;\u0026#39;; } 점수를 입력할 때에는 렌더링이 일어나지않으며, 버튼을 눌렀을 때에민 렌더링 실행됨.\n(state변수였다면 즉시 렌더링 반영됨.)\n하나의 변수에 여러 데이터 저장하기 #상수선언\nconst [inputArray, setInputArray] = useState([]); //객체를 갖는 상태 변수 const [inputs, seetInputs] = useState({ name:\u0026#39;\u0026#39;, nickName:\u0026#39;\u0026#39;, hp:\u0026#39;\u0026#39;, addr:\u0026#39;\u0026#39; }) \u0026lt;input type=\u0026#39;text\u0026#39; className=\u0026#39;form-control\u0026#39; value = {inputs.name} name=\u0026#39;name\u0026#39;/\u0026gt; \u0026lt;input type=\u0026#39;text\u0026#39; className=\u0026#39;form-control\u0026#39; value = {inputs.nickName} name=\u0026#39;nickName\u0026#39;/\u0026gt; \u0026lt;input type=\u0026#39;text\u0026#39; className=\u0026#39;form-control\u0026#39; value = {inputs.hp} name=\u0026#39;hp\u0026#39;/\u0026gt; \u0026lt;input type=\u0026#39;text\u0026#39; className=\u0026#39;form-control\u0026#39; value = {inputs.addr} name=\u0026#39;addr\u0026#39;/\u0026gt; \u0026lt;Button color=\u0026#39;info\u0026#39; variant=\u0026#39;outlined\u0026#39;\u0026gt;배열에 추가\u0026lt;/Button\u0026gt; \u0026lt;Button color=\u0026#39;info\u0026#39; variant=\u0026#39;outlined\u0026#39;\u0026gt;입력값 초기화\u0026lt;/Button\u0026gt; \u0026lt;div style={{width:\u0026#39;450px\u0026#39;}}\u0026gt; 출력 \u0026lt;br/\u0026gt; name : {inputs.name}\u0026lt;br/\u0026gt; nickName : {inputs.nickName}\u0026lt;br/\u0026gt; hp : {inputs.hp}\u0026lt;br/\u0026gt; addr : {inputs.addr}\u0026lt;br/\u0026gt; \u0026lt;/div\u0026gt; 입력시 inputs의 해당 멤버변수로 값이 들어가게 하기 위한 이벤트 #const inputChangeEvent = (e)=\u0026gt; { const {name, value} = e.target; //Change된 이벤트 태그의(현재는 input) 속성인 name 과 value 값을 얻음. setInputs({ ...inputs, // 1. 기존의 값을 펼침 연산자로 일단 넣고 [name] : value // 2. 입력한 태그의 name에 값 변경 }) } input에 onChange 함수 등록\n이름\u0026lt;input type=\u0026#39;text\u0026#39; className=\u0026#39;form-control\u0026#39; value = {inputs.name} name=\u0026#39;name\u0026#39; onChange={inputChangeEvent}/\u0026gt; 닉네임\u0026lt;input type=\u0026#39;text\u0026#39; className=\u0026#39;form-control\u0026#39; value = {inputs.nickName} name=\u0026#39;nickName\u0026#39; onChange={inputChangeEvent}/\u0026gt; 연락처\u0026lt;input type=\u0026#39;text\u0026#39; className=\u0026#39;form-control\u0026#39; value = {inputs.hp} name=\u0026#39;hp\u0026#39; onChange={inputChangeEvent}/\u0026gt; 주소\u0026lt;input type=\u0026#39;text\u0026#39; className=\u0026#39;form-control\u0026#39; value = {inputs.addr} name=\u0026#39;addr\u0026#39; onChange={inputChangeEvent}/\u0026gt; 배열 추가 이벤트 #const addArrayEvent = () =\u0026gt; { //기존 배열 데이터에 묶음 변수인 inputs 추가 setInputArray(inputArray.concat(inputs)); } 입력값 초기화 #const clearFormEvent = ()=\u0026gt; { setInputs({ name:\u0026#39;\u0026#39;, nickName: \u0026#39;\u0026#39;, hp: \u0026#39;\u0026#39;, addr : \u0026#39;\u0026#39; }) } 버튼에 적용하기\n\u0026lt;Button color=\u0026#39;info\u0026#39; variant=\u0026#39;outlined\u0026#39; onClick = {addArrayEvent}\u0026gt;배열에 추가\u0026lt;/Button\u0026gt; \u0026lt;Button color=\u0026#39;info\u0026#39; variant=\u0026#39;outlined\u0026#39; onClick = {clearFormEvent}\u0026gt;입력값 초기화\u0026lt;/Button\u0026gt; 배열 출력 #\u0026lt;table className=\u0026#39;table table-bordered\u0026#39; style={{width:\u0026#39;500px\u0026#39;}}\u0026gt; \u0026lt;caption align=\u0026#39;top\u0026#39;\u0026gt;데이터 갯수 : {inputArray.length}\u0026lt;/caption\u0026gt; \u0026lt;thead\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th\u0026gt;이름\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;닉네임\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;hp\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;주소\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/thead\u0026gt; \u0026lt;tbody\u0026gt; { inputArray.map((item, idx)=\u0026gt; \u0026lt;tr key={idx}\u0026gt; \u0026lt;td\u0026gt;{item.name}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{item.nickName}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{item.hp}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{item.addr}\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; ) } \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; delete 기능 추가 #const deleteData= (deleteIdx) =\u0026gt;{ setInputArray(inputArray.filter((array, idx) =\u0026gt; deleteIdx !== idx)); } \u0026lt;span style={{marginLeft:\u0026#39;10px\u0026#39;, cursor:\u0026#39;pointer\u0026#39;}} onClick ={(e) =\u0026gt; deleteData(idx)}\u0026gt;🗑️\u0026lt;/span\u0026gt; 부모/자식 간 통신 # D_App : 부모 앱 D_Child_App : 자식 앱 부모앱에서 자식앱으로 변수값이나 이벤트를 보낼 수 있다. (props를 통해 전달)\n자식앱에서 부모앱으로 직접적으로 데이터를 보낼 수는 없음. 단, 이벤트 파라미터를 통해 전달하는 방법이 있다.\n대체로는 부모앱가 자식앱에 보냄\n특징 다시 정리\n부모 컴포넌트에서 자식 컴포넌트로 props를 통해서 값이나 이벤트 전달을 할 수 있다. 자식 컴포넌트에서는 부모 컴포넌트의 값을 props 로 받아서 출력은 가능하지만 직접적으로 변경은 불가능하다. 만약 변경하려면 부모의 이벤트를 props를 통해서 호출을 해서 그 이벤트 함수에서 변경을 하면 된다. props 는 부모컴포넌트에서 설정하며, 컴포넌트 자신은 해당 props 를 읽기전용으로만 사용할 수 있다. 컴포넌트 내부에서 읽고 또 업테이트하려면 state를 써야한다. 부모앱 설정 #const D_App = (props) =\u0026gt; { return( \u0026lt;div\u0026gt; \u0026lt;h3 className=\u0026#39;alert alert-danger\u0026#39;\u0026gt;D : 부모, 자식간 통신\u0026lt;/h3\u0026gt; {/* 아래 속성 name, age, addr 의 값이 props를 통해 전달된다.*/} \u0026lt;D_Child_App name={\u0026#39;캔디\u0026#39;} age={23} addr={\u0026#39;제주도\u0026#39;}/\u0026gt; \u0026lt;D_Child_App name={\u0026#39;안쏘니\u0026#39;} age={28} addr={\u0026#39;LA\u0026#39;}/\u0026gt; \u0026lt;D_Child_App name={\u0026#39;테리우스\u0026#39;} age={35} addr={\u0026#39;하와이\u0026#39;}/\u0026gt; \u0026lt;/div\u0026gt; ) } export { D_App } 자식앱 설정 방법 1 #const D_Child_App = (props) =\u0026gt; { return( \u0026lt;div className=\u0026#39;box\u0026#39;\u0026gt; {props.name}님의 나이는 {props.age}이며 고향은 {props.addr}입니다. \u0026lt;/div\u0026gt; ) } export default D_Child_App; //반드시 default로 되어있어야함. 자식앱 설정 방법 2 #const D_Child_App = (props) =\u0026gt; { const {name, age, addr} = props; //출력만 가능, 수정은 불가능 (읽기전용) return( \u0026lt;div className=\u0026#39;box\u0026#39;\u0026gt; {name}님의 나이는 {age}이며 고향은 {addr}입니다. \u0026lt;/div\u0026gt; ) } export default D_Child_App; 결과 # 자식앱에서 부모앱이 가진 변수 변경 #//부모앱 const changeCount = ()=\u0026gt; { setCount(count + 1) } return( \u0026lt;div\u0026gt; \u0026lt;h3 className=\u0026#39;alert alert-danger\u0026#39;\u0026gt;D : 부모, 자식간 통신\u0026lt;/h3\u0026gt; \u0026lt;h4\u0026gt;방문 횟수 : {count}회\u0026lt;/h4\u0026gt; {/*자식앱에서 변경할 항목 생성 */} \u0026lt;D_Child_App name={\u0026#39;캔디\u0026#39;} age={23} addr={\u0026#39;제주도\u0026#39;} incre={changeCount}/\u0026gt; \u0026lt;D_Child_App name={\u0026#39;안쏘니\u0026#39;} age={28} addr={\u0026#39;LA\u0026#39;} incre={changeCount}/\u0026gt; \u0026lt;D_Child_App name={\u0026#39;테리우스\u0026#39;} age={35} addr={\u0026#39;하와이\u0026#39;} incre={changeCount}/\u0026gt; \u0026lt;/div\u0026gt; ) //자식앱에서 incre를 받아 사용가능. \u0026lt;Button color=\u0026#39;info\u0026#39; variant=\u0026#39;outlined\u0026#39; size=\u0026#39;small\u0026#39; onClick = {() =\u0026gt; props.incre()}\u0026gt;증가\u0026lt;/Button\u0026gt; 테이블에서 행단을 자식앱에서 출력 #부모앱 설정 #객체형 상수 선언\nconst [photoArray, setPhotoArray]=useState([ { fname : \u0026#39;망고빙수\u0026#39;, fphoto : \u0026#39;1.jpg\u0026#39;, fprice : \u0026#39;12000\u0026#39;, fdate : new Date() }, { fname : \u0026#39;샌드위치\u0026#39;, fphoto : \u0026#39;10.jpg\u0026#39;, fprice : \u0026#39;9900\u0026#39;, fdate : new Date() } ]) \u0026lt;table className=\u0026#39;table table-bordered\u0026#39; style={{width:\u0026#39;400px\u0026#39;}}\u0026gt; \u0026lt;thead\u0026gt; \u0026lt;tr style={{backgroundColor:\u0026#39;palegoldenrod\u0026#39;}}\u0026gt; \u0026lt;th\u0026gt;번호\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;메뉴명\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;가격\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;날짜\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/thead\u0026gt; \u0026lt;tbody\u0026gt; { photoArray.map((data, idx)=\u0026gt;( \u0026lt;E_RowItem row={data} idx={idx}/\u0026gt; )) } \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; 자식앱 설정 #// ↓ props 대신 부모앱에서 설정한 속성을 받도록 설정. const E_RowItem = ({row, idx}) =\u0026gt; { return( \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;{idx+1}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;img alt=\u0026#34;\u0026#34; src = {require(`../images/${row.fphoto}`)} width=\u0026#39;70\u0026#39; height=\u0026#39;70\u0026#39; hspace=\u0026#39;10\u0026#39;/\u0026gt;{row.fname}\u0026lt;/td\u0026gt; \u0026lt;td valign=\u0026#39;middle\u0026#39;\u0026gt;{row.fprice}\u0026lt;/td\u0026gt; \u0026lt;td valign=\u0026#39;middle\u0026#39;\u0026gt;{row.fdate.toLocaleDateString(\u0026#39;ko-KR\u0026#39;)}\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; ) } 입력 폼 데이터 전달 #//데이터 추가 이벤트 const dataAdd = (data) =\u0026gt; { setPhotoArray(photoArray.concat({ ...data, fdate : new Date() })) } {/* 부모앱에 입력 폼 추가*/} \u0026lt;E_RowItem onSave = {dataAdd()}/\u0026gt; \u0026lt;br/\u0026gt; //자식앱 const E_WriteForm = ({onSave}) =\u0026gt; { const [fname, setFname] = useState(\u0026#39;\u0026#39;); const [fphoto, setFphoto] = useState(\u0026#39;2.jpg\u0026#39;); const [fprice, setFprice] = useState(0); const onAddEvent= () =\u0026gt; { onSave({fname, fphoto, fprice}); //초기화 setFname(\u0026#39;\u0026#39;); setFprice(0); } return( \u0026lt;div className=\u0026#39;input-group\u0026#39;\u0026gt; 메뉴명 : \u0026lt;input type=\u0026#39;text\u0026#39; value={fname} onChange={(e)=\u0026gt; setFname(e.target.value)} style={{width:\u0026#39;100px\u0026#39;}} /\u0026gt; 가격 : \u0026lt;input type=\u0026#39;text\u0026#39; value={fprice} onChange={(e)=\u0026gt; setFprice(e.target.value)} style={{width:\u0026#39;70px\u0026#39;}} /\u0026gt; 사진 : \u0026lt;select onChange={(e)=\u0026gt; setFphoto(e.target.value)}\u0026gt; \u0026lt;option value={\u0026#39;2.jpg\u0026#39;}\u0026gt;사진1\u0026lt;/option\u0026gt; \u0026lt;option value={\u0026#39;12.jpg\u0026#39;}\u0026gt;사진2\u0026lt;/option\u0026gt; \u0026lt;option value={\u0026#39;15.jpg\u0026#39;}\u0026gt;사진3\u0026lt;/option\u0026gt; \u0026lt;/select\u0026gt; \u0026lt;Button color=\u0026#39;warning\u0026#39; varuabt=\u0026#39;outlined\u0026#39; size = \u0026#34;small\u0026#34; onClick ={onAddEvent}\u0026gt;추가\u0026lt;/Button\u0026gt; \u0026lt;/div\u0026gt; ) } 데이터 삭제 #//부모앱 const deleteData = (deleteIdx) =\u0026gt; { setPhotoArray(photoArray.filter((array, idx) =\u0026gt; deleteIdx !== idx)); } 자식앱으로 데이터 전달 #\u0026lt;tbody\u0026gt; { photoArray.map((data, idx)=\u0026gt;(\u0026lt;E_RowItem row={data} idx={idx} onDelete={deleteData}/\u0026gt;)) } \u0026lt;/tbody\u0026gt; 부모앱 onDelete 호출 #const E_RowItem = ({row, idx, onDelete}) =\u0026gt; { .... \u0026lt;td valign=\u0026#39;middle\u0026#39;\u0026gt; \u0026lt;span style={{curser:\u0026#39;pointer\u0026#39;}} onClick={()=\u0026gt; onDelete(idx)}\u0026gt;🗑️\u0026lt;/span\u0026gt; ️ \u0026lt;/td\u0026gt; } json데이터 출력 #{ \u0026#34;navData\u0026#34;: [ { \u0026#34;img\u0026#34; : \u0026#34;https://image.ohou.se/image/resize/bucketplace-v2-development/uploads-shortcut-home_feed_shortcut_sets-166485672496321483.png/512/none\u0026#34;, \u0026#34;title\u0026#34; : \u0026#34;쇼핑하기\u0026#34; }, { \u0026#34;img\u0026#34; : \u0026#34;https://image.ohou.se/image/resize/bucketplace-v2-development/uploads-shortcut-home_feed_shortcut_sets-166528077592274715.png/512/none\u0026#34;, \u0026#34;title\u0026#34; : \u0026#34;의식주예고\u0026#34; }, { \u0026#34;img\u0026#34; : \u0026#34;https://image.ohou.se/image/resize/bucketplace-v2-development/uploads-shortcut-home_feed_shortcut_sets-166485696782888460.png/512/none\u0026#34;, \u0026#34;title\u0026#34; : \u0026#34;오늘의딜\u0026#34; }, ] } const navData = cate.navData; //이미지에 적용할 ref 변수 선언 const mainPhotoRef = useRef(null); \u0026lt;div className=\u0026#39;nav_container\u0026#39;\u0026gt; \u0026lt;ul className=\u0026#39;nav_category\u0026#39;\u0026gt; { navData.map((item, idx) =\u0026gt; \u0026lt;li key = {idx}\u0026gt; \u0026lt;div\u0026gt;\u0026lt;img alt=\u0026#34;\u0026#34; src={item.img} className=\u0026#39;imgcategory\u0026#39; onClick={(e)=\u0026gt; { mainPhotoRef.current.src = e.target.src; }}/\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div style={{textAlign:\u0026#39;center\u0026#39;}}\u0026gt;{item.title}\u0026lt;/div\u0026gt; \u0026lt;/li\u0026gt; ) } \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; {/* 아이콘 클리시 작은 이미지를 가져와서 출력할 메인 이미지*/} \u0026lt;div\u0026gt; \u0026lt;img alt=\u0026#39;\u0026#39; src =\u0026#39;\u0026#39; style={{width:\u0026#39;300px\u0026#39;, height:\u0026#39;300px\u0026#39;, border:\u0026#39;5px inset gray\u0026#39;, margin: \u0026#39;50px 300px\u0026#39;}} ref={mainPhotoRef}/\u0026gt; \u0026lt;/div\u0026gt; ","date":"2024-01-16","permalink":"/devl/react/004/","section":"Developer Course","summary":"useRef # useRef : 값이 변경돼도 화면이 다시 랜더링되지 않음 값이 변경 시 화면에 바로 적용되는 state와는 달리 당장 화면에 출력할 필요없이 내부적인 값만 바뀌면 되는 경우에 사용한다.","title":"React #4 기초"},{"content":"useEffect #useEffect : 처음 시작 시 또는 state 변수 변경시마다 자동으로 호출되는 함수. (무조건 호출됨.)\n생성자와의 차이? 생성자와 useEffect useEffect import #import React, {useState, useEffect} from \u0026#34;react\u0026#34;; 예제 변수 및 이벤트함수 + 버튼 설정 #const [count, setCount] = useState(0); const [number, setNumber] = useState(0); const [message, setMessage] = useState(\u0026#39;useEffect\u0026#39;); const increCount= () =\u0026gt; { setCount(count + 1); } const increNumber= () =\u0026gt; { setNumber(number + 1); } const increCountNumber= () =\u0026gt; { setCount(count + 1); setNumber(number + 1); } \u0026lt;button type=\u0026#39;button\u0026#39; className=\u0026#39;btn btn-outline-secondary\u0026#39; onClick={increCount}\u0026gt; count만 증가 \u0026lt;/button\u0026gt; \u0026lt;button type=\u0026#39;button\u0026#39; className=\u0026#39;btn btn-outline-secondary\u0026#39; onClick={increNumber}\u0026gt; number만 증가 \u0026lt;/button\u0026gt; \u0026lt;button type=\u0026#39;button\u0026#39; className=\u0026#39;btn btn-outline-secondary\u0026#39; onClick={increCountNumber}\u0026gt; count, number 모두 증가 \u0026lt;/button\u0026gt; useEffect 사용 #useEffect(() =\u0026gt; { return () =\u0026gt; { console.log(\u0026#39;useEffect 호출됨!!\u0026#39;) }; }); 위 3개 버튼 중 어떤 것을 눌러도 위 useEffect가 호출됨\n특정 요소 변경시에만 호출되는 useEffect 설정 #//count 변경시에만 호출 useEffect(() =\u0026gt; { return () =\u0026gt; { console.log(\u0026#39;count 변경!\u0026#39;) }; },[count]); //number 변경시에만 호출 useEffect(() =\u0026gt; { return () =\u0026gt; { console.log(\u0026#39;number 변경!\u0026#39;) }; },[number]); count가 변경된 후 number가 변경되어야할 때 #const increCountNumber= () =\u0026gt; { setCount(count + 1); setNumber(number + 1); } 비동기 처리방식에서 위와 같은 코드는 순서 상 문제가 발생할 수 있으므로 아래와 같은 방법으로 대체할 수 있다.\nuseEffect(() =\u0026gt; { return () =\u0026gt; { setNumber(number + 1); }; },[count]); 3의 배수마다 이미지 보이기/안보이기 #이미지 import\nimport img01 from \u0026#39;../images/3.jpg\u0026#39; import img02 from \u0026#39;../images/25.jpg\u0026#39; 변수 선언\nconst [show, setShow] = useState(true); const [count, setCount] = useState(1); \u0026lt;button type=\u0026#39;button\u0026#39; className=\u0026#39;btn btn-outline-secondary\u0026#39; onClick={addCount}\u0026gt;숫자 증가\u0026lt;/button\u0026gt; \u0026lt;b style={{fontSize:\u0026#39;4em\u0026#39;, color:\u0026#39;tan\u0026#39;, marginLeft:\u0026#39;50px\u0026#39;}}\u0026gt;{count}\u0026lt;/b\u0026gt; { //show가 true 일때 보이는 이미지 show \u0026amp;\u0026amp; \u0026lt;img alt=\u0026#34;\u0026#34; src={img01} /\u0026gt; } { //show가 false 일때 보이는 이미지 !show \u0026amp;\u0026amp; \u0026lt;img alt=\u0026#34;\u0026#34; src={img02} /\u0026gt; } 버튼 클릭시 show 이벤트 처리 #문제가 발생하는 코드\nconst addCount= ()=\u0026gt; { setCount(Number(count + 1)) // 비동기처리에서는 아래 코드가 먼저 호출 될 수도 있다. setShow(count % 3 === 0 ? true:false); } 비동기화를 고려한 코드\nconst addCount= ()=\u0026gt; { setCount(Number(count + 1)) } useEffect(() =\u0026gt; { setShow(count % 3 === 0) // true:false 삼항 연산자 형태로 하지 않아도 됨. }, [count]); import 하지 않고 이미지 사용하기 #require 사용\n\u0026lt;img alt=\u0026#39;\u0026#39; src = {require(\u0026#39;../images/25.jpg\u0026#39;)} /\u0026gt; Map 반복문 #방법1 미리 함수를 만들어 호출 # const names =[\u0026#39;react\u0026#39;, \u0026#39;spring-boot\u0026#39;, \u0026#39;java\u0026#39;, \u0026#39;python\u0026#39;, \u0026#39;vue\u0026#39;]; const nameList = names.map((element, idx)=\u0026gt;( // 반드시 unique한 값으로 key값을 설정해야 콘솔에 오류가 나지 않는다. \u0026lt;li key = {idx}\u0026gt; {element} \u0026lt;/li\u0026gt;)) return( \u0026lt;div\u0026gt; {nameList} \u0026lt;/div\u0026gt; ) 결과\n방법2 return 문 안에서 반복해서 출력 #{ names.map((element, idx) =\u0026gt; \u0026lt;h6 key={idx}\u0026gt; {idx} : {element} \u0026lt;/h6\u0026gt;) } 결과\n이미지 반복 #{ [...new Array(10)] //0 ~ 9까지 배열 크기 할당 .map((photoNum, idx)=\u0026gt; \u0026lt;img alt=\u0026#34;\u0026#34; key={idx} src={require(`../images/${idx+1}.jpg`)} /\u0026gt;) } import된 이미지 배열 반복 #const myImage = [img1, img2, img3, img4] { myImage.map((img, idx)=\u0026gt;( \u0026lt;img alt=\u0026#34;\u0026#34; src = {img} width = \u0026#39;200px\u0026#39; /\u0026gt; )) } 객체 반복문 - div #const data = [ {\u0026#34;name\u0026#34; : \u0026#34;자몽\u0026#34;, \u0026#34;addr\u0026#34; : \u0026#34;서울\u0026#34;, \u0026#34;hp\u0026#34; : \u0026#34;010-1111-1111\u0026#34;, \u0026#34;photo\u0026#34;:\u0026#34;11\u0026#34;}, {\u0026#34;name\u0026#34; : \u0026#34;핕치\u0026#34;, \u0026#34;addr\u0026#34; : \u0026#34;광주\u0026#34;, \u0026#34;hp\u0026#34; : \u0026#34;010-2222-2222\u0026#34;, \u0026#34;photo\u0026#34;:\u0026#34;9\u0026#34;}, {\u0026#34;name\u0026#34; : \u0026#34;공룡\u0026#34;, \u0026#34;addr\u0026#34; : \u0026#34;부산\u0026#34;, \u0026#34;hp\u0026#34; : \u0026#34;010-3333-3333\u0026#34;, \u0026#34;photo\u0026#34;:\u0026#34;7\u0026#34;}, {\u0026#34;name\u0026#34; : \u0026#34;리아\u0026#34;, \u0026#34;addr\u0026#34; : \u0026#34;여수\u0026#34;, \u0026#34;hp\u0026#34; : \u0026#34;010-4444-4444\u0026#34;, \u0026#34;photo\u0026#34;:\u0026#34;5\u0026#34;} ] { data.map((element, idx) =\u0026gt; ( \u0026lt;div className=\u0026#39;box\u0026#39; key={idx}\u0026gt; \u0026lt;h5\u0026gt;이름 : {element.name}\u0026lt;/h5\u0026gt; \u0026lt;h5\u0026gt;주소 : {element.addr}\u0026lt;/h5\u0026gt; \u0026lt;h5\u0026gt;HP : {element.hp}\u0026lt;/h5\u0026gt; \u0026lt;img alt=\u0026#34;\u0026#34; src = {require(`../images/${element.photo}.jpg`)} width=\u0026#39;120px\u0026#39;/\u0026gt; \u0026lt;/div\u0026gt; )) } 객체 반복문 - table #테이블 작성시 반드시 \u0026lt;thead\u0026gt;, \u0026lt;tboby\u0026gt; 를 반드시 사용해야 인식한다.\n\u0026lt;table\u0026gt; \u0026lt;thead\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th\u0026gt;이름\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;주소\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;HP\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;Photo\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/thead\u0026gt; \u0026lt;tbody\u0026gt; {/*반복이 필요한 부분에 중괄호를 열고 선언한다. */} { data.map((element, idx) =\u0026gt; ( \u0026lt;tr key={idx}\u0026gt; \u0026lt;td\u0026gt;{element.name}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{element.addr}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{element.hp}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;img alt=\u0026#34;\u0026#34; src = {require(`../images/${element.photo}.jpg`)} width=\u0026#39;120px\u0026#39;/\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; )) } \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; 배열 추가 #useState 배열 방식 선언 #const [msgs, setMsg] = useState([\u0026#39;Happy\u0026#39;, \u0026#39;Hello\u0026#39;, \u0026#39;안녕하세요\u0026#39;]); 메세지 배열 출력 #{ msg.map((msgs, idx)=\u0026gt;( \u0026lt;h6 key={idx}\u0026gt; {idx + 1} : {msgs} \u0026lt;/h6\u0026gt; )) } 메세지 입력 후 값 받기 #배열에 추가할 때는 concat사용한다. (push 사용 불가)\n\u0026lt;input type=\u0026#39;text\u0026#39; className=\u0026#39;form-control\u0026#39; placeholder=\u0026#39;메세지입력\u0026#39; onKeyUp={(e)=\u0026gt;{ if(e.key === \u0026#39;Enter\u0026#39;) { setMsg(msgs.concat(e.target.value)) //concat을 활용하여 배열 추가 } }}/\u0026gt; 배열 삭제 #slice 또는 filter 사용\n1. slice #{ msgs.map((msg, idx)=\u0026gt;( \u0026lt;h6 key={idx} className=\u0026#39;select\u0026#39; onDoubleClick={(e)=\u0026gt; { //slice로 삭제 setMsgs([ //받드시 배열 `[]` 안에 값을 넣을 것! ...msgs.slice(0, idx), ...msgs.slice(idx + 1, msgs.length) ])}} \u0026gt; {idx + 1} : {msg} \u0026lt;/h6\u0026gt;)) } 2. filter # { msgs.map((msg, idx)=\u0026gt;( \u0026lt;h6 key={idx} className=\u0026#39;select\u0026#39; onDoubleClick={(e)=\u0026gt; { //filter setMsgs(msgs.filter((item, idx2) =\u0026gt; idx !== idx2)); }} \u0026gt; {idx + 1} : {msg} \u0026lt;/h6\u0026gt;)) } MUI 사용 #프로젝트 상위 react 폴더에 아래 명령어들 실행\n# Default installation \u0026gt; npm install @mui/material @emotion/react @emotion/styled # styled-components \u0026gt; npm install @mui/material @mui/styled-engine-sc styled-components # Icons \u0026gt; npm install @mui/icons-material ","date":"2024-01-15","permalink":"/devl/react/003/","section":"Developer Course","summary":"useEffect #useEffect : 처음 시작 시 또는 state 변수 변경시마다 자동으로 호출되는 함수.","title":"React #3 기초"},{"content":"오늘 사용할 프로젝트 생성 ##reactwork 폴더에서 명령어 실행 \u0026gt; npx create-react-app day0112react 폴더 생성 : src \u0026gt; images 메인앱 생성 : src \u0026gt; MainApp.js \u0026gt; rsf 컴포넌트 생성(5개) : src \u0026gt; component \u0026gt;\u0026lsquo;OneApp.js\u0026rsquo;, \u0026lsquo;TwoApp.js\u0026rsquo; ~ \u0026lsquo;FivaApp.js\u0026rsquo; 스타일 생성 : src \u0026gt; MyStyle.css index.js #\u0026lt;React.StrictMode\u0026gt; \u0026lt;MainApp /\u0026gt; //App → MainApp으로 수정 \u0026lt;/React.StrictMode\u0026gt; class 방식으로 컴포넌트 만들기 #초기 리액트 컴포넌트 구현 구조 #import React, {Component} from \u0026#34;react\u0026#34;; import \u0026#39;./MyStyle.css\u0026#39; class OneApp extends React.Component { render() { return ( \u0026lt;div\u0026gt; \u0026lt;h3 className=\u0026#34;alert alert-danger\u0026#34;\u0026gt;OneApp\u0026lt;/h3\u0026gt; \u0026lt;/div\u0026gt; ) } } export default OneApp; MainApp에서 OneApp 호출 #import React from \u0026#39;react\u0026#39;; import OneApp from \u0026#34;./OneApp\u0026#34;; //반드시 export 설정이 돼있어야 import 가능. function MainApp(props) { return ( \u0026lt;div\u0026gt; \u0026lt;OneApp /\u0026gt; \u0026lt;/div\u0026gt; ); } export default MainApp; export 방법들 #export 방법 1 # 현재 파일 내 컴포넌트가 여러개가 있을 수 있음 default는 export선언은 단 한번만 가능. import를 할 때 이름을 지정할 수 있음. //default export 선언 export default OneApp; export 방법 2 # 여러번 export 가능 ex) import시에 { OneApp }으로 고정 호출. 이름 변경 불가. export { OneApp } import { OneApp } from \u0026#34;./OneApp\u0026#34; 변수로 style 사용 # style 속성을 직접 지정할 경우 : 중괄호 2개 → {{스타일속성}} style={{backgroundColor:\u0026#39;pink\u0026#39;, border: \u0026#39;1px solid gray\u0026#39;}} style 객체를 사용할 경우 : 중괄호 1개 → {스타일변수명} const fontStyle = { color : \u0026#39;green\u0026#39;, fontWeight : \u0026#39;800\u0026#39; } return ( \u0026lt;div className=\u0026#34;box\u0026#34;\u0026gt; \u0026lt;h2 style={fontStyle}\u0026gt;{message}\u0026lt;/h2\u0026gt; \u0026lt;/div\u0026gt; ) //필요한 이미지 import import s10 from \u0026#39;../images/2.jpg\u0026#39; class OneApp extends React.Component { render() { //style 을 변수로 지정한 후 적용하는 방법 const imgStyle = { border : \u0026#39;2px solid gray\u0026#39;, width : \u0026#39;130px\u0026#39; } return ( \u0026lt;div\u0026gt; {/*변수명을 사용할 때는 중괄호 안에 변수이름을 바로 넣으면 된다.*/} \u0026lt;img alt=\u0026#34;\u0026#34; src ={s10} style={imgStyle}/\u0026gt; \u0026lt;/div\u0026gt; ) } } class에서 변경가능한 state 변수 선언 # js는 생성자 선언법이 모두 동일 선언 #//ES6에서 생성자 선언하는 방법 constructor() { super(); //필수 (생략불가) this.state = { number:0 } } 출력 #return ( \u0026lt;div\u0026gt; {this.state.number} \u0026lt;/div\u0026gt; ) 숫자 증가 버튼 만들기 #초창기 리액트 문법. 지금은 거의 사용되지 않는다고 함\u0026hellip;.\n\u0026lt;button type=\u0026#39;button\u0026#39; className=\u0026#34;btn btn-outline-danger\u0026#34; onClick={() =\u0026gt; { //number 값 1씩 증가 (setState를 활용) this.setState({ number: this.state.number + 1 }) }}\u0026gt;number 증가\u0026lt;/button\u0026gt; function에서 변경가능한 state 변수 선언 #import React, {useState} from \u0026#34;react\u0026#34;; const TwoApp=(props)=\u0026gt;{ //함수형에서 state 변수 선언하는 방법 const [number, setNumber] = useState(0); return ( \u0026lt;div className=\u0026#34;box\u0026#34;\u0026gt; \u0026lt;div style={{fontSize: \u0026#39;40px\u0026#39;, color :\u0026#39;tan\u0026#39;, marginLeft:\u0026#39;200px\u0026#39;}}\u0026gt; {/*state 변수 호출*/} {number} \u0026lt;/div\u0026gt; \u0026lt;div style={{marginLeft: \u0026#39;117px\u0026#39;}}\u0026gt; \u0026lt;button type = \u0026#39;button\u0026#39; className=\u0026#39;btn btn-outline-success\u0026#39; onClick={() =\u0026gt; { // Hook 문법 사용 setNumber(number - 1); }} \u0026gt;숫자 감소\u0026lt;/button\u0026gt; \u0026lt;button type = \u0026#39;button\u0026#39; className=\u0026#39;btn btn-outline-success\u0026#39; onClick={() =\u0026gt; { // Hook 문법 사용 setNumber(number + 1); }} \u0026gt;숫자 증가\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; ); } export { TwoApp }; if문 추가 #onClick={() =\u0026gt; { if(number === 0) { alert(\u0026#34;최소 숫자 도달\u0026#34;) } else { setNumber(number - 1); } }} ------ onClick={() =\u0026gt; { if(number === 10) { alert(\u0026#34;최대 숫자 도달\u0026#34;) return; } setNumber(number + 1); }} input 입력 시 state로 출력 변경 #변수 선언 #const [name, setName]=useState(\u0026#39;김나나\u0026#39;); const [spring, serSpring]=useState(80); const [react, setReact]=useState(77); 호출 #\u0026lt;input type = \u0026#39;text\u0026#39; className=\u0026#39;form-control\u0026#39; style={inputStyle} value={spring} onChange={(e)=\u0026gt;{ serSpring(Number(e.target.value)); }}/\u0026gt; 삼항연산자 사용 #등급 : {(spring+react)/2 \u0026gt;= 90 ? \u0026#34;장학생\u0026#34;:\u0026#34;노력\u0026#34;} 외부 이벤트 호출 #변수로 선언된 스타일 적용 #//선언 const [fname, setFname] = useState(\u0026#39;Noto Sans Kr\u0026#39;); const [fsize, setFsize] = useState(\u0026#39;20px\u0026#39;); const [fcolor, setFcolor] = useState(\u0026#39;tan\u0026#39;); //적용 (그대로 변수명 사용하면 됨) \u0026lt;div style={{fontFamily : fname, fontSize : fsize, color : fcolor}}\u0026gt; 오늘은 즐거운 금요일! \u0026lt;/div\u0026gt; ","date":"2024-01-11","permalink":"/devl/react/002/","section":"Developer Course","summary":"오늘 사용할 프로젝트 생성 ##reactwork 폴더에서 명령어 실행 \u0026gt; npx create-react-app day0112react 폴더 생성 : src \u0026gt; images 메인앱 생성 : src \u0026gt; MainApp.","title":"React #2 기초"},{"content":"코멘트 DTO 생성 #@Data @NoArgsConstructor @AllArgsConstructor @Builder @Entity @Table(name=\u0026#34;mycar_comment\u0026#34;) public class MyCarCommentDto { @Id @GeneratedValue(strategy = GenerationType.IDENTITY) //auto increment를 하기 위한 설정 private int idx; @ManyToOne //서브테이블에는 ManyToOne : 하나의 등록글에 여러개의 댓글을 달 수 있음. @JoinColumn(name=\u0026#34;num\u0026#34;) //외래키 설정 컬럼명 지정. private MyCarDto macar; //join 테이블 선언 private String comment; @JsonFormat(pattern = \u0026#34;yyyy-MM-dd HH:mm\u0026#34;, timezone = \u0026#34;Asia/Seoul\u0026#34;) @Column(updatable = false) //수정 시 업데이트 제외 @CreationTimestamp //엔터티가 생성되는 시점의 시간이 자동등록 == now() private Timestamp writeday; } @ManyToOne : 서브테이블에는 ManyToOne. 하나의 등록글에 여러개의 댓글을 달 수 있음 @OneToMany : 메인테이블에서는 OneToMany. 생성 결과 - 다이어그램 # join을 위한 코멘트 dao, controller #MyCarCommentDaoInter #public interface MyCarCommentDaoInter extends JpaRepository\u0026lt;MyCarCommentDto, Integer\u0026gt; { } MyCarCommentDao #@Repository @AllArgsConstructor public class MyCarCommentDao { private MyCarCommentDaoInter myCarCommentDaoInter; //저장 public void insertComment(MyCarCommentDto dto) { myCarCommentDaoInter.save(dto); } } MyCarCommentController #@RestController @RequiredArgsConstructor public class MyCarCommentController { private final MyCarCommentDao myCarCommentDao; @GetMapping(\u0026#34;/addcomment\u0026#34;) public void addComment(@RequestParam Long num, @RequestParam String comment) { MyCarDto mycarNum = MyCarDto.builder().num(num).build(); MyCarCommentDto commentDto = MyCarCommentDto.builder() .comment(comment) .macar(mycarNum) .build(); myCarCommentDao.insertComment(commentDto); } } 웹에 코멘트 만들기 #mycar-detail.html\n\u0026lt;div class = \u0026#34;input-group\u0026#34; style=\u0026#34;width: 400px\u0026#34;\u0026gt; \u0026lt;h4\u0026gt;댓글\u0026lt;/h4\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; class = \u0026#34;form-control\u0026#34; id = \u0026#34;comment\u0026#34; style=\u0026#34;margin-left: 10px; border: 1px solid gray;\u0026#34;\u0026gt; \u0026lt;button type=\u0026#34;button\u0026#34; class=\u0026#34;btn btn-success btn-sm\u0026#34; id=\u0026#34;btncommnet\u0026#34;\u0026gt;저장\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;hr\u0026gt; \u0026lt;div class = \u0026#34;commnet-list\u0026#34; style=\u0026#34;margin-left: 10px\u0026#34;\u0026gt; 코멘트 목록 \u0026lt;/div\u0026gt; 댓글 추가 #\u0026lt;script\u0026gt; $(\u0026#34;#btn-comment\u0026#34;).click(function (){ let num = [[${dto.num}]]; let comment = $(\u0026#34;#comment\u0026#34;).val(); $.ajax({ type:\u0026#34;get\u0026#34;, dataType:\u0026#34;text\u0026#34;, url:\u0026#34;./addcomment\u0026#34;, data:{\u0026#34;num\u0026#34;:num, \u0026#34;comment\u0026#34;:comment}, success:function (res){ $(\u0026#34;#comment\u0026#34;).val(\u0026#34;\u0026#34;).focus(); } }) ; }) \u0026lt;/script\u0026gt; 댓글 목록 출력 #MyCarCommentDaoInter #public interface MyCarCommentDaoInter extends JpaRepository\u0026lt;MyCarCommentDto, Integer\u0026gt; { //num에 해당하는 댓글 목록 출력하는 메서드를 직접 만들기 @Query(value = \u0026#34;SELECT * FROM mycar_comment WHERE num =:num ORDER BY idx DESC\u0026#34;, nativeQuery = true) public List\u0026lt;MyCarCommentDto\u0026gt; getMyCarCommentList(Long num); } MyCarCommentDao #public List\u0026lt;MyCarCommentDto\u0026gt; getMyCarCommentList(Long num) { return myCarCommentDaoInter.getMyCarCommentList(num); } MyCarCommentController #@GetMapping(\u0026#34;/comment-list\u0026#34;) public List\u0026lt;MyCarCommentDto\u0026gt; getCommentList(@RequestParam Long num) { return myCarCommentDao.getMyCarCommentList(num); } mycar-detail.html #$(function(){ comment_list(); }); function comment_list() { let num = [[${dto.num}]]; $.ajax({ type : \u0026#34;get\u0026#34;, dataType: \u0026#34;json\u0026#34;, url : \u0026#34;./comment-list\u0026#34;, data : {\u0026#34;num\u0026#34;: num}, success : function (res) { let s = `댓글 \u0026amp;nbsp; ${res.length}개`; $.each(res, function (idx, item) { s += ` \u0026lt;div style = \u0026#34;margin-left:20px;\u0026#34;\u0026gt; ${item.comment} \u0026lt;span style=\u0026#34;color: gray; font-size:0.9em;\u0026#34;\u0026gt;${item.writeday}\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; `; }); $(\u0026#34;.comment-list\u0026#34;).html(s); } }); } 등록하면 새로고침 되도록 comment_list() 호출하기\n$(\u0026#34;#btn-comment\u0026#34;).click(function (){ let num = [[${dto.num}]]; let comment = $(\u0026#34;#comment\u0026#34;).val(); $.ajax({ type:\u0026#34;get\u0026#34;, dataType:\u0026#34;text\u0026#34;, url:\u0026#34;./addcomment\u0026#34;, data:{\u0026#34;num\u0026#34;:num, \u0026#34;comment\u0026#34;:comment}, success:function (res){ comment_list(); // 추가 $(\u0026#34;#comment\u0026#34;).val(\u0026#34;\u0026#34;).focus(); } }) ; }) 리스트에 댓글 갯수 넣기 #MyCarController #@GetMapping(\u0026#34;/\u0026#34;) public String list(Model model,@RequestParam(value = \u0026#34;more\u0026#34;, defaultValue = \u0026#34;0\u0026#34;) int more) { .... //댓글 갯수 추가 List\u0026lt;MyCarDto\u0026gt; list = result.getContent(); for(MyCarDto dto:list){ int acount = myCarCommentDao.getMyCarCommentList(dto.getNum()).size(); dto.setCommentcount(acount); } .... return \u0026#34;mycar/mycar-list\u0026#34;; } mycar-list.html #\u0026lt;a th:href=\u0026#34;@{/detail(num=${dto.num})}\u0026#34; style=\u0026#34;color: black; cursor: pointer;text-decoration-line:none\u0026#34;\u0026gt; [[${dto.carname}]] \u0026lt;!--댓글 출력 추가--\u0026gt; \u0026lt;span style=\u0026#34;margin-left: 10px; color: lightseagreen\u0026#34; th:if = \u0026#34;${dto.commentcount\u0026gt;0}\u0026#34;\u0026gt; ([[${dto.commentcount}]]) \u0026lt;/span\u0026gt; \u0026lt;/a\u0026gt; ","date":"2024-01-10","permalink":"/devl/springboot/003/","section":"Developer Course","summary":"코멘트 DTO 생성 #@Data @NoArgsConstructor @AllArgsConstructor @Builder @Entity @Table(name=\u0026#34;mycar_comment\u0026#34;) public class MyCarCommentDto { @Id @GeneratedValue(strategy = GenerationType.","title":"JPA #2"},{"content":"node : javascript 를 이용해서 서버를 만들 수 있음.\n장점 : 빠르다. node 기본 문법 #함수 호출 #//함수 설정1 function hello1() { console.log(\u0026#34;hello1 호출 - 기본 함수\u0026#34;); } //함수 설정2 let hello2 = () =\u0026gt; console.log(\u0026#34;hello2 호출 - 화살표 함수\u0026#34;); //함수 호출 hello1(); hello2(); //결과 hello1 호출 - 기본 함수 hello2 호출 - 화살표 함수 터미널에서 파일을 직접 실행시켜서 결과 확인하기\n\u0026gt; node ex1.js 연산 #//설정 1 function sum1(x, y) { return x + y; } //설정2 let sum2 = (x, y) =\u0026gt; x + y; console.log(sum1(10, 20)); console.log(sum2(10, 20)); //결과 30 30 펼침연산자 #let arr1 = [3,4,5]; let arr2 = [6,7,8]; //arr3에 arr1, arr2를 모두 넣고 싶을 경우 let arr3 = [...arr1, ...arr2, 30, 40]; //갯수 출력 console.log(\u0026#34;arr3=\u0026#34; + arr3.length); console.log(arr3); //console 출력 결과 arr3=8 [3, 4, 5, 6, 7, 8, 30, 40] 펼침연산자 연산 #let sum1 = (a, b, c)=\u0026gt; a + b + c; console.log(sum1(3, 5, 7)); // 결과 : 15 console.log(sum1(...arr2, 5, 7)); // 결과 : 21 (arr2의 배열을 펼친 상태에서 앞에서 3개만 합을 구하고 나머지는 버려짐) console.log(sum1(...arr3)); // 결과 : 12 (배열 앞에서 3개만 읽고 합을 구하고 나머지는 버려짐) 객체 사용 #let obj1 = { \u0026#34;name\u0026#34; : \u0026#34;lee\u0026#34;, \u0026#34;addr\u0026#34; : \u0026#34;seoul\u0026#34;, \u0026#34;age\u0026#34; : 20 } //출력 console.log(obj1.name); console.log(obj1.addr); console.log(obj1.age); //결과 lee seoul 20 //ES6의 방식으로 이름과 주소를 얻어서 출력하고자 할 경우 let {name, age}=obj1; //{}안의 변수명은 반드시 객체의 키값과 동일해야 함. console.log(name); console.log(age); //결과 lee 20 //함수형으로 만들기. 필요한 것만 변수로 받아서 사용. let f1 = ({name, addr}) =\u0026gt; { console.log(\u0026#34;이름 : \u0026#34; + name); console.log(\u0026#34;주소 : \u0026#34; + addr); } //호출 f1(obj1); //결과 이름 : lee 주소 : seoul map 반복문 #(리액트는 for문을 사용할 수 없음.)\nlet array = [\u0026#39;red\u0026#39;, \u0026#39;green\u0026#39;, \u0026#39;blue\u0026#39;, \u0026#39;pink\u0026#39;, \u0026#39;orange\u0026#39;, \u0026#39;gray\u0026#39;]; array.map((color, idx) =\u0026gt; console.log(idx + \u0026#34;:\u0026#34; + color)); //출력 결과 0:red 1:green 2:blue 3:pink 4:orange 5:gray 배열의 데이터 잘라내기, 걸러내기 #배열 중 일부 항목만을 추출할 때 : slice, filter 사용\n//slice array=[ ...array.slice(0, 2), /*0~1번을 잘라내기 : red, green*/ ...array.slice(3, array.length) /* 3부터 length-1까지 잘라내기*/ ]; array.map((color, idx) =\u0026gt; console.log(idx + \u0026#34;:\u0026#34; + color)); //결과 0:red 1:green 2:pink 3:orange 4:gray //filter let array2 = array.filter((color, idx)=\u0026gt; idx !== 2); array2.map((color, idx)=\u0026gt; console.log(idx + \u0026#34;:\u0026#34; + color)) //결과 0:red 1:green 2:pink 3:orange 4:gray node 패키지 # yarn 참조 사이트 기초 세팅 ##yarn 설치 \u0026gt; npm install --global yarn changed 1 package in 762ms #yarn 버전확인 \u0026gt; yarn -v 1.22.2 npm install -g create-react-app #또는 yarn global add create-react-app 프로젝트 생성 및 실행 ## 프로젝트 폴더로 이동 후에 아래 명령어 실행 (전역 명령어가 아님) # 배포가 목적일 경우 반드시 \u0026#39;npx\u0026#39;를 포함해서 명령을 실행시켜야함 \u0026gt; npx create-react-app 프로젝트이름 \u0026gt; cd 프로젝트이름경로 \u0026gt; yarn run start React # React 는 UI 컴포넌트 라이브러리\n장점\n단순한 앱개발 : React 는 순수 자바스크립트로 만든 컴포넌트 기반 아키텍쳐이다 빠른 UI : 가상 DOM 제공 코드량 감소 : React 커뮤니티와 개발 생태계를 통해 수많은 라이브러리와 컴포넌트를 접할수 있다 단점\n리액트는 단방향 데이타 바인딩만 제공한다 리액트는 모든 기능을 갖춘 프레임워크는 아니다. 여러 라이브러리를 같이 사용해야만 한다 구조 # node_modules : 각종 모듈들. 자동으로 push되지 않도록 git ignore에 등록된다.\npackage.json : 필요한 라이브러리가 정의된 파일\npublic \u0026gt; index.html : 시작 파일\nnode_modules 재설치 #모듈로 인해 오류를 해결하기 어려울 때 사용.\n# 프로젝트 경로 내에서 # 삭제 \u0026gt; rm -rf package-lock.json \u0026gt; rm -rf node_modules # 재설치 \u0026gt; npm install 컴포넌트 사용 방법 #// 1. import (.js 확장자 는 생략) import App from \u0026#39;./App\u0026#39;; // ↑ 원본파일이 function이면 자유롭게 이름 설정 가능, class의 구조의 경우 그대로 이름 사용할 것. // 2. 호출 \u0026lt;React.StrictMode\u0026gt; \u0026lt;App /\u0026gt; \u0026lt;/React.StrictMode\u0026gt; function App() { //리턴 시 부모 태그는 무조건 1개여야한다. return ( \u0026lt;div className=\u0026#34;App\u0026#34;\u0026gt; \u0026lt;header className=\u0026#34;App-header\u0026#34;\u0026gt; \u0026lt;img src={logo} className=\u0026#34;App-logo\u0026#34; alt=\u0026#34;logo\u0026#34; /\u0026gt; \u0026lt;p\u0026gt; Edit \u0026lt;code\u0026gt;src/App.js\u0026lt;/code\u0026gt; and save to reload. \u0026lt;/p\u0026gt; \u0026lt;a className=\u0026#34;App-link\u0026#34; href=\u0026#34;https://reactjs.org\u0026#34; target=\u0026#34;_blank\u0026#34; rel=\u0026#34;noopener noreferrer\u0026#34; \u0026gt; Learn React \u0026lt;/a\u0026gt; \u0026lt;/header\u0026gt; \u0026lt;/div\u0026gt; ); } export default App; 컴포넌트 만들기 #import React from \u0026#34;react\u0026#34;; let FirstComponent=()=\u0026gt;{ return( \u0026lt;div\u0026gt; \u0026lt;h3\u0026gt;First Component 컴포넌트\u0026lt;/h3\u0026gt; \u0026lt;/div\u0026gt; ) } export default FirstComponent; 컴포넌트 사용 #index.js 에서\n//import 추가 import First from \u0026#39;./FirstComponent\u0026#39;; ... root.render( \u0026lt;React.StrictMode\u0026gt; \u0026lt;First/\u0026gt; //변경해보기 \u0026lt;/React.StrictMode\u0026gt; ); react snippet 플러그인 설치 #//rsf : function + div //rsf 실행시 function SecondApp(props) { return ( \u0026lt;div\u0026gt;\u0026lt;/div\u0026gt; ); } export default SecondApp; input msg 넣기 #function SecondApp(props) { let msg = \u0026#34;Happy Day!!!\u0026#34;; //단순 출력만 가능, 변경은 불가능. (단방향 바인딩 특징.) // 변경 가능한 변수 선언 // ↓ 변수명 ↓ setter 함수명 const [msg2,setMsg]=useState(\u0026#39;NiceDay!!\u0026#39;) return ( \u0026lt;div className=\u0026#39;box2\u0026#39;\u0026gt; \u0026lt;h5 className=\u0026#39;alert alert-info\u0026#39;\u0026gt; SecondApp 컴포넌트 \u0026lt;/h5\u0026gt; \u0026lt;h6\u0026gt;메세지를 입력하세요\u0026lt;/h6\u0026gt; \u0026lt;input type=\u0026#39;text\u0026#39; className=\u0026#39;form-control\u0026#39; value={msg2} onChange={(e)=\u0026gt;{ //setter 함수를 통해서 입력값을 msg에 넣는다. setMsg(e.target.value); //msg 변수의 값이 변경된다. }}/\u0026gt; \u0026lt;h1\u0026gt;{msg2}\u0026lt;/h1\u0026gt; \u0026lt;/div\u0026gt; ); } export default SecondApp; ","date":"2024-01-10","permalink":"/devl/react/001/","section":"Developer Course","summary":"node : javascript 를 이용해서 서버를 만들 수 있음.","title":"React #1 기초(+ node 기초 문법)"},{"content":"외부 인증키 설정 #인증키는 노출이 되면 안되므로 properties파일에 모아 작성 후\nncp.accessKey=8WkR3bZnWbDIyydbmk8t ncp.secretKey=9xw3qYYmxXHWiHMprko5tCZKaFs0AcgdMXJQFifA ncp.regionName=kr-standard ncp.endPoint=https://kr.object.ncloudstorage.com @Getter @ConfigurationProperties(prefix=\u0026#34;ncp\u0026#34;) // 2. \u0026#39;ncp\u0026#39;로 시작하는 값들만 불러오게 함. @PropertySource(\u0026#34;classpath:/naver.properties\u0026#34;) // 1. properties 파일 경로 지정 @Configuration public class NaverConfig { private String endPoint; private String regionName; private String accessKey; private String secretKey; } thymeleaf Object로 전달 #\u0026lt;!-- 기존 --\u0026gt; [[${dto.sangpum}]] JPA #프로젝트 생성 #의존성 추가\n패키지 구조 # main 에 어노테이션 추가 #@SpringBootApplication @ComponentScan({\u0026#34;mycar.*\u0026#34;, \u0026#34;naver.storage\u0026#34;}) @EntityScan(\u0026#34;mycar.data\u0026#34;) @EnableJpaRepositories(\u0026#34;mycar.repository\u0026#34;) public class MyCarJpaBootApplication { public static void main(String[] args) { SpringApplication.run(MyCarJpaBootApplication.class, args); } } application.yml 에 세팅 ##Mysql/JPA Setting spring: dataSource: driver-class-name: com.mysql.cj.jdbc.Driver url: jdbc:mysql://db-jbnp5-kr.vpc-pub-cdb.ntruss.com:3306/studydb?serverTimezone=Asia/Seoul username: study password: bitcamp123!@# jpa: hibernate: ddl-auto: update #update: 변경된 부분만 반영, create: 기존 테이블을 삭제 후 생성. generate-ddl: true #ddl 생성시 DB 고유의 기능을 사용할 것인가 show-sql: true #api 호출시 실행되는 sql문을 콘솔에 나타내도록 설정 database-platform: org.hibernate.dialect.MySQL57Dialect ddl-auto : create의 경우 DB 데이터를 모두 삭제 후 생성하기 때문에 유의할 것. JPA CRUD #JPA에는 기본 CRUD 기능을 지원함. 복잡한 쿼리의 경우 직접 작성\ndto 생성 #@Entity @Table(name = \u0026#34;mycar\u0026#34;) @Data @Builder @NoArgsConstructor @AllArgsConstructor public class MyCarDto { @Id //각 엔터티를 구별할 수 있는 식별자 @GeneratedValue(strategy = GenerationType.IDENTITY) //자동으로 auto increment를 하기 위한 설정 private Long num; @Column(name=\u0026#34;carname\u0026#34;, length = 30) //변수명과 동일할 경우 name 생략 가능 private String carname; private int carprice; @Column(length = 20) private String carcolor; @Column(length = 30) private String carguip; @Column(length = 100) private String carphoto; @Column(updatable = false) //해당 컬럼은 수정시에 제외시킴 @CreationTimestamp private Timestamp writeday; @Transient // 테이블의 컬럼으로는 생성되지 않고, 객체에섬난 사용가능한 멤버 변수 private int commnetcount; @Transient private String message; } interface 생성 #public interface MyCarDaoInter extends JpaRepository\u0026lt;MyCarDto, Long\u0026gt; { // } MyCarDao #@Repository @AllArgsConstructor public class MyCarDao { //JpaRepository를 상속받을경우 기본적인 SQL을 실행해주는 각종 메서드 호출 가능 MyCarDaoInter daoInter; //SELECT public Long getTotalCount() { return daoInter.count(); } //INSERT public void insert(MyCarDto dto) { //save : @Id 식별자가 form 안에 없으면 insert 실행, 있으면 update를 수행한다. daoInter.save(dto); } //UPDATE public void update(MyCarDto dto) { daoInter.save(dto); } } Pagable (JPA 지원) #","date":"2024-01-09","permalink":"/devl/springboot/002/","section":"Developer Course","summary":"외부 인증키 설정 #인증키는 노출이 되면 안되므로 properties파일에 모아 작성 후","title":"JPA #1"},{"content":"데이터의 경로가 다를 경우 # 위와 같이 java와 data의 경로가 다를 경우 앱 실행 시 data를 인식 못함.\nmain 실행 파일 위에 @ComoponentScan 어노테이션 추가\n@ComponentScan({\u0026#34;data.*\u0026#34;}) @SpringBootApplication public class ThymeleafTestApplication { public static void main(String[] args) { SpringApplication.run(ThymeleafTestApplication.class, args); } } thymeleaf #url 이동 #\u0026lt;a th:href = \u0026#34;@{/hello}\u0026#34;\u0026gt; hello.html \u0026lt;/a\u0026gt; 날짜 포맷 #\u0026lt;span th:text = \u0026#34;${#calendars.format(#calendars.createNow(),\u0026#39;yyyy-MM-dd HH:mm\u0026#39;)}\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; dto 출력 #@GetMapping(\u0026#34;/hello\u0026#34;) public String hello(Model model) { ShopDto dto = ShopDto.builder() .name(\u0026#34;체크남방\u0026#34;) .color(\u0026#34;orange\u0026#34;) .ea(5) .price(23000) .build(); model.addAttribute(\u0026#34;dto\u0026#34;, dto); return \u0026#34;hello\u0026#34;; } 위 DTO를 thymeleaf에서 출력하기\n\u0026lt;!-- dto 그대로 출력 --\u0026gt; [[${dto}]] \u0026lt;!-- dto 요소 출력(1) --\u0026gt; [[${dto.name}]] \u0026lt;!-- dto 요소 출력(2) --\u0026gt; \u0026lt;span th:text = \u0026#34;${dto.name}\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; list 출력 #@GetMapping(\u0026#34;/list\u0026#34;) public String list(Model model) { List\u0026lt;ShopDto\u0026gt; list = new ArrayList\u0026lt;\u0026gt;(); list.add(new ShopDto(\u0026#34;그레이 후드\u0026#34;, \u0026#34;gray\u0026#34;, 5, 54000)); list.add(new ShopDto(\u0026#34;블랙 슬랙스\u0026#34;, \u0026#34;black\u0026#34;, 4, 43000)); list.add(new ShopDto(\u0026#34;모노톤 리무버블 스티커\u0026#34;, \u0026#34;black\u0026#34;, 3, 32000)); list.add(new ShopDto(\u0026#34;2024 다이어리\u0026#34;, \u0026#34;green\u0026#34;, 2, 21000)); list.add(new ShopDto(\u0026#34;플랫 슈즈\u0026#34;, \u0026#34;white\u0026#34;, 1, 19000)); model.addAttribute(\u0026#34;list\u0026#34;,list); return \u0026#34;list\u0026#34;; } } \u0026lt;table style=\u0026#34;width: 800px;\u0026#34; class=\u0026#34;table table-bordered\u0026#34;\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th\u0026gt;일련 번호\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;카운트 번호\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;상품명\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;색상\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;수량\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;금액\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;!-- 리스트 요소 출력 --\u0026gt; \u0026lt;!-- 일련번호 출력 안 할 경우 \u0026#39;iter\u0026#39; 생략 가능 --\u0026gt; \u0026lt;tr th:each = \u0026#34;dto, iter:${list}\u0026#34;\u0026gt; \u0026lt;td\u0026gt;[[${iter.index}]]\u0026lt;/td\u0026gt; \u0026lt;!-- 일련번호 출력 --\u0026gt; \u0026lt;td\u0026gt;[[${iter.count}]]\u0026lt;/td\u0026gt; \u0026lt;!-- 카운트 출력 --\u0026gt; \u0026lt;td\u0026gt;[[${dto.name}]]\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;[[${dto.color}]]\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;[[${dto.ea}]]\u0026lt;/td\u0026gt; \u0026lt;!-- 금액은 \u0026#39;,\u0026#39; 컴마 포맷 설정 후 출력 --\u0026gt; \u0026lt;td\u0026gt;[[${#numbers.formatInteger(dto.price,0,\u0026#39;COMMA\u0026#39;)}]]\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/table\u0026gt; Mybatis 연동 #새프로젝트 생성 # application.properties 설정 ##Mysql Setting spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver spring.datasource.url=jdbc:mysql://db-jbnp5-kr.vpc-pub-cdb.ntruss.com:3306/studydb?serverTimezone=Asia/Seoul spring.datasource.username db_username spring.datasource.password=db_password #Mybatis Setting mybatis.type-aliases-package=myshop.data mybatis.mapper-locations=/mapper/**/*.xml mapper 인터페이스 생성 #DAO 대신 사용.\n@Mapper 어노테이션 사용\nmapper.xml에서 sql문을 작성해도 되지만 mapper 인터페이스 내에 아래처럼 @Select 어노테이션으로 선언하는 방법도 가능하다.\n@Mapper public interface MyshopMapper { @Select(\u0026#34;SELECT COUNT(*) FROM myshop\u0026#34;) public int getTotalCount(); } 어플리케이션에 mapper 등록 #이 작업을 별도로 해야한 mapper를 인식한다.\n//어노테이션 MapperScan 추가 @MapperScan(\u0026#34;myshop.mapper\u0026#34;) @ComponentScan({\u0026#34;myshop.*\u0026#34;,\u0026#34;naver.storage\u0026#34;}) @SpringBootApplication service에서 mapper 호출 #@Service @AllArgsConstructor public class MyShopService { private final MyshopMapper myshopMapper; public int getTotalCount() { return myshopMapper.getTotalCount(); } } controller에서 service 호출 #@Controller @RequiredArgsConstructor //final 또는 NonNull 선언된 항목만 주입됨. public class MyshopController { private final MyShopService shopService; /** * 총 갯수 구하기 */ @GetMapping(\u0026#34;/\u0026#34;) public String list(Model model) { int totalCount = shopService.getTotalCount(); model.addAttribute(\u0026#34;totalCount\u0026#34;, totalCount); return \u0026#34;myshop/shop-list\u0026#34;; } } thymeleaf로 불러오기 #\u0026lt;body\u0026gt; \u0026lt;h2\u0026gt;\u0026lt;b\u0026gt;총 [[${totalCount}]]개의 상품이 있습니다.\u0026lt;/b\u0026gt;\u0026lt;/h2\u0026gt; \u0026lt;/body\u0026gt; 결과 출력 # ","date":"2024-01-08","permalink":"/devl/springboot/001/","section":"Developer Course","summary":"데이터의 경로가 다를 경우 # 위와 같이 java와 data의 경로가 다를 경우 앱 실행 시 data를 인식 못함.","title":"Thymeleaf + Mybatis 설정"},{"content":"","date":null,"permalink":"/categories/ncp/","section":"Categories","summary":"","title":"Ncp"},{"content":"","date":null,"permalink":"/devl/ncp/","section":"Developer Course","summary":"","title":"Ncp"},{"content":"WMS #서비스 등록 # [이용신청] \u0026gt; [서비스 등록]\nURL 정보 : http:// + 로드밸런서 접속 정보\n[테스트 하기]\n오류 발생 시\n현재 java 스크립트 중 필터처리가 되지 않은 부분이 있어 오류 발생\n위 오류 로그 우측에 [추가] 후 다시 테스트를 하면 정상으로 나옴.\n[다음]\n모니터링 세부 설정 # 기타 모니터링 # 유료서비스. 디폴트는 아님.\nCloud Insight 모니터링 #Service에서 \u0026gt; 서버 선택(다중 선택 가능) \u0026gt; [서버관리 및 설정변경] \u0026gt; [상세모니터링 설정 변경]\n(일괄 변경가능)\n네트워크 모니터링 #서브 트래픽을 모니터링 할 수 있는 서비스.\nService에서 \u0026gt; 서버 하나 선택 \u0026gt; [서버관리 및 설정변경] \u0026gt; [Network 모니터링 설정]\n(일괄변경 불가, 단일 신청)\n모니터링 확인은 아래 서비스에서 가능.\n그 외 도구 # 네이버 클라우드에서 제공하는 서비스가 아님. 별도의 애플리케이션\nResource Manager #클라우드에서 현재 사용 중이 서비스를 확인\n사용자가 할 수 있는 설정은 없으나 검색 결과를 잘 도출해 낼 수 있도록 학습 필요.\nCloud Insight #모니터링 + 임계치 설정 및 액션 혼합 서비스\n현재 무료인 이유는 모든 상품이 다 들어오지않음. 모든 상품이 다 들어오면 유료서비스 전환 예정.\n1단계 : 대상 선정 2단계 : 대상 내 항목 선정 (예, cpu, memory, rebooting) 3단계 : 항목에 대한 임계치 설정 (예, cpu 사용률 \u0026gt; 50) 4단계 : 임계치 돌파 시 해야하는 액션 설정 Planned Maintenance # Cloud Insight 특성 상 무수히 많은 알림이 오게끔 설정돼있음 → 중요한 문자 놓칠 가능성 높음\nPlanned Maintenance에서 이러한 알림을 세부적으로 변경 가능.\nSub Account # [서브계정] \u0026gt; [+서브계정생성]\n서브계정 생성 # 위와 같이 서브 계정을 2~3개 더 만들어준다.\n그룹 생성 #Sub Account \u0026gt; Groups \u0026gt; [+그룹 생성]\n서브운영팀 설정 # 서브계정 \u0026gt; 추가 정책 \u0026gt; 개별권한 추가 네트웍운영팀 설정 # 서브계정 \u0026gt; 추가 정책 \u0026gt; 개별권한 추가 서브계정 로그인 # Service로 보면 권한 부여된 서비스만 확인 가능.\n아무 서버 선택 후 \u0026gt; 중지\n마스터 계정 \u0026gt; Cloud Activity Tracer 로그 확인해보기\nNotification Recipient #마스터 계정 \u0026gt; Cloud Insight \u0026gt; Notification Recipientm \u0026gt; 대상자 추가\n할당하기\n알림 설정 #Configuration \u0026gt; Event Rule\nCloud Log Analytics # 버킷 생성 #로그를 담을 버킷을 별도로 생성한다.\nService \u0026gt; Object Storage \u0026gt; Bucket Management\n자동 내보내기 설정 #Cloud Log Analytics \u0026gt; Export Log\n어느정도 로그가 차면 자동으로 해당 버킷으로 옮겨짐\n# 위 디스크를 다른 서버에 붙일 예정\n스냅샷 생성 #Server \u0026gt; Storage\nweb002의 기본 스토리지 선택 \u0026gt; 스토리지 설정 \u0026gt; 스냅샷 생성\n스냅샷 스토리지 생성 #Server \u0026gt; Snapshot\nweb002-snap 선택 \u0026gt; 스토리지 생성\n서버 선택은 web001 (덮어쓰기 x , 기존내용에 추가로 붙임)\n스냅샷 서버 생성 확인 # ","date":"2024-01-03","permalink":"/devl/ncp/005/","section":"Developer Course","summary":"WMS #서비스 등록 # [이용신청] \u0026gt; [서비스 등록]","title":"ncp 교육 - Day05"},{"content":"개념 #Cloud Insight # 위젯 설정으로 나만의 모니터링 화면을 커스텀 가능 Sub Account #(혼자 쓸 경우 master계정 사용해도 됨.)\n외국 클라우드 서비스에서는 (리눅스 등) root나 UAC권한을 주지 않음.\n협업시에는 권한과 책임에 맞게 계정을 부여 → Sub Account 이용\n2차 인증 가능\n서비스를 만들 때 중요한 사항 # 백업\n보안\nACG에서는 Service 포트만 열어야 함 Server에 접속할 때는 SSL-VPN을 이용해서 접속 Server에는 root 접근을 차단 → user add로 일반계성 생성 후 이용 방화벽 설정보다 더 중요.\nCloud Activity Tracer # 계정 활동 로그 수집 Sub Account가 생성돼 있어야 이용 가능한 서비스. Web service Monitoring System (191p) # 키워드 기억하기 : 스케쥴, 시나리오기반\n시나리오?\n테스트를 보는 것으로 그치지 않고 클릭 등 액티브한 테스트를 모아서 등록 후 그 결과를 확인하는 것. Cloud Advisor # 클라우드를 잘 활용하고 있는지 진단. 주로 보안과 관련된 기능이 많음 Cloud Log Analytics # 용량이 100GB 제한. 용량 초과 시 30% 정도의 데이터가 삭제됨. 보관 기간 1달. 기간 초과시 삭제됨 Cloud Hadoop # 분산 구조\n비정형 데이터 분석\n작업자 노드 - 프라이빗\n마스터, 엣지 노드 - 퍼블릭\nCloud Data Forest # 데이터를 밀어넣고 내가 사용한 시간만큼만 비용 지불 Cloud Data Box (200p) # 클라우드 하둡처럼 나만의 하둡 시스템. 네이버의 데이터가 미리 들어가있음 네이버 데이터에 포함된 3가지 # 검색어 분석 고객맞춤서비스 (ex 쇼핑) AI 분석 네이버 Data Lab # Cloud Data Streaming Service #(동영상 전송 서비스 아님)\n매니저 노드 1대 Broker 노트 최소 3대 클러스터 관리는 CMAK (카프카)\nFile Safer # 카페나 블로그에 바이러스 파일 올리면 막음. 방어의 개념 Web Securiry Checker # 진단의 개념 (File Safer와 다름) Certificate Manager (228p) #요즘은 웹서비스 및 모바일 서비스 모두 인증서를 발급해야 함. (애플의 경우 ssh 통신을 안하면 앱등록을 거절)\n인증서를 서버에 굳이 넣을 필요없음 → 상단 애플리케이션 로드밸런서에 인증서를 넣으면 되기 때문.\n오토스케일링의 경우 인증서를 넣어주는 작업이 만만치 않음.\nLive Station(233p) # 640 × 480 : SD 1280 × 720 : HD 1920 × 1080 : FUll HD (=1080P) 4096 × 2160 * : 4K 7680 × 4320 : 8k → 프레임이 높으면 네트웍을 많이 씀\nex) 넷플릭스를 4k로 보려면?\nTV가 4k일 것 넷플릭스 4K 요금제 가입 설치된 인터넷 속도가 40Mbps가 충족해야 함 HLS Adaptive Bitrate : 네크워크 상태가 나쁠 때 영상이 끊기지 않게 해상도를 낮추는 기능.\n실습 #모니터링 #상품마다 모니터링 서비스를 지원함.\nCloud Insight # 템플릿 생성하기\n결과 # Cloud Log Analytics # 에이전트 설치 전 사전 설정 # [수집설정] 클릭\nServer 에서 web001의 공인IP를 확인한다.\ncmd에서 공인IP로 접속.\n\u0026gt;ssh root@223.130.141.167 Are you sure you want to continue connecting (yes/no/[fingerprint])? yes # 패스워드 입력 root@223.130.141.167\u0026#39;s password: 패스워드 확인하는 방법\nServer - 서버 선택 - 서버 관리 및 설정 변경 - 관리자 비밀번호 확인\n로그 수집 agent 설치 # Cloud Log Analytics \u0026gt; Management 에서 설치할 서버 선택 후 \u0026gt; 수집 설정 \u0026gt; 확인 하면 아래 창이 나옴. (이미 수집 설정 완료한 후의 경우 다시 열어서 설정 저장하면 아래 안내창 나옴)\n위 클립보드 복사해서 리눅스에 입력\n\u0026gt; curl -s http://cm.vcla.ncloud.com/setUpClaVPC/36a291500038445598ea6da77a857f55 | sudo sh ==================== Start Installation ==================== 1. Check the Configuration for Installation Configuration Success 2. Connection Success for Installation http_status_code: 200 3. Remove Agent 4. Download the Agent for Installation Download Success 5. Install and config the Agent Installation Success Created symlink from /etc/systemd/system/multi-user.target.wants/filebeat.service to /usr/lib/systemd/system/filebeat.service. Configuration Success 6. Run the Agent ==================== Finish Installation ==================== # 이제부터 로그가 쌓임 # exit 후 패스워드를 틀리게 입력해보자. 로그 결과 확인 # Cloud Log Analytics \u0026gt; Dashboard Cloud Log Analytics \u0026gt; Search 패스워드 에러에 관한 로그가 나오는 것을 확인할 수 있다.\n","date":"2023-12-29","permalink":"/devl/ncp/003/","section":"Developer Course","summary":"개념 #Cloud Insight # 위젯 설정으로 나만의 모니터링 화면을 커스텀 가능 Sub Account #(혼자 쓸 경우 master계정 사용해도 됨.","title":"ncp 교육 - Day03"},{"content":"개념 #Load balancer (84p) #인증서를 발급받으려면 도메인이 필요. (SSL 인증서)\n어플리케이션 로드밸런서 # 웹에 특화됨. HTTP, HTTPS 에 대한 프로토콜만 지원 DSR # ⭕ - lb 를 거치지 않음 ❌ - lb 를 거쳐야 함 Global DNS (88p) #DNS # IP로 요청하면 URL 반환\nURL로 요청하면 IP 반환\nDNS 관련 알아둘 명령어 두가지\n#1 \u0026gt; nslookup www.naver.com #2 \u0026gt; nslookup 기본 서버: kns.kornet.net Address: 168.126.63.1 \u0026gt; set type=mx \u0026gt; daum.net 서버: kns.kornet.net Address: 168.126.63.1 권한 없는 응답: daum.net MX preference = 10, mail exchanger = mx2.hanmail.net daum.net MX preference = 10, mail exchanger = mx1.hanmail.net daum.net MX preference = 10, mail exchanger = mx4.hanmail.net daum.net MX preference = 10, mail exchanger = mx3.hanmail.net mx1.hanmail.net internet address = 211.249.219.37 mx3.hanmail.net internet address = 211.249.219.43 mx4.hanmail.net internet address = 211.231.108.47 DNS 확인 \u0026gt; ipconfig/all TCP와 UDP를 같이 사용\nCNAME # IP가 변했을 때 올바른 곳으로 알려주는 것 MX (=메일 익스체인지) #글로벌 트래픽 매니저 (91p) # 나라마다 있는 DNS에 서로 다른 정보를 넣어주는 것\nGSLB :여러군데 퍼져있는 서버들을 dns에서 로드밸런스를 통해 헬스체크를 함\nCDN # CDN은 캐쉬 리소스 경로를 자세히 보면 daumcdn 에서 가져오는 것을 볼 수 있음\n관련 용어\nCDN의 동작 원리\n특정 리소스를 CDN에 요청. 있다면 여기서 리소스 반환. 만약 CDN에 없으면 \u0026rsquo;less\u0026rsquo;가 발생함. 오리진으로 접근해서 CDN으로 가지고옴. CDN에서 리소스를 응답 캐시 익스파이어리 기간 만큼 데이터 유지 퍼지 # CND의 데이터를 삭제해서 오리진에서 업데이트를 받도록 강제하는 것. 외부에서 내 리소스를 가져갈 수 없도록 막는 장치 # 시큐어 토큰 리퍼러 도메인 : 특정 도메인에 접근해야만 리소스를 이용할 수 있도록. 시큐어토큰, 리퍼러 도메인 예시 #네이버 블로그 영상\n페이지를 호출 후 영상을 재생할 수 있도록 되어있음. 이때 토큰도 발급.\n시크어토큰 발급 후 지정된 시간 내에 재생 가능.\nVPN(94p~) #버츄얼 프라이빗 네트웍\n넷플릭스는 국가별로 컨텐츠가 달라 VPN을 이용하지 않음. 지브리의 판권을 2억주고 샀지만 조건이 일본 넷플릭스에서는 방영 불가.\nVPN SSL VPN : 포인트망 VPN. 한 대가 특정 네크워트에 붙을 때 IPSEC VPN : 고객의 사내망과 클라우드 플랫폼 간의 터널을 뚫어줌 File System (115p) # File System : 데이터를 저장하기 위한 규칙 로컬 파일 시스템 # 연속 할당 방식\n아주 오래된 방식으로 요즘은 안씀 연속 할당 방식에서 공간 확보는 \u0026lsquo;디스크 조각 모음\u0026rsquo;으로 해결. 비연속 할당 방식\n링크드 리스트 방식 메모리는 적게쓰나, 이전 데이터를 읽어야함 다음데이터를 읽을 수 있어서 속도 및 안정성 저하. 이전 파일이 삭제되면 연결이 끊김. 색인구조\n요즘 방식 메모리는 많이씀. 단, 액세스는 수월. 로컬 파일 시스템의 단점\n용량 한계 장애복구 한계 OS 위에 생성되기 때문에, 접근이 제한됨. 네트워크 파일 시스템 # 네트워크 파일 시스템\nOS를 타지 않음 비쌈 분산 파일 시스템 (HDFS, ADF, CODA\u0026hellip;)\n네트워크 파일 시스템을 보완 클라우드 스토리지도 이에 해당됨 (NAS에 비해 저렴) 파일을 쪼개서 분산과 복제. 디스크가 부족하면 서버를 추가로 할당. 구글/지메일/엔드라이브 등이 위 이런 방식으로 분산 파일 시스템(Object Stroage)\n파일을 쪼개는 것이 아니라 복제 어떤 서버가 실제 데이터인지 알 수 없음 MDS(메타데이터 서버)를 통해 관리 스토리지 타입 # Object Storage ex) 구글 포토, icloud 한 번 올리되, 수정할 일이 없는 비정형 데이터들이 대체로 해당됨 수정이 없어서 비용도 저렴한 편. AWS S3와 호환됨 데이터 Lifecycle Management # 최근 데이터들은 빠르고 좋은 비싼 스토리지(Object Storage)에 저장.\n오래된 데이터들을 Archive Storage로 옮김.\nArchive Storage\nObject Storage와 비슷하나 저렴. 데이터를 저장하기 위한 스토리지. 데이터를 자주 읽을경우에는 부적합 (비용이 올라감) NAS # 사용 이유?\n컴퓨터를 켜지않고도 접근 가능. NAS를 기존 네트웍에 스토리지를 구축\nSEN\n오라클(데이터베이스) 등에서 사용. 프로토콜 제공\nNFS : 리눅스용 CIFS : 윈도우용 Data Telepoter # 대용량 데이터를 빠르게 이전하고자 할 때 사용\n10TB 옮기는데 약 20시간 → 기준에서 Data Telepoter는 4배 빠른 속도 지원.\nBackup # 서버에 있는 내용들을 백업.\n기간은 1주부터 1년까지\n기본적으로 백업 파일은 다른데 보관.\n멀리 데이터를 옮겨놓는 옵션이 있음.\n증분 백업\n처음 백업 이후 변경된 내용만 백업 하는 방식 백업 용량 줄일 수 있음 차등 백업\n처음 백업 기준으로 변경된 내용을 매번 모두 백업 리스토어 속도가 빠름 네이버 클라우드에서는 차등백업은 지원하고 있지 않음.\nCloud DB for MySQL (141p) # 데이터 베이스를 플랫폼으로 제공\n이미 만든 web001/002/003 내에 DB를 생성해도 됨.\n시스템에 대한 권한을 주지않음\nex) OS-root 및 MySQL-root 권한 제외하고 서비스 제공\nDataBase db는 반드시 튜닝방법에 대해 잘 알아보고 설정을 할 것 디폴트 설정으로 DB를 설정하면 리드쿼리 : select 쿼리 (리드 슬레이브)\n쿼리 중 select를 가장 많이 사용하기 때문에 이부분만 따로 분리\n새벽에 블로그나, 카페가 읽기만 되고 쓰기가 안될 때\n슬레이브 DB만 남겨놓고 마스터 작업을 하기때문 DB엔진? * MySQl은 innoDB만 지원함 → innoDB만 트랜잭션을 지원하기 때문 DB process\n현재 작동되고 있는 쿼리를 확인 할 수 있음 Stand Alone\n멀티존 지원\n마스터와 스탠바이를 서로 다른 존에 구성 가능 public subnet \u0026amp; private subnet\nRDBMS는 외부에서도 접속을해야하기 때문에 public 서브넷을 사용해야함. Cloud DB for Redis (145p) #요즘은 각각의 성격에 맞게 DB를 조합해서 사용함.\nkey-value형 DB\n메모리 캐시 DB\n소팅에 최적화 되어있음.\n기본포트 : 6379\nex) 게임 점수 등 실시간의 집계 및 소팅이 필요할 때 메모리 캐시 디비 사용.\n랜덤 1만개의 데이터 중 Top10을 추출하는 작업을 요청했을 때 # Redis와 MySQL의 수행 시간 차이 비교 (압도적으로 Redis 빠르다) 랜덤 4만개의 데이터 중 Top10을 추출하는 작업을 요청했을 때 # Redis는 레코드 수와 상관없이 작업처리속도가 비슷 MySQL은 레코드 수에 작업시간 영향을 많이 받음 Redis의 경우에는 굳이 스탠바이를 만들 필요는 없음.\nRedis는 메모리 용량에 영향을 받음.\nCloud DB for MS-SQL # 슬레이브를 만들 수 있지만 로그시핑이라는 방식으로 만들기 때문에 실시간성이 없음. 슬레이브를 서비스용도로 사용하는 것은 네이버클라우드에서 권장하지 않는 사양 Cloud DB for MongoDb # 도큐먼트DB (관계형 데이터 베이스 아님)\nxml 상태 그대로를 저장\nsql 쿼리문을 몰라도 훨씬 더 편리하게 데이터를 조회하거니 관리할 수 있음\n샤딩 클러스터 vs 리플리카 셋 방식 선태 가능\n사용처?\n네이버 설문폼 요즘엔 제이슨 형태를 선호하는 편\nCloud DB for PostgreSQL # 표준 스탠다드 SQL을 가장 많이 지원한다. DB별 지원되는 서비스 비교 # MySQL MS-SQL Redis Mongo Post 시작 10GB 100GB - 10GB 10GB 최대 6TB 2TB - 2TB 6TB port 3306 1433 6379 27017 5432 slave 10 5 4\n샤드(3~10) 5 백업 30 30 7 AI 서비스 #제약사항이 시험 문제로 나옴! #AI와 Application #AI Sevice와 AI API (157p) # AI Sevice : 특화된 데이터를 학습시키고자 할 때 사용 AI API : Geo Location (158p) #모바일은 자체 GPS가 있기 때문에 위 서비스가 굳이 필요없음\n네이버맵이나 구글맵 접속 시 현재 위치를 나타내주는 기능 (사이트별로 오차 범위 다름)\n사용자의 IP 정보를 주소 정보로 바꿔주는 서비스\nAPI로만 존재\nIP를 넣게되면 JSON형태로 반환\n게임 회사에서 많이 사용\n지역별 유저 게임 상황을 파악할 때 SENS # 단체문자/회원인증 등 API 하나로 모두 처리 가능 Outbound Mailer # 스팸 메일? 대량 메일 발송 서비스 스마트에디터 및 치환 태그 제공 ${name}, ${company}\u0026hellip; 등 csv파일에 텍스트 치환태그를 이용해 SMS 내응을 작성하면 알아서 값으로 치환됨. nShortURL # 단축URL 서비스 (사실상 무료 서비스) 챗봇 # CS나 주문시스템과 같은 고객 대응을 로봇으로 대체하는 상품\n텍스트 기반으로 동작\n챗봇은 학습된 질문에만 대한 응답만 하기 때문에 GPT와 다름.(GPT는 답을 가상으로 만들기도 함.)\nClova Speech (165p) # 영상파일에서 실시간 텍스트 추출 및 화자 분리 가능 코로나 때 강사들을 위해 만든 패키지 중 하나.\nClova Dubbing # 컨텐츠에 나레이션을 추가하는 기능 Clova Summary # 문장을 요약해주는 기능 Clova OCR # 문서를 인식하고, 사용자가 지정한 영역의 텍스트와 데이터를 정확하게 추출 일반 폰트는 거의 정확함. 필기체는 인식률이 많이 떨어짐. Clova Studio # B2B 서비스\n프롬프트 작성 가능\n사용자가 위와 같이 답변을 할 수 있게 설정할 수 있다. 토큰값을 늘려주면 답변 길이가 늘어남.\nClova Studio / 하이퍼 Clova X/ Cue 차이점 # Clova Studio : 튜닝, 익스플로러, 스킬 트레이너 기능이 추가로 있음 (기업용 챗지피티같은 기능) Clova X : B2C / 프롬프트가 제한적 Cue : 검색에 Ai가 포함됨. (챗지피티 같은 기능) Papago # B2B 서비스 AiTEMS (184p) #맞춤형 상품추천 기능으로 쇼핑몰에 적용하는 기능\n네이버 쇼핑 \u0026gt; AiTEMS\n이용 조건\n독립적인 쇼핑몰이 있어야 함 쇼핑몰에서 데이터를 추출해서 학습을 시켜야 함 학습정보 3가지 : 아이템/구매이력/유저(개인정보) 실습 #CDN 생성 # [CDN 신청]\n직접입력 \u0026gt; 로드밸런서의 접속정보 입력 Global DNS # [도메인 추가]\n레코드 추가 # 첫번째는 web001서버의 공인 IP주소\n두번째는 로드밸런서 접속 정보\n이렇게 2개가 추가된다.\n이후 위에서 [설정 적용] 버튼 클릭\n[배포] 클릭\n결과 확인 #아래 경로로 접근 시\nhttp://web001.dev189.academy.nca.ncloudedu.com (경로에 web001이 포함되는 것이 유의)\n위처럼 화면이 나오면 ok.\nAuto Scaling # Launch Configuration # 내 서버 이미지를 이용해서 만들기 [다음]\n(서버설정 및 스토리지 설정에서는 수정 x)\n오토스케일링이라 굳이 인증키 설정이 필요없긴 하다고 함.\n[Launch Configuration] 생성하기\nAuto Scaling Group # [다음]\n[Auto Scaling Group] 생성 클릭\n임계치 설정. Cloud Insight # [이용 신청]\nauto 스케일링이 완료돼야 위 설정이 보임\n오토스케일링 선택 후 \u0026gt; 다음\n[그룹 생성]\n대상을 선택해서 아래로 내려주고 [생성]\n[템플릿 생성]\n생성된 템플릿을 찍고 [다음]\n위 창에서는 해당 이벤트가 발생했을 때 필요한 설정을 하면 된다.\n설정한 이벤트가 발생했을 때 오토 스케일링 서버를 add 해주겠다는 설정\n결과 # cpu가 50% 이상 넘어가면 서버가 add 되도록 정책 설정 된 것을 확인할 수 있다.\nBucket Management # 웹하드 처럼 사용하면 안됨. (파일 업로드, 다운로드 용도로 있는게 아님) 설정관리/암호화관리/권한관리 패스.\n버킷은 != 디렉토리\n버킷 아래 디렉토리 생성이 됨.\ns3 브라우저 설치 #https://s3browser.com/\n설치하기\nREST EndPoint 확인하는 방법 ↓ 위 이미지 경로에 있는 url 앞부분이 REST EndPoint\n액세스키/시크릿키 ncp 계정 정보 \u0026gt; 인증키 관리에서 확인 후 입력 [생성]\n업로드로 파일 올릴 수 있음.\nCloud for DB Mysql # 고가용성 지원을 체크 - 서버를 2개를 만듦. (Master + Standby Master) 체크 해제 하면 1대만 만듦. HOST(IP) : % == any [생성]\n결과 # Master 와 Standby Master 2개가 생성된 것을 확인 할 수 있다.\nACG 인바운드/아웃바웃드 설정 # ACG에 아래와 같이 추가로 생성된 것을 볼 수 있다. 인바운드/아웃바웃드 설정 퍼블릭 도메인 만들기 # Mysql 연결 #아래 정보에서 퍼블릭 도메인 복사해서 MySQL 연결해보기\n(아직 테이블은 없는 상태)\n","date":"2023-12-28","permalink":"/devl/ncp/002/","section":"Developer Course","summary":"개념 #Load balancer (84p) #인증서를 발급받으려면 도메인이 필요.","title":"ncp 교육 - Day02"},{"content":"교육 일정 # 12/27 ~ 12/28 : NCA 교육 12/29 : AI API \u0026amp; Service 1/2 ~ 1/5 : NCP, NCE 교육 클라우드 서버와 일반 서버의 차이점? #클라우드에서 제공되는 다양한 컴포넌트를 사용하게됨. -\u0026gt; 비용과 시간의 절감 효과\n클라우드 이용 관련 # 수강신청 같은 일시적인 이벤트에 클라우드 사용 일반적으로 종량제 요금으로 적용됨 클라우드는 OPEX 타입. *나홀로 개발 하던 시절 - C, C++, JAVA\n*JAVA - 클래스 - 코드 재사용 - 협업 - IDE의 발전 - 깃허브\n*최근 개발 트랜드 ? (협업과) 배포 -좀 더 효율적으로, 잘, 배포할 수 있을까 -MSA, 젠킨스, 스프링... 네이버 클라우드 전체 상품 라인업 #인프라 상품군 # 서버 스토리지 네트웍 플랫폼 상품군 # 데이터 베이스 빅데이터 AI 통계 어플리케이션 상품군 #AI API 와 AI Service 차이 # AI API : 이미 시중에 있는 AI 모델을 사용하는 방법.\nAI Service :\n특정 분야에 특화시키고 싶을 때? -\u0026gt; 특화시켜서 해당 분야의 지식을 학습 시키는 것. ex) 금융 분야에 대해 AI에 학습 시키는 것. AI에서 GPU를 사용해 모델을 학습시킴.\nGPU\n연산이 빨라 초당 프레임이 높아짐. 그래픽이 더 매끄럽게 처리됨. 왜 그래픽 카드(GPU)가 왜 AI에 쓰이는지?\nGPU는 행렬연산에 최적화됨 (=vector 연산) ➡️ AI 또한 행렬연산이다보니 GPU를 사용하게 됨. SAS # SAS 서비스? 대부분의 구독형 서비스 넷플릭스, 디즈니, 어도비 프로그램 구독형 서비스 상품 의존성 #클라우는 생긴지 얼마 안돼 용어에 대한 표준이 없음. 각 클라우드마다 용어가 다를 수 있음.\n출제 유의\n리전(Region)\n분산 복제를 해놓음 (Object Storage, Archive Storage 등) 존(Zone) : IDC\n존은 무너지면 끝. (복제를 해놓지 않음) 리전에 종속인 것과 존에 종속적인 것이 다름. 멀티 존 로드밸런서로 각각의 서버 및 DB를 교차로 사용할 수 있음. (사고 시 대책 수립 가능) 2-3년에 한번씩 IDC 사고가 터짐 (카카오 화재 등) 100Compute / Network #Compute 상품 #클라우드 생성시 필요한 세가지\nCPU 메모리 디스크 HPC : 하이 퍼포먼스 컴퓨팅 (병렬 컴퓨팅)\n네트워크 (모든 클라우드가 공통)\n인바운드는 과금 없음 아웃바운드만 과금됨 용량은 선택 불가\n리눅스 50G/윈도우 100G 고정 일반 서버 타입 # 클라우드 서버 CPU? #인텔 CPU 현재 13세대\n세대? 아키텍처를 바꿈(구조를 뜯어고쳐서 성능을 향상)\n클라우드에서 제공하는 CPU 종류 G1 / G2 / G3 : 숫자가 높을수록 최신 CPU Bare Metal Server (32p) # 일반적으로 클라우드는 하이퍼바이저 위에 서버 가상화를 해서 사용자를 주게됨.\nBare Metal Server\n하이퍼바이저를 통하지 않은 (가상 서버가 아닌) OS 서비스 하드웨어의 성능을 그대로 써야할 때 ex) SKT, 펍지?, 여러 게임회사나 통신회사 IPMI를 통해 서버를 컨트롤 함(서버의 화면을 그대로 전송하거나, 전원 on,off, 바이오스모드 진입 등) 디스크를 8장 정도 사용함. OS는 윈도우와 리눅스 중 선택 가능. 그중 리눅스는 3개 중 선택 가능.\n개인이 쓰기에는 우분투가 편함 센트OS/록키/우분투의 차이?\n레드햇 계열\n레드햇만의 소프트웨어 관리 패키지 사용 (=RPM) 센트OS, 록키가 해당됨 인터넷에서 파일을 찾아서 설치 : yum 센트OS는 의존성이 높아서 어려움. 충돌도 많음. (센트OS - 갤럭시) 데비안 계열\n디셀렉트 사용 우분투가 해당됨 (우분투 사용을 추천하심/우분투 - 아이폰) 인터넷에서 파일을 찾아서 설치 : apt MS SQL Server\n스탠다드 에디션의 맥스는 24core 서버가 60core고 스탠다드를 사용해도 24core만 사용가능. 그러나 요금은 60core를 내야함..\nSingle Intel 8코어는 오라클을 위한..\nDual Intel 24코어는 msSQl 위한..\nGPU 서버 (33p) # cpu도 병렬처리에 가능하나 gpu보다 느림 (단, cpu가 할 수 있는 일은 gpu가 못함) 서버용 GPU는 연산만을 위해 존재. 최신은 HP100이지만 사용자 제공은 아직임 제공방식은 PassThrouch를 적용해서 제공 하이퍼바이저가 컨트롤하지 않고, VM에게 제어 권한을 주는 방식 PassThrouch : 하드 단위로 VM에 할당 코어 단위로도 할당하는 방법도 존재하지만 네이버 플랫폼에서는 PassThrouch만 제공 윈도우 위에 리눅스가 있고 이 상태에서 usb를 꽂으면 윈도우에서만 인식함. 이것을 리눅스에서 인식하도록 변경이 가능한데 PassThrouch를 통해 리눅스로 권한을 변경함. (리눅스에게 인식할 수 있도록 권한을 주면 윈도우에서는 인식 못함) 제공사양 GPU를 선택하면 그에 따른 메모리는 고정된 사양을 이용해야 함. 서버 Operation방법 # 내가 만든 프로그램을 이용해서 컨트롤하고자할 때 쓰는 API NCP 플랫폼 #플랫폼에서 Classic VPC\nClassic # 네이버에서 다 구성돼있음. 서버만 만드면 됨 나만의 공간을 가질 수 없다는 단점. VPC (=virtual Private Cloud) (57p) # 나만의 공간을 가지게 됨 계정당 한 리전에 3개씩 생성 가능 서브넷을 직접 만들고 그 안에 서버를 넣을 수 있음. vpc는 독립된 클라우드로 원래는 vpc와 vpc간에는 통신이 불가 - 상위 서버를 통과해야함 (공인 IP 필요)\nPeering vpc와 vpc의 통신이 가능하도록 터널을 뚫는 개념 출제 예상 타 vpc간의 연결을 위한 조건. 서브넷 마스크 #네트워크 주소 설계를 할 때 알아야할 중요한 개념.\n216.39.106.163/24 (24 : 서브넷마스크) 11011000/00100111/01101010/10100011 ^ 24번째 자리 ---------- 24번째리 자리 이후부터 11011000/00100111/01101010/00000000 ~ 11011000/00100111/01101010/11111111 ⬆️ 1로 다 채워진 부분 (브로드 캐스트) ---------- #위 범위까지 사용할 수 있음. #이 안에 있는 ip들은 라우터를 거치지 않음 #서버 규모가 600대인 경우 서브넷은 22로 사용하면 됨 (1024개 가능) 서브넷 마스크 계산 방법 nCould 방화벽 # 방화벽 설정\n방화벽 설정에는 3가지가 필요\nSource IP (소스 아이피) Dst IP (Destination IP) Dst Port (Destination 포트) ＋ 디폴트 필터\nAll allow - 블랙리스트 방화벽 방식 All deny - 화이트리스트 방화벽 방식 nCould 방화벽의 종류\nNACL 네트워크 방화벽 블랙리스트 방화벽 아무 설정을 안하면 모두 허용 ACG 서버의 방화벽 화이트리스트 방화벽 아무 설정은 안하면 모두 막음 서브넷의 속성 # Public 서브넷\n공인IP 부여해서 외부와 통신 Private 서브넷\n공인Ip 할당 불가. 인터넷 안됨. 내부에서만 사용 보안적으로 외부에 오픈되면 안되는 서버들 실습 # VPC #vpc 생성 # Network ACL(=NACL) 생성 #경로 : Network ACL \u0026gt; ACL Rule 1) 첫번째 Network ACL 생성\n생성 후에는 인바운드, 아웃바운드 아무 것도 없는 상태\nNetwork ACL 생성 룰생성\n인바운드 -설정은 했지만 포트 10번/ 15번은 의미가 없다고 함 (얼커밋이 이미 설정이 되어있기때문에)\n-3,4번 설정은 의미가 있음 ssh를 사용할 때? 아웃바운드 -설정은 해줬지만 사실상 위 3개 옵션은 의미가 없음. (얼커밋이 이미 설정이 되어있기때문에) 2) 두번째 Network ACL 생성\n3) 세번째 Network ACL 생성\n(인바운드 및 아웃바운드 설정안함.)\n서브넷 생성 #1) vpc-web 서브넷 생성\n2) vpc-db 서브넷 생성\nprivate 설정에 유의\n3) vpc-lb 서브넷 생성\n[용도] : 로드밸런서 선택.\n[Internet Gateway 전용 여부] : 교재에는 private로 잘못나와있음. public이 맞음\n4) 3개의 서브넷 생성 결과\nServer Init Script (40p)\n클라우드에서는 가능하면 서버에 접속을 안하는 것이 나음 → 클라우드의 자동화서비스를 충분히 사용해라.\nACG (서버의 방화벽) # NACL과의 차이 화이트리스트 방화벽 특징상 → 우선순위가 없음. 허용여부 없음 1) 빈 ACG 생성\n2) ACG 설정\n인바운드/ 아웃바운드 설정 Init Script 추가하기 # 스크립트 내용 #!/bin/bash # yum : 우분투에서 apt와 같은 역할하는 명령어 yum install -y httpd # sleep : 설정이 꼬이지 않게 강제로 시간을 sleep 시킴. sleep 15 cd /var/www/html wget https://kr.object.ncloudstorage.com/ncp-manual/ncp/ncp-lab.tgz sleep 10 tar xvfz ncp-lab.tgz rm -rf /etc/yum.repos.d/* cp -rf yum.repos.d/* /etc/yum.repos.d/ cat phpadd \u0026gt;\u0026gt; /etc/httpd/conf/httpd.conf # ↑ 꺽쇠가 2개면 overwrite yum install -y redis php php-redis mariadb-server php-mysql mongodb-org php-mongodb sleep 60 systemctl enable httpd systemctl enable mariadb systemctl enable redis systemctl enable mongod systemctl start httpd systemctl start mariadb systemctl start redis systemctl start mongod mysql \u0026lt; dbstep1.sql mysql \u0026lt; dbstep2.sql 서버 생성 # 50G는 리눅스, 100G 윈도우 (고정값)\ncentos 7.8 선택\n[서버 생성] 클릭\n인증키 # 미국 서버는 루트 패스워드를 알려주지 않음. 한국/중국은 인증키로 루트 패스워드를 조회할 수 있음. ssh를 안전하게 로그인 하는 방법 : key 로그인 key를 가지고 있는 클라이언트만 로그인 가능. 스토리지 생성 # MaxIOPS : 디스크 속도\n출제 예상 SSD 크기(GB) 설정에 따라 하단의 MaxIOPS가 바뀜\n100GB 미만은 4000으로 고정 10GB당 400씩 증가 500GB 초과는 20000만으로 고정 웹사이트에 공인 IP 입력 # 위 화면이 뜨면 일단 ok 스토리지 #스토리지 \u0026gt; 스토리지 선택 후 [변경]으로 확장 가능. 단, 축소는 안됨\n볼륨 조절 시스템 리눅스 : LVM 윈도우 : 스팬볼륨 LVM(=LogicalVolume Manager) (44p)\nRAID (46p) # RAID 0 (스트라이핑 방식) 적용시 read, write 속도가 2배가 됨. 단 안정성 ↓ 별도로 찾아보기..\nRAID 5 용량을 90% 이상 확보 (6TB이면 일반적으로 5TB까지 확보) Gb(기가비트) / TB(테라바이트)\n-[B] 데이터 사이즈 : Byte\n-[b] 네트워크 속도 : bit\n오토 스케일링 (47p) # 클라우드 활용 전략 중.. cpu나 메모리를 늘리거나 → 스케일 업 전략 똑같은 서버를 만들어서 분산시키거나 → 스케일 아웃 전략 1번이 편한 방법이긴하나 비용면에서 불리함. cpu를 바꾸는 비용이 서버를 사는 비용보다 더 비쌈. 그러다보니 2번 방법을 사용하게 됨. 오토 스케일링 스스로 서버를 늘리고 줄이는 기능 ex) 과도한 트래픽이 몰리는 경우? (ex, CPU or 네트워크) 1. 조건 설정 : CPU 50%가 넘으면? → 서버를 늘린다. 2. 어떤 서버를? → web / was / db (3개 서버중 선택) 3. 몇대씩? (=오토서버 그룹) → 3대씩 컨테이너 (53p) # 요즘 개발 선호 - 컨테이너 서비스 C언어는 환경이 바뀔때마다 컴파일을 해야함. java의 JVM이 이러한 단점을 보완한 언어.\n컨테이너 : 컨테이너 위에 어플리케이션을 구축했을 때 어디서든 작동하게 됨 → JVM같은 느낌. 이런 기능에 특화된? 것이 쿠버네티스. (쿠버네티스 또한 오토스케일링이 가능하다.)\nCloud Functions # 서버 안만들고 코드에 서버를 올림 - 클라우드에서 알아서 코드를 서버에 탑재\n오토 스케일링을 클라우드가 알아서 하는 것. - 호출한 횟수만큼 비용 청구됨.\n특징\n액션 트리거 Container Reistry (54p) # 나만의 도커 허브\n퍼블릭과 프라이빗 엔드포인트 제공함.\n컨테이너 이미지들을 모두 오브젝트 스토리지에 저장됨.\nKubernetes Service # 컨테이너의 단점을 보완하기 위해 나온 서비스 내 서버 이미지 생성 # [생성] 클릭\nServer Image에 생성된 것을 확인 할 수 있다. 유사 서버 생성하기 # 원본 서버의 외부 설정만 가져옴. (데이터를 가져오는 것이 아님).\nServerImage로 서버 생성하기 # 공인IP 및 스크립트 설정 필요없음\n스크립트는 이미 적용된 이미지 파일에서 서버를 생성했기 때문\n[서버 생성] 클릭\n생성된 3개 서버 확인 # Load balancer (82p) # 로드밸런서 역할\n부하 분산 서버가 죽으면 제외시키고 예비서버를 가용시킴. 로드밸런서 포트 3가지 설정\n로드밸런서의 서비스 포트 서버의 서비스 포트 서버의 H.C (=헬스 체크: 서버가 죽었는지 확인하는 체크) 포트 Target Group\nLoad balancer.Target Group 설정 # 타켓 그룹 생성 (모두 선택해서 오른쪽 적용으로 보내기)\nLoad balancer 생성 # [로드밸런서 생성] 클릭\n생성 결과 확인하기 [접속정보]의 ip 또는 url 선택해서 웹브라우저로 접속해보기 여기서 보이는 ip는 로드 밸런서의 ip이다.\n새로고침을 할 때마다 web001과 web003이 번갈아가면서 로드밸런서가 작동한다.\nweb002는 현재 빈 서버라서 아직 나타나지 않음. ip 확인 시 유의사항 # web001서버 공인아이피로 접속 시 위 ip는 현재 강의장의 ip (로드밸런서로 접속했을 때의 ip와 구분된다.)\n","date":"2023-12-27","permalink":"/devl/ncp/001/","section":"Developer Course","summary":"교육 일정 # 12/27 ~ 12/28 : NCA 교육 12/29 : AI API \u0026amp; Service 1/2 ~ 1/5 : NCP, NCE 교육 클라우드 서버와 일반 서버의 차이점?","title":"ncp 교육 - Day01"},{"content":"","date":null,"permalink":"/categories/spring/","section":"Categories","summary":"","title":"Spring"},{"content":"","date":null,"permalink":"/devl/spring/","section":"Developer Course","summary":"","title":"Spring"},{"content":"네이버 AI 이용해보기\n방명록 db 만들기 #CREATE TABLE guestdb( guest_num smallint auto_increment primary key, guest_nickname varchar(30), guest_photo varchar(200), guest_content varchar(1000), guest_writeday datetime ) mapper, dao, dto, service, controller 생성 mapper #\u0026lt;select id=\u0026#34;selectAllGuest\u0026#34; resultType=\u0026#34;GuestDto\u0026#34;\u0026gt; SELECT * FROM guestdb ORDER BY guest_num ASC \u0026lt;/select\u0026gt; \u0026lt;insert id=\u0026#34;insertGuest\u0026#34; parameterType=\u0026#34;GuestDto\u0026#34;\u0026gt; INSERT into guestdb values (null, #{guest_nickname}, #{guest_photo}, #{guest_content}, now()) \u0026lt;/insert\u0026gt; \u0026lt;delete id=\u0026#34;deleteGuest\u0026#34; parameterType=\u0026#34;int\u0026#34;\u0026gt; DELETE from guestdb WHERE guest_num = #{guest_num} \u0026lt;/delete\u0026gt; controller (네이버 스토리지에 업로드) # 네이버 스토리지 연결을 위한 필드 설정 @Autowired private NcpObjectStorageService storageService; private String bucketName = \u0026#34;guest-aiur\u0026#34;; private String folderName = \u0026#34;guest\u0026#34;; 네이버 스토리지에 이미지 업로드 @GetMapping(\u0026#34;/guest/insert\u0026#34;) public String insertGuest(@ModelAttribute GuestDto dto, @RequestParam MultipartFile upload){ //네이버 스토리지에 업로드 후 랜덤 파일명 변환 String guest_photo = storageService.uploadFile(bucketName, folderName, upload); //dto에 사진 파일명 저장 dto.setGuest_photo(guest_photo); return \u0026#34;redirect:./list\u0026#34;; } 파파고 번역을 담기 위한 변수 추가 # ncp Service 추가 #ncp Service 추가\n이용신청 # 약관 동의 Application 등록 # 인증정보 확인 개발자 모드 확인 #https://api.ncloud-docs.com/docs/ai-naver-papagonmt-translation\n하단에 Java 코드 복사\n방명록 리스트 코드 추가 #@GetMapping(\u0026#34;/guest/list\u0026#34;) public String guest(Model model, @RequestParam(defaultValue = \u0026#34;en\u0026#34;) String country){ ... //dto에 번역 내용을 저장 for(GuestDto dto:glist){ //해당 나라 언어로 번역해서 반환 String trans = translate(dto.getGuest_content(), country); dto.setTrans_lang(trans); } ... return \u0026#34;guest/guestlist\u0026#34;; } translate 메서드 #public String translate(String content, String country){ String clientId = \u0026#34;csgbtu2ifq\u0026#34;;//애플리케이션 클라이언트 아이디값\u0026#34;; String clientSecret = \u0026#34;HU8d4dIv2lgzHjMOyefSNPpYPK4acPvtv6ZgcVJZ\u0026#34;;//애플리케이션 클라이언트 시크릿값\u0026#34;; //텍스트 반환할 변수 삽입 String returnValue = \u0026#34;\u0026#34;; try { String text = URLEncoder.encode(content, \u0026#34;UTF-8\u0026#34;); String apiURL = \u0026#34;https://naveropenapi.apigw.ntruss.com/nmt/v1/translation\u0026#34;; URL url = new URL(apiURL); HttpURLConnection con = (HttpURLConnection)url.openConnection(); con.setRequestMethod(\u0026#34;POST\u0026#34;); con.setRequestProperty(\u0026#34;X-NCP-APIGW-API-KEY-ID\u0026#34;, clientId); con.setRequestProperty(\u0026#34;X-NCP-APIGW-API-KEY\u0026#34;, clientSecret); // post request String postParams = \u0026#34;source=ko\u0026amp;target=\u0026#34; + country + \u0026#34;\u0026amp;text=\u0026#34; + text; con.setDoOutput(true); DataOutputStream wr = new DataOutputStream(con.getOutputStream()); wr.writeBytes(postParams); wr.flush(); wr.close(); int responseCode = con.getResponseCode(); BufferedReader br; if(responseCode==200) { // 정상 호출 br = new BufferedReader(new InputStreamReader(con.getInputStream())); } else { // 오류 발생 br = new BufferedReader(new InputStreamReader(con.getErrorStream())); } String inputLine; StringBuffer response = new StringBuffer(); while ((inputLine = br.readLine()) != null) { response.append(inputLine); } br.close(); //System.out.println(response.toString()); //번역된 텍스트 삽입 returnValue = response.toString(); } catch (Exception e) { System.out.println(e); } return returnValue; } ","date":"2023-11-27","permalink":"/devl/spring/016/","section":"Developer Course","summary":"네이버 AI 이용해보기","title":"미니 프로젝트 #6"},{"content":"복습 # regroup : num의 max의 값의 + 1. num == null일경우 num = 0 처리 restep : 최신 댓글을 가장 먼저 나오게 하기 위함. 같은 regroup 중에 중복값 불가. relevel mapper에서 selectkey를 주는 이유 #board파일과 board_file에서 num이 FK로 연결되어있는데 board의 num은 auto인크리먼트라서 어떤 값이 들어갈 지 알 수 없는 상태이다.\n\u0026lt;selectKey keyProperty=\u0026#34;num\u0026#34; resultType=\u0026#34;int\u0026#34; order=\u0026#34;AFTER\u0026#34;\u0026gt; \u0026lt;!-- BoardDto에 insert한 후에 int값으로 num값을 얻을 수 있게 해줌 --\u0026gt; SELECT LAST_INSERT_ID() \u0026lt;/selectKey\u0026gt; 위처럼 selectKey 설정을 한 후 아래 메서드 내에서 BoardDto의 현재 dto.getNum()를 불러와서 board_file의 num 값에 저장해준다.\n@Autowired private BoardFileService boardFileService; @PostMapping(\u0026#34;/board/addboard\u0026#34;) public String addBoard( .... for (MultipartFile multi : upload) { fileName = UUID.randomUUID().toString(); try { multi.transferTo(new File(path + \u0026#34;/\u0026#34; + fileName)); BoardFileDto fdto = new BoardFileDto(); //여기서 dto.getNum()를 board_file num에 담는다 fdto.setNum(dto.getNum()); fdto.setPhotoname(fileName); boardFileService.insertPhoto(fdto); ... photoCount 추가 #BoardDto에 int photoCount를 추가 후\nBoardController #for(BoardDto dto:list){ int pcount = boardFileService.getPhotoByNum(dto.getNum()).size(); System.out.println(dto.getNum() + \u0026#34;:\u0026#34; + pcount); dto.setPhotoCount(pcount); } 결과 Content 보기 #BoardController #@GetMapping(\u0026#34;board/content\u0026#34;) public String getContent(Model model, @RequestParam int num, @RequestParam(defaultValue = \u0026#34;1\u0026#34;) int currentPage){ //조회 수 증가 boardService.updateReadCount(num); //num에 해당하는 dto 얻기 BoardDto dto = boardService.getData(num); //memberDAO에서 photo 정보 가져오기 String profile_photo = memberDao.getData(dto.getMyid()).getPhoto(); //사진과 사진 갯수 List\u0026lt;String\u0026gt; photos = boardFileService.getPhotoByNum(num); dto.setPhotoCount(photos.size()); dto.setPhotoNames(photos); model.addAttribute(\u0026#34;profile_photo\u0026#34;, profile_photo); model.addAttribute(\u0026#34;dto\u0026#34;, dto); model.addAttribute(\u0026#34;currentPage\u0026#34;, currentPage); return \u0026#34;board/content\u0026#34;; } 새글/답글 버튼 만들기 #답글쓰기의 경우 현재 content dto의 num/regroup/restep/relevel/currnetPage 을 모두 넘겨줘야한다.\n\u0026lt;!--새글쓰기 버튼 --\u0026gt; \u0026lt;button type=\u0026#34;button\u0026#34; class = \u0026#34;btn btn-outline-secondary btn-sm\u0026#34; onclick=\u0026#34;location.href=\u0026#39;./form\u0026#39;\u0026#34;\u0026gt;새글쓰기\u0026lt;/button\u0026gt; \u0026lt;!--답글쓰기 버튼 5개의 값을 모두 보낸다.--\u0026gt; \u0026lt;button type=\u0026#34;button\u0026#34; class = \u0026#34;btn btn-outline-secondary btn-sm\u0026#34; onclick=\u0026#34;location.href=\u0026#39;./form?num=${dto.num}\u0026amp;regourp=${regroup}\u0026amp;restep=${restep}\u0026amp;relevel=${relevel}\u0026amp;currentPage=${currnetPage}\u0026#39;\u0026#34;\u0026gt;답글\u0026lt;/button\u0026gt; 수정/삭제 버튼 만들기 #수정/삭제 버튼은 로그인 상태가 true이고 + content를 작성한 사람 id와 동일할 경우에만 보이게 설정\n\u0026lt;c:if test = \u0026#34;${sessionScope.loginok !=null and sessionScope.myid.equals(dto.myid)}\u0026#34;\u0026gt; \u0026lt;button type=\u0026#34;button\u0026#34; class = \u0026#34;btn btn-outline-secondary btn-sm\u0026#34; onclick=\u0026#34;location.href=\u0026#39;\u0026#39;\u0026#34;\u0026gt;수정\u0026lt;/button\u0026gt; \u0026lt;button type=\u0026#34;button\u0026#34; class = \u0026#34;btn btn-outline-secondary btn-sm\u0026#34; onclick=\u0026#34;location.href=\u0026#39;\u0026#39;\u0026#34;\u0026gt;삭제\u0026lt;/button\u0026gt; \u0026lt;/c:if\u0026gt; board 수정/삭제 #수정 #\u0026lt;update id=\u0026#34;updateBoard\u0026#34; parameterType=\u0026#34;BoardDto\u0026#34;\u0026gt; UPDATE boarddb SET subject = #{subject}, content = #{content} WHERE num = #{num} \u0026lt;/update\u0026gt; //BoardDao public void updateBoard(BoardDto dto){ session.update(nameSpace + \u0026#34;updateBoard\u0026#34;, dto); } //BoardService public void updateBoard(BoardDto dto){ boardDao.updateBoard(dto); } //BoardController @GetMapping(\u0026#34;/board/updateform\u0026#34;) public String updateForm(Model model, @RequestParam int num, @RequestParam int currentPage){ BoardDto dto = boardService.getData(num); List\u0026lt;BoardFileDto\u0026gt; flist = boardFileService.getFileDateByNum(num); model.addAttribute(\u0026#34;currentPage\u0026#34;, currentPage); model.addAttribute(\u0026#34;dto\u0026#34;, dto); model.addAttribute(\u0026#34;flist\u0026#34;, flist); return \u0026#34;board/updateform\u0026#34;; } \u0026lt;button type=\u0026#34;button\u0026#34; class = \u0026#34;btn btn-outline-secondary btn-sm\u0026#34; onclick=\u0026#34;location.href=\u0026#39;./updateform?num=${dto.num}\u0026amp;currentPage=${currentPage}\u0026#39;\u0026#34;\u0026gt;수정\u0026lt;/button\u0026gt; 삭제 #\u0026lt;delete id=\u0026#34;deleteBoard\u0026#34; parameterType=\u0026#34;int\u0026#34;\u0026gt; DELETE FROM boarddb WHERE num = #{num} \u0026lt;/delete\u0026gt; //BoardDao public void deleteBoard(int num){ session.delete(nameSpace + \u0026#34;deleteBoard\u0026#34;, num); } //BoardService public void deleteBoard(int num){ boardDao.deleteBoard(num); } //BoardController @GetMapping(\u0026#34;board/delete\u0026#34;) public String deleteBoard(@RequestParam int num, @RequestParam int currentPage){ //삭제 boardService.deleteBoard(num); return \u0026#34;redirect:list?currentPage=\u0026#34; + currentPage; } 그리고 버튼의 경로를 수정해준다.\n\u0026lt;button type=\u0026#34;button\u0026#34; class = \u0026#34;btn btn-outline-secondary btn-sm\u0026#34; onclick=\u0026#34;location.href=\u0026#39;./delete?num=${dto.num}\u0026amp;currentPage=${currentPage}\u0026#39;\u0026#34;\u0026gt;삭제\u0026lt;/button\u0026gt; board_file 수정/삭제 #수정 #\u0026lt;select id=\u0026#34;selectAllDataByNum\u0026#34; parameterType=\u0026#34;int\u0026#34; resultType=\u0026#34;BoardFileDto\u0026#34;\u0026gt; SELECT * FROM board_file WHERE num = #{num} \u0026lt;/select\u0026gt; //BoardFileDao public List\u0026lt;BoardFileDto\u0026gt; getFileDateByNum(int num){ return session.selectList(nameSpace+\u0026#34;selectAllDataByNum\u0026#34;, num); } //BoardFileService public List\u0026lt;BoardFileDto\u0026gt; getFileDateByNum(int num) { return boardFileDao.getFileDateByNum(num); } 삭제 #\u0026lt;delete id=\u0026#34;deletePhotoByIdx\u0026#34; parameterType=\u0026#34;int\u0026#34;\u0026gt; DELETE * FROM board_file WHERE idx = #{idx} \u0026lt;/delete\u0026gt; //BoardFileDao public void deletePhoto(int idx){ session.delete(nameSpace + \u0026#34;deletePhotoByIdx\u0026#34;,idx); } //BoardFileService public void deletePhoto(int idx){ boardFileDao.deletePhoto(idx); } 수정 폼 #기본적으로 boardform.jsp를 복사해서 수정한다.\n수정폼에 이미지 썸네일 불러오기 #\u0026lt;c:forEach var=\u0026#34;fdto\u0026#34; items=\u0026#34;${flist}\u0026#34;\u0026gt; \u0026lt;div class = \u0026#34;photos\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;../res/upload/${fdto.photoname}\u0026#34; width=\u0026#34;80\u0026#34;\u0026gt;\u0026lt;br\u0026gt; \u0026lt;span class=\u0026#34;photodel\u0026#34; idx = \u0026#34;${fdto.idx}\u0026#34; style=\u0026#34;cursor: pointer\u0026#34;\u0026gt; x \u0026lt;/span\u0026gt; \u0026lt;/c:forEach\u0026gt; 수정폼에 있는 이미지 썸네일 삭제하기 # \u0026lt;script\u0026gt; $(document).on(\u0026#34;click\u0026#34;,\u0026#34;.photodel\u0026#34;,function (){ let idx = $(this).attr(\u0026#34;idx\u0026#34;); let $photodel = $(this); $.ajax({ type:\u0026#34;get\u0026#34;, dataType:\u0026#34;text\u0026#34;, url:\u0026#34;./delphoto\u0026#34;, data : {\u0026#34;idx\u0026#34;:idx}, success:function (res){ //사진 삭제 - 삭제 아이콘의 부모태그 제거 $photodel.parent().remove(); } }) ; }); \u0026lt;/script\u0026gt; @GetMapping(\u0026#34;/board/delphoto\u0026#34;) @ResponseBody public void deletePhoto(@RequestParam int idx){ //해당 사진 삭제 boardFileService.deletePhoto(idx); } \u0026lsquo;x\u0026rsquo;를 클릭하면 새로고침없이 즉시 삭제된다.\n수정폼 내용 업데이트 #BoardController에서 기존 addBoard 를 복사해서 수정해서 사용\n@PostMapping(\u0026#34;/board/updateboard\u0026#34;) public String updateBoard( @ModelAttribute BoardDto dto, @RequestParam String currentPage, @RequestParam List\u0026lt;MultipartFile\u0026gt; upload, HttpServletRequest request, HttpSession session ) { String path = request.getSession().getServletContext().getRealPath(\u0026#34;resources/upload\u0026#34;); //수정 boardService.updateBoard(dto); //사진 업로드 //사진 업로드를 안했을 경우 리스트의 첫 데이터의 파일명이 빈문자열이 된다. (NULL이 아님) //즉 업로드를 했을 경우에만 db에 저장 if (!upload.get(0).getOriginalFilename().equals(\u0026#34;\u0026#34;)) { String fileName = \u0026#34;\u0026#34;; for (MultipartFile multi : upload) { fileName = UUID.randomUUID().toString(); try { multi.transferTo(new File(path + \u0026#34;/\u0026#34; + fileName)); BoardFileDto fdto = new BoardFileDto(); fdto.setNum(dto.getNum()); fdto.setPhotoname(fileName); boardFileService.insertPhoto(fdto); } catch (IllegalStateException e) { throw new RuntimeException(e); } catch (IOException e) { throw new RuntimeException(e); } } } //수정 후 내용보기로 이동한다. return \u0026#34;redirect:content?currentPage=\u0026#34; + currentPage +\u0026#34;\u0026amp;num=\u0026#34; + dto.getNum(); } 댓글 #board_answer DB 생성 #CREATE TABLE board_answer( ansidx smallint primary key auto_increment, answername varchar(20), ansid varchar(20), ansphoto varchar(100), ansmsg varchar(1000), writeday datetime, num smallint, constraint fk_boarddb_num foreign key(num) references boarddb(num) on delete cascade ); 현재까지 ERD # DTO #@Data public class BoardAnswerDto { private int ansidx; private int num; private String ansname; private String ansid; private String ansphoto; private String ansmsg; @JsonFormat(pattern = \u0026#34;yyyy-MM-dd HH:mm\u0026#34;, timezone = \u0026#34;Asia/Seoul\u0026#34;) private Timestamp writeday; } BoardAnswerDao 클래스 생성 BoardAnswerService 클래스 생성 @AllArgsConstructor 추가 mybatis-config.xml : dto 설정 BoardAnswerMapper.xml 파일 추가 ","date":"2023-11-24","permalink":"/devl/spring/015/","section":"Developer Course","summary":"복습 # regroup : num의 max의 값의 + 1.","title":"미니 프로젝트 #5"},{"content":"계층형게시판에 대한 이해 #원글의 답글 \u0026gt; 답글의 답글\n글이 없을 경우 max를 구하면 null이 나옴\nSELECT MAX(num) FROM boarddb 첫글에 null이 나오는 것을 방지하기 위해 위처럼 sql 작성\nSELECT ifnull(MAX(num),0) as num FROM boarddb @Data public class BoardDto { private int num; private String writer; private String myid; private String subject; private String content; private int readcount; //계층형에 필요한 변수 private int regroup; private int restep; private int relevel; private List\u0026lt;String\u0026gt; photoNames; private Timestamp writeday; } 첫을은 re그룹이 무조건 1\n넘버값이 넘어오면 답글, null이거나 0이면 새글\n\u0026ndash; maxnum regroup restep relevel 0 답글일 경우 maxnum와 regroup 은 무조건 같음 restep은 기존값에서 +1 relevel도 기존값에서 +1\n원글에 대한 첫답글 원글에 대한 답글\n답글의 그룹은 항상 원글과 같은 그룹이어야한다.\n페이징 처리 #10개 단위로 페이지가 보이게 되어있다면\n현재 페이지가 110이내인 상태에서 다음을 눌렀을 때 1120로 넘어가게 처리(처리 후 보이는 페이지는 11)\n현재 페이지가 1120이내인 상태에서 이전을 눌렀을 때 110으로 넘어가게 처리 (처리 후 보이는 페이지는 10)\n글이 10만개가 있다고 해도\n페이징 처리에 필요한 변수들 # int perPage=5; //한페이지당 보여지는 게시글의 갯수 int totalCount=0; //총 개시글의 개수 int totalPage;//총페이지수 int startNum;//각페이지당 보여지는 글의 시작번호 int endNum; int perBlock=5; //한블럭당 보여지는 페이지의 개수 int startPage; //각블럭당 보여지는 페이지의 시작번호 int endPage; 페이징 처리에 필요한 로직 # endPage \u0026lt; totalPage 조건 걸어주기 (endPage가 10의 배수가 아닐 경우)\nstartNum 페이지 첫번째 게시물 번호\n현재페이지의 기준으로 startPage와 endPage를 구하는 공식\nstartPage = (currentPage - 1) / perBlock*perBlock + 1; endPage = startPage + perBlock - 1; endPage \u0026gt; totalPage : 더이상 글이 없다는 의미 startNum = (currentPage - 1 ) * perPage; board 출력 및 INSERT # mapper \u0026lt;select id=\u0026#34;totalCountOfBoard\u0026#34; resultType=\u0026#34;int\u0026#34;\u0026gt; SELECT COUNT(*) FROM boarddb \u0026lt;/select\u0026gt; \u0026lt;select id=\u0026#34;selectPagingOfBoard\u0026#34; parameterType=\u0026#34;Map\u0026#34; resultType=\u0026#34;BoardDto\u0026#34;\u0026gt; SELECT * FROM boarddb ORDER BY regroup DESC, restep ASC limit #{start}, #{perpage} \u0026lt;/select\u0026gt; dao public int getTotal(){ return session.selectOne(namespace+\u0026#34;totalCountOfBoard\u0026#34;); } public List\u0026lt;BoardDto\u0026gt; getList(int start, int perpage){ Map\u0026lt;String, Integer\u0026gt; map = new HashMap\u0026lt;\u0026gt;(); map.put(\u0026#34;start\u0026#34;, start); map.put(\u0026#34;perpage\u0026#34;, perpage); return session.selectList(namespace+\u0026#34;selectPagingOfBoard\u0026#34;, map); } MAX(num) #\u0026lt;select id=\u0026#34;selectMaxNumOfBoard\u0026#34; resultType=\u0026#34;int\u0026#34;\u0026gt; SELECT IFNULL(MAX(num),0) FROM boarddb \u0026lt;/select\u0026gt; public int getMaxNum(){ return session.selectOne(namespace + \u0026#34;selectMaxNumOfBoard\u0026#34;); } Service 클래스 추가 #DAO에서는 Session호출만을 담당하게 하고 로직은 Service로 보낸다.\npackage mini.service; @Service @AllArgsConstructor public class BoardService { private BoardDao boardDao; } BoardDao -\u0026gt; BoardService 로직 분리 #//BoardDao public List\u0026lt;BoardDto\u0026gt; getList(Map\u0026lt;String, Integer\u0026gt; map){ return session.selectList(namespace+\u0026#34;selectPagingOfBoard\u0026#34;, map); } //BoardService public List\u0026lt;BoardDto\u0026gt; getList(int start, int perpage){ Map\u0026lt;String, Integer\u0026gt; map = new HashMap\u0026lt;\u0026gt;(); map.put(\u0026#34;start\u0026#34;, start); map.put(\u0026#34;perpage\u0026#34;, perpage); return boardDao.getList(map); } restep 로직 #같은 글에서 전달 받은 restep보다 더 큰값을 가진 restep에 +1 해주기\nUPDATE boarddb SET restep = restep + 1 WHERE regroup = #{regroup} AND restep \u0026gt; #{restep} 부등호는 오류가 나서 다시 처리\n\u0026gt; = \u0026amp;gt;\n\u0026lt;update id=\u0026#34;updateRestepOfBoard\u0026#34; parameterType=\u0026#34;Map\u0026#34;\u0026gt; UPDATE boarddb SET restep = restep + 1 WHERE regroup = #{regroup} AND restep \u0026amp;gt; #{restep} \u0026lt;/update\u0026gt; //BoardDao public void updateRestep(Map\u0026lt;String, Integer\u0026gt; map){ session.update(namespace + \u0026#34;updateRestepOfBoard\u0026#34;, map); } //BoardService public void updateRestep(int regroup, int restep){ Map\u0026lt;String, Integer\u0026gt; map = new HashMap\u0026lt;\u0026gt;(); map.put(\u0026#34;regroup\u0026#34;, regroup); map.put(\u0026#34;restep\u0026#34;, restep); boardDao.updateRestep(map); } INSERT # mapper \u0026lt;insert id=\u0026#34;insertBoard\u0026#34; parameterType=\u0026#34;BoardDto\u0026#34;\u0026gt; INSERT INTO boarddb (writer, myid, subject, content, regroup, restep, relevel, writeday) VALUES (#{writer}, #{myid}, #{subject}, #{content}, #{regroup}, #{restep}, #{relevel}, NOW()) \u0026lt;/insert\u0026gt; public void insertBoard(BoardDto dto){ session.insert(namespace + \u0026#34;insertBoard\u0026#34;, dto); } public void insertBoard(BoardDto dto){ int num = dto.getNum(); //새글일 경우 0, 답글일 경우 0보다 큰값이 들어있다. int regroup = dto.getRegroup(); //답글을 단 글의 regroup int restep = dto.getRestep(); //답글을 단 글의 restep int relevel = dto.getRelevel(); //답글을 단 글의 relevel if(num == 0){ //새글인 경우 regroup = boardDao.getMaxNum() + 1; //새글인 경우 restep, relevel은 기본적으로 0값이 넘어오지만 확실하게 값지정해주기. restep = 0; relevel = 0; } else { //답글인 경우 //1. 그룹은 그대로 사용하므로 regroup의 값을 수정하지 않는다. //2. 그룹 중 전달받은 restep 값보다 큰 값들을 1씩 증가시킨다. this.updateRestep(regroup, restep); //3. 그 후 각각의 값에 1을 더한다. restep += 1; relevel += 1; } //4. 새로 구한값들을 다시 dto에 저장한다. dto.setRegroup(regroup); dto.setRestep(restep); dto.setRelevel(relevel); //5. db에 INSERT boardDao.insertBoard(dto); } 파일 업로드 # #BoardForm #@GetMapping(\u0026#34;/board/form\u0026#34;) //새글일 경우 기본값이 1로 들어가게 public String form(Model model, @RequestParam(defaultValue = \u0026#34;1\u0026#34;) int currentPage, @RequestParam(defaultValue = \u0026#34;0\u0026#34;) int num, @RequestParam(defaultValue = \u0026#34;0\u0026#34;) int regroup, @RequestParam(defaultValue = \u0026#34;0\u0026#34;) int restep, @RequestParam(defaultValue = \u0026#34;0\u0026#34;) int relevel){ //위 다섯개를 모델에 담아서 히든으로 넘겨야함. model.addAttribute(\u0026#34;currentPage\u0026#34;, currentPage); model.addAttribute(\u0026#34;num\u0026#34;, num); model.addAttribute(\u0026#34;regroup\u0026#34;, regroup); model.addAttribute(\u0026#34;restep\u0026#34;, restep); model.addAttribute(\u0026#34;relevel\u0026#34;, relevel); //답글일 경우 제목 가져오기 String subject = \u0026#34;\u0026#34;; if(num \u0026gt; 0){ subject = boardService.getData(num).getSubject(); } model.addAttribute(\u0026#34;subject\u0026#34;, subject); return \u0026#34;board/boardform\u0026#34;; } boardform.jsp 히든 처리 #\u0026lt;!--hidden start--\u0026gt; \u0026lt;input type=\u0026#34;hidden\u0026#34; name = \u0026#34;currentPage\u0026#34; value = \u0026#34;${currentPage}\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;hidden\u0026#34; name = \u0026#34;num\u0026#34; value = \u0026#34;${num}\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;hidden\u0026#34; name = \u0026#34;regroup\u0026#34; value = \u0026#34;${regroup}\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;hidden\u0026#34; name = \u0026#34;restep\u0026#34; value = \u0026#34;${restep}\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;hidden\u0026#34; name = \u0026#34;relevel\u0026#34; value = \u0026#34;${relevel}\u0026#34;\u0026gt; \u0026lt;!--hidden end--\u0026gt; 파일 저장 # 파일 저장 로직을 할 클래스 불러오기 @Autowired private BoardFileService boardFileService; @PostMapping(\u0026#34;/board/addboard\u0026#34;) public String addBoard( @ModelAttribute BoardDto dto, @RequestParam String currentPage, @RequestParam List\u0026lt;MultipartFile\u0026gt; upload, HttpServletRequest request, HttpSession session){ //boarddb에 저장할 로그인 정보 String myid = (String) session.getAttribute(\u0026#34;myid\u0026#34;); String writer = (String) session.getAttribute(\u0026#34;myname\u0026#34;); //dto에 넣기 dto.setMyid(myid); dto.setWriter(writer); //BoardDto먼저 저장 boardService.insertBoard(dto); //selectKey:num값 넘어왔는지 확인 System.out.println(\u0026#34;num\u0026#34; + dto.getNum()); //사진 업로드 //사진 업로드를 안했을 경우 리스트의 첫 데이터의 파일명이 빈문자열이 된다. (NULL이 아님) //즉 업로드를 했을 경우에만 db에 저장 String path = request.getSession().getServletContext().getRealPath(\u0026#34;resources/upload\u0026#34;); if(!upload.get(0).getOriginalFilename().equals(\u0026#34;\u0026#34;)){ String fileName = \u0026#34;\u0026#34;; for(MultipartFile multi : upload){ fileName = UUID.randomUUID().toString(); try { multi.transferTo(new File(path + \u0026#34;/\u0026#34; + fileName)); BoardFileDto fdto = new BoardFileDto(); fdto.setNum(dto.getNum()); fdto.setPhotoname(fileName); boardFileService.insertPhoto(fdto); } catch (IllegalStateException e) { throw new RuntimeException(e); } catch (IOException e) { throw new RuntimeException(e); } } } // 현재값을 보내기 return \u0026#34;redirect:list?currentPage=\u0026#34; + currentPage; } AUTO_INCREMENT 되는 번호를 받아오는 방법 #BoardMapper에서 insert를 할 때 selectKey로 num값을 받아올 수 있다.\n(또는 Max를 사용하는 방법도 있긴함.)\n\u0026lt;insert id=\u0026#34;insertBoard\u0026#34; parameterType=\u0026#34;BoardDto\u0026#34;\u0026gt; INSERT INTO boarddb (writer, myid, subject, content, regroup, restep, relevel, writeday) VALUES (#{writer}, #{myid}, #{subject}, #{content}, #{regroup}, #{restep}, #{relevel}, NOW()) \u0026lt;!--방금 insert 된 num을 넣어주는 작업--\u0026gt; \u0026lt;selectKey keyProperty=\u0026#34;num\u0026#34; resultType=\u0026#34;int\u0026#34; order=\u0026#34;AFTER\u0026#34;\u0026gt; SELECT LAST_INSERT_ID() \u0026lt;/selectKey\u0026gt; \u0026lt;/insert\u0026gt; //BoardDto 저장 후 boardService.insertBoard(dto); //selectKey:num값 넘어왔는지 확인 System.out.println(\u0026#34;num\u0026#34; + dto.getNum()); 이렇게 num값이 넘어온다.\n페이징 #@GetMapping(\u0026#34;/board/list\u0026#34;) //currentPage값이 없을 때는 1 페이지로 가도록 설정 public String list(Model model, @RequestParam(defaultValue = \u0026#34;1\u0026#34;) int currentPage) { int perPage = 3; //한페이지당 보여지는 게시글의 갯수 int totalCount = 0; //총 개시글의 개수 int totalPage; //총페이지수 int startNum; //각페이지당 보여지는 글의 시작번호 //int endNum; mysql은 필요없음 (오라클에서만 필요) int perBlock = 3; //한블럭당 보여지는 페이지의 개수 int startPage; //각블럭당 보여지는 페이지의 시작번호 int endPage; //총 글갯수 totalCount = boardService.getTotalCount(); //총페이지수,나머지가 있으면 무조건올림 //총게시글이 37-한페이지 3-12.3333....13페이지 totalPage = totalCount / perPage + (totalCount % perPage \u0026gt; 0 ? 1 : 0); //각블럭의 시작페이지와 끝페이지 startPage = (currentPage - 1) / perBlock * perBlock + 1; endPage = startPage + perBlock - 1; //endPage는 totalPage를 넘지않도록 한다 if (endPage \u0026gt; totalPage){ endPage = totalPage; } //각 페이지당 불러올 글의 번호(10개 기준) //1페이지:0~9 2페이지:10~19 3페이지:20-29 startNum = (currentPage - 1) * perPage; //각 페이지의 시작 번호 int no = totalCount - (currentPage - 1) * perPage; //해당페이지에 보여줄 게시판 목록 (Mysql은 endNum대신에 perPage를 보내면된다.) List\u0026lt;BoardDto\u0026gt; list = boardService.getList(startNum, perPage); //request 에 담을 값들 model.addAttribute(\u0026#34;list\u0026#34;, list); model.addAttribute(\u0026#34;totalCount\u0026#34;, totalCount); model.addAttribute(\u0026#34;totalPage\u0026#34;, totalPage); model.addAttribute(\u0026#34;startPage\u0026#34;, startPage); model.addAttribute(\u0026#34;endPage\u0026#34;, endPage); model.addAttribute(\u0026#34;currentPage\u0026#34;, currentPage); model.addAttribute(\u0026#34;no\u0026#34;, no); return \u0026#34;board/boardlist\u0026#34;; } 제목 영역 #답글일 때마다 들여쓰기를 한다.\n\u0026lt;!--제목 : 답글 레벨 1당 두칸 띄우기 --\u0026gt; \u0026lt;c:forEach begin=\u0026#34;1\u0026#34; end = \u0026#34;${dto.relevel}\u0026#34;\u0026gt; \u0026amp;nbsp;\u0026amp;nbsp;\u0026amp;nbsp;\u0026amp;nbsp; \u0026lt;/c:forEach\u0026gt; \u0026lt;!--답글일 경우에만 아이콘 출력 (relevel이 0 보다 큰 경우)--\u0026gt; \u0026lt;c:if test = \u0026#34;${dto.relevel \u0026gt; 0}\u0026#34;\u0026gt; \u0026lt;img src = \u0026#34;../res/photo/re.png\u0026#34;\u0026gt; \u0026lt;/c:if\u0026gt; \u0026lt;!--제목 표시--\u0026gt; \u0026lt;a href=\u0026#34;./content?num=${dto.num}\u0026amp;currentPage=${currentPage}\u0026#34;\u0026gt; ${dto.subject} \u0026lt;/a\u0026gt; 게시물 페이지 번호 처리 #아래 model로 보낸 값들을 이용해서 처리한다.\nmodel.addAttribute(\u0026#34;totalCount\u0026#34;, totalCount); model.addAttribute(\u0026#34;totalPage\u0026#34;, totalPage); model.addAttribute(\u0026#34;startPage\u0026#34;, startPage); model.addAttribute(\u0026#34;endPage\u0026#34;, endPage); model.addAttribute(\u0026#34;currentPage\u0026#34;, currentPage); \u0026lt;!--\u0026#39;이전\u0026#39; 시작--\u0026gt; \u0026lt;c:if test = \u0026#34;${startPage \u0026gt; 3 }\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;./list?currentPage=${startPage - 1}\u0026#34;\u0026gt;이전\u0026lt;/a\u0026gt; \u0026lt;/c:if\u0026gt; \u0026lt;!--\u0026#39;이전\u0026#39; 끝--\u0026gt; \u0026lt;c:forEach var = \u0026#34;pno\u0026#34; begin=\u0026#34;${startPage}\u0026#34; end=\u0026#34;${endPage}\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;./list?currentPage=${pno}\u0026#34;\u0026gt; \u0026lt;c:if test = \u0026#34;${pno == currentPage}\u0026#34;\u0026gt; \u0026lt;span style=\u0026#34;color:sienna;font-weight: bold\u0026#34;\u0026gt;${pno}\u0026lt;/span\u0026gt; \u0026lt;/c:if\u0026gt; \u0026lt;c:if test = \u0026#34;${pno != currentPage}\u0026#34;\u0026gt; \u0026lt;span style=\u0026#34;color:gray;\u0026#34;\u0026gt;${pno}\u0026lt;/span\u0026gt; \u0026lt;/c:if\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;/c:forEach\u0026gt; \u0026lt;!--\u0026#39;다음\u0026#39; 시작--\u0026gt; \u0026lt;c:if test = \u0026#34;${endPage \u0026lt; totalPage}\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;./list?currentPage=${endPage + 1}\u0026#34;\u0026gt;다음\u0026lt;/a\u0026gt; \u0026lt;/c:if\u0026gt; \u0026lt;!--\u0026#39;다음\u0026#39; 끝--\u0026gt; ","date":"2023-11-23","permalink":"/devl/spring/014/","section":"Developer Course","summary":"계층형게시판에 대한 이해 #원글의 답글 \u0026gt; 답글의 답글","title":"미니 프로젝트 #4"},{"content":"로그인 #tilesdef.xml #로그인 영역 경로 삽입\n\u0026lt;definition name = \u0026#34;layout1\u0026#34; template=\u0026#34;/WEB-INF/layout/layout1.jsp\u0026#34;\u0026gt; .... \u0026lt;!--아래 로그인 영역 추가 코드 --\u0026gt; \u0026lt;put-attribute name=\u0026#34;login\u0026#34; value = \u0026#34;/WEB-INF/login/loginmain.jsp\u0026#34;/\u0026gt; \u0026lt;/definition\u0026gt; memberMapper.xml #로그인 정보가 맞는지 확인\n\u0026lt;select id=\u0026#34;loginCheck\u0026#34; parameterType=\u0026#34;Map\u0026#34; resultType=\u0026#34;int\u0026#34;\u0026gt; SELECT COUNT(*) FROM memberdb WHERE myid = #{myid} and pass = #{pass} \u0026lt;/select\u0026gt; MemberDao #boolean으로 일치여부 정보 반환\npublic boolean isLoginCheck(String myid, String pass){ Map\u0026lt;String, String\u0026gt; map = new HashMap\u0026lt;\u0026gt;(); map.put(\u0026#34;myid\u0026#34;, myid); map.put(\u0026#34;pass\u0026#34;, pass); int n = session.selectOne(nameSpace + \u0026#34;loginCheck\u0026#34;, map); return n == 0 ? false : true; } 회원 정보 얻기 #memberMapper.xml #id로 조회하거나 num으로 조회할 경우를 생각해서 작성\n\u0026lt;select id=\u0026#34;selectDataById\u0026#34; parameterType=\u0026#34;String\u0026#34; resultType=\u0026#34;MemberDto\u0026#34;\u0026gt; SELECT * FROM memberdb WHERE myid = #{myid} \u0026lt;/select\u0026gt; \u0026lt;select id=\u0026#34;selectDataByNum\u0026#34; parameterType=\u0026#34;int\u0026#34; resultType=\u0026#34;MemberDto\u0026#34;\u0026gt; SELECT * FROM memberdb WHERE num = #{num} \u0026lt;/select\u0026gt; MemberDao #메서드 오버로딩 처리\npublic MemberDto getData(String myid){ return session.selectOne(nameSpace + \u0026#34;selectDataById\u0026#34;, myid); } public MemberDto getData(int num){ return session.selectOne(nameSpace + \u0026#34;selectDataByNum\u0026#34;, num); } 이미지 #memberMapper.xml #세션에서 num또는 id로 받아올 수 있도록 두개를 모두 작성\n\u0026lt;update id = \u0026#34;updatePhotoByNum\u0026#34; parameterType=\u0026#34;Map\u0026#34;\u0026gt; update memberdb SET photo = #{photo} WHERE num = #{num} \u0026lt;/update\u0026gt; \u0026lt;update id = \u0026#34;updatePhotoById\u0026#34; parameterType=\u0026#34;Map\u0026#34;\u0026gt; update memberdb SET photo = #{photo} WHERE myid = #{myid} \u0026lt;/update\u0026gt; MemberDao #public void updatePhoto(String photo, int num){ Map\u0026lt;String,Object\u0026gt; map = new HashMap\u0026lt;\u0026gt;(); map.put(\u0026#34;photo\u0026#34;,photo); map.put(\u0026#34;num\u0026#34;,num); session.update(nameSpace + \u0026#34;updatePhotoByNum\u0026#34;, map); } public void updatePhoto(String photo, String myid){ Map\u0026lt;String,Object\u0026gt; map = new HashMap\u0026lt;\u0026gt;(); map.put(\u0026#34;photo\u0026#34;,photo); map.put(\u0026#34;myid\u0026#34;,myid); session.update(nameSpace + \u0026#34;updatePhotoById\u0026#34;, map); } Session # 로그인 성공 시 세션에 등록할 정보 세션 값 loginok yes saveid yes/no myid 아이디 myname 이름 login html #\u0026lt;c:if test = \u0026#34;${sessionScope.loginok == null}\u0026#34;\u0026gt; \u0026lt;span style=\u0026#34;width: 100px; cursor: pointer\u0026#34; data-bs-toggle=\u0026#34;modal\u0026#34; data-bs-target=\u0026#34;#myLoginModal\u0026#34; \u0026gt;로그인\u0026lt;/span\u0026gt; \u0026lt;/c:if\u0026gt; LoginController #@Autowired private MemberDao memberDao; 로그인 메서드를 설정했을 때 \u0026rsquo;true\u0026rsquo;가 오면 로그인 성공 세션정보 3가지 전달 (loginok, saveid, myid) myname의 값은 myid로부터 dao로 접근해서 구해온다. map으로 리턴해서 로그인 실패, 성공을 상태를 전달한다. @GetMapping(\u0026#34;/login/process\u0026#34;) @ResponseBody Map\u0026lt;String, Object\u0026gt; login(@RequestParam boolean saveid, @RequestParam String myid, @RequestParam String pass, HttpSession session){ Map\u0026lt;String, Object\u0026gt; map = new HashMap\u0026lt;\u0026gt;(); boolean bLogin = memberDao.isLoginCheck(myid, pass); if(bLogin){ //세션 유지시간 (기본 30분) session.setMaxInactiveInterval(60*60*60); // 6시간 유지 //로그인 성공시 세션에 저장할 내용들 session.setAttribute(\u0026#34;loginok\u0026#34;, \u0026#34;yes\u0026#34;); session.setAttribute(\u0026#34;saveid\u0026#34;, saveid ? \u0026#34;yes\u0026#34; : \u0026#34;no\u0026#34;); session.setAttribute(\u0026#34;myid\u0026#34;, myid); //아이디에 해당하는 이름 얻어서 세션에 저장 String myname = memberDao.getData(myid).getName(); session.setAttribute(\u0026#34;myname\u0026#34;, myname); //아이디에 해당하는 사진 얻기 String myphoto = memberDao.getData(myid).getPhoto(); session.setAttribute(\u0026#34;myphoto\u0026#34;, myphoto); //map에는 성공인지 실패인지 전달한다. map.put(\u0026#34;success\u0026#34;, true); } else { //실패일 경우 전달 map.put(\u0026#34;success\u0026#34;, false); } return map; } header.jsp에 로그인 및 세션정보 불러오기 # $(\u0026#34;#btnlogin\u0026#34;).click(function (){ let saveid = $(\u0026#34;#saveid\u0026#34;).is(\u0026#34;:checked\u0026#34;); let myid = $(\u0026#34;#myid\u0026#34;).val(); let pass = $(\u0026#34;#pass\u0026#34;).val(); //alert(saveid + \u0026#34;,\u0026#34;+myid); $.ajax({ type:\u0026#34;get\u0026#34;, dataType:\u0026#34;json\u0026#34;, url:\u0026#34;${root}/login/process\u0026#34;, data : {\u0026#34;saveid\u0026#34;: saveid, \u0026#34;myid\u0026#34;: myid, \u0026#34;pass\u0026#34;: pass}, success:function (res){ //성공여부 res.success if(res.success) { $(\u0026#34;#btnclose\u0026#34;).trigger(\u0026#34;click\u0026#34;); //강제로 닫기 버튼 클릭하기 location.reload(); } else { alert(\u0026#34;아이디나 비밀번호가 맞지 않습니다.\u0026#34;) } } }) }); 로그아웃 #LoginController #@GetMapping(\u0026#34;/login/logout\u0026#34;) @ResponseBody public void logout(HttpSession session){ session.removeAttribute(\u0026#34;loginok\u0026#34;); } header.jsp에 로그아웃 # $(\u0026#34;#btnlogout\u0026#34;).click(function (){ $.ajax({ type:\u0026#34;get\u0026#34;, dataType:\u0026#34;text\u0026#34;, url:\u0026#34;${root}/login/logout\u0026#34;, //현재폴더이므로 별고 설정없이. success:function (res){ location.reload(); } }) ; }); 아이디 저장 # saveid 세션값을 이용 1. 체크박스 처리 #\u0026lt;input type=\u0026#34;checkbox\u0026#34; id=\u0026#34;saveid\u0026#34; style=\u0026#34;margin-right: 5px; margin-bottom: 10px\u0026#34; \u0026lt;c:if test = \u0026#34;${sessionScope.saveid != \u0026#39;yes\u0026#39;}\u0026#34;\u0026gt; \u0026gt; \u0026lt;/c:if\u0026gt; \u0026lt;c:if test = \u0026#34;${sessionScope.saveid == \u0026#39;yes\u0026#39;}\u0026#34;\u0026gt; checked\u0026gt; \u0026lt;/c:if\u0026gt; 2. input value 처리 #\u0026lt;input type=\u0026#34;text\u0026#34; id=\u0026#34;myid\u0026#34; class = \u0026#34;form-control\u0026#34; style=\u0026#34;margin-bottom: 10px\u0026#34; \u0026lt;c:if test = \u0026#34;${sessionScope.saveid != \u0026#39;yes\u0026#39;}\u0026#34;\u0026gt; \u0026gt; \u0026lt;/c:if\u0026gt; \u0026lt;c:if test = \u0026#34;${sessionScope.saveid == \u0026#39;yes\u0026#39;}\u0026#34;\u0026gt; value=\u0026#34;${sessionScope.myid}\u0026#34;\u0026gt; \u0026lt;/c:if\u0026gt; 프로필 사진 업데이트 #LoginController #@PostMapping(\u0026#34;/login/photochange\u0026#34;) @ResponseBody Map\u0026lt;String, String\u0026gt; photoChange(@RequestParam MultipartFile upload, HttpSession session, HttpServletRequest request){ //현재 로그인한 아이디 얻기 String myid = (String)session.getAttribute(\u0026#34;myid\u0026#34;); //업데이트 사진 보낼 String path = request.getSession().getServletContext().getRealPath(\u0026#34;/resources/upload\u0026#34;); //랜덤 파일명 얻기 String fileName = UUID.randomUUID().toString(); try { upload.transferTo(new File(path + \u0026#34;/\u0026#34; + filename)); }catch (IllegalStateException e) { throw new RuntimeException(e); } catch (IOException e) { throw new RuntimeException(e); } memberDao.updatePhoto(fileName, myid); Map\u0026lt;String, String\u0026gt; map = new HashMap\u0026lt;\u0026gt;(); map.put(\u0026#34;filename\u0026#34;, fileName); return map; } header.jsp #\u0026lt;img class=\u0026#34;profile_photo\u0026#34; src = \u0026#34;${root}/res/upload/${sessionScope.myphoto}\u0026#34; style=\u0026#34;width: 40px;border-radius: 100px; border: 1px solid gray; margin-right: 10px\u0026#34;\u0026gt; \u0026lt;span style=\u0026#34;font-size: 16px;font-weight: 400;cursor: pointer\u0026#34; class=\u0026#34;photochange\u0026#34;\u0026gt;⚙️\u0026lt;/span\u0026gt; \u0026lt;input type=\u0026#34;file\u0026#34; id = \u0026#34;profile_upload\u0026#34; style=\u0026#34;display: none;\u0026#34;\u0026gt; $(\u0026#34;.photochange\u0026#34;).click(function (){ $(\u0026#34;#profile_upload\u0026#34;).trigger(\u0026#34;click\u0026#34;); }) $(\u0026#34;#profile_upload\u0026#34;).change(function (){ let form = new FormData(); form.append(\u0026#34;upload\u0026#34;, $(\u0026#34;#profile_upload\u0026#34;)[0].files[0]); $.ajax({ type:\u0026#34;post\u0026#34;, dataType:\u0026#34;json\u0026#34;, url:\u0026#34;${root}/login/photochange\u0026#34;, processData : false, contentType : false, data:form, success:function (res){ $(\u0026#34;.profile_photo\u0026#34;).attr(\u0026#34;src\u0026#34;, `${root}/res/upload/\\${res.fileName}`); location.reload(); } }); }) ","date":"2023-11-22","permalink":"/devl/spring/013/","section":"Developer Course","summary":"로그인 #tilesdef.","title":"미니 프로젝트 #3"},{"content":"memberdb 만들기 # Service # Service : 로직처리를 담당\n호출 순서\nController에서 → Service 호출 Service에서 → DAO호출 DAO에서 → Mapper호출 Controller → Service → DAO → Mapper\n일반적으로 스프링에서 DAO는 Interface로 만듦. MemberController # @RequiredArgsConstructor 사용할 경우 @NonNull 어노테이션이 있는 항목만 주입을 시킴 @Controller @RequiredArgsConstructor //----- ① 이 어노테이션 주입 시 public class MemberController { @NonNull //----- ② NonNull이 붙은 항목만 주입이 됨. private MemberDao memberDao;// Service가 있을 경우 이 자리에 Service를 넣어주면 됨. @GetMapping(\u0026#34;/member/form\u0026#34;) public String member(){ return \u0026#34;member/memberform\u0026#34;; } @GetMapping(\u0026#34;/member/list\u0026#34;) public String memberList(Model model){ int totalCount = memberDao.getTotalCount(); model.addAttribute(\u0026#34;totalCount\u0026#34;, totalCount); return \u0026#34;member/memberlist\u0026#34;; } } 회원가입 #회원가입 폼 작성 #\u0026lt;table class=\u0026#34;table table-bordered\u0026#34; style=\u0026#34;width: 500px; margin : 30px;\u0026#34;\u0026gt; \u0026lt;caption align=\u0026#34;top\u0026#34;\u0026gt;\u0026lt;b\u0026gt;회원가입\u0026lt;/b\u0026gt;\u0026lt;/caption\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td rowspan=\u0026#34;4\u0026#34; width=\u0026#34;150\u0026#34; align=\u0026#34;center\u0026#34;\u0026gt; \u0026lt;img id=\u0026#34;showimg\u0026#34; style=\u0026#34;width: 150px; height: 150px;\u0026#34; src=\u0026#34;../res/photo/noimage.png\u0026#34;\u0026gt;\u0026lt;br\u0026gt; \u0026lt;!--onclick : 버튼을 클릭하면 id가 \u0026#34;upload\u0026#34;인 폼을 클릭하는 효과를 줌 --\u0026gt; \u0026lt;button type=\u0026#34;button\u0026#34; class=\u0026#34;btn btn-secondary\u0026#34; onclick=\u0026#34;$(\u0026#39;#upload\u0026#39;).trigger(\u0026#39;click\u0026#39;)\u0026#34;\u0026gt;사진선택\u0026lt;/button\u0026gt; \u0026lt;input type=\u0026#34;file\u0026#34; name=\u0026#34;upload\u0026#34; id=\u0026#34;upload\u0026#34; style=\u0026#34;display: none;\u0026#34;\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;td width=\u0026#34;100\u0026#34;\u0026gt;이름\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt; \u0026lt;input type = \u0026#34;text\u0026#34; class=\u0026#34;form-control\u0026#34; required = \u0026#34;required\u0026#34; autofocus=\u0026#34;autofocus\u0026#34; name=\u0026#34;name\u0026#34;\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td rowspan=\u0026#34;2\u0026#34;\u0026gt;비밀번호\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;input type=\u0026#34;password\u0026#34; name = \u0026#34;pass\u0026#34; id = \u0026#34;pass1\u0026#34; class = \u0026#34;form-control\u0026#34; required=\u0026#34;required\u0026#34;\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt; \u0026lt;input type=\u0026#34;password\u0026#34; id = \u0026#34;pass2\u0026#34; class=\u0026#34;form-control\u0026#34;\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;핸드폰\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; class=\u0026#34;form-control\u0026#34; name = \u0026#34;hp\u0026#34; required=\u0026#34;required\u0026#34;\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;이메일\u0026lt;/td\u0026gt; \u0026lt;td colspan=\u0026#34;2\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;email\u0026#34; class=\u0026#34;form-control\u0026#34; name = \u0026#34;email\u0026#34;\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;회원가입\u0026lt;/td\u0026gt; \u0026lt;td colspan=\u0026#34;3\u0026#34; align=\u0026#34;center\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; class=\u0026#34;btn btn-secondary\u0026#34;\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/table\u0026gt; 비밀번호 검증 #function check(){ let pass1 = $(\u0026#34;#pass1\u0026#34;).val(); let pass2 = $(\u0026#34;#pass2\u0026#34;).val(); if(pass1 === pass2){ return true; } else { alert(\u0026#34;비밀번호가 맞지 않습니다.\u0026#34;) return false; } } onsubmit=\u0026quot;return check()\u0026quot; 추가 \u0026lt;form action=\u0026#34;./addmember\u0026#34; method=\u0026#34;post\u0026#34; enctype=\u0026#34;multipart/form-data\u0026#34; onsubmit=\u0026#34;return check()\u0026#34;\u0026gt; 이미지 미리보기 코드 #$(\u0026#34;#upload\u0026#34;).change(function () { //정규표현식 var reg = /(.*?)\\/(jpg|jpeg|png|bmp)$/; var f = $(this)[0].files[0];//현재 선택한 파일 if (!f.type.match(reg)) { alert(\u0026#34;확장자가 이미지파일이 아닙니다\u0026#34;); return; } if ($(this)[0].files[0]) { var reader = new FileReader(); reader.onload = function (e) { $(\u0026#34;#showimg\u0026#34;).attr(\u0026#34;src\u0026#34;, e.target.result); } reader.readAsDataURL($(this)[0].files[0]); } }); 검색 쿼리 작성 # 이름 or 휴대폰 or 이메일 등으로 검색할 수 있게 하기 변수명이 컬럼일 경우 $를 붙이고 값일 경우에는 #을 붙인다. ${searchfield} : 필드 타입 (이름인지, 휴대폰인지 등) #{searchword} : 검색값 memberMapper.xml #\u0026lt;select id=\u0026#34;selectAllMembers\u0026#34; resultType=\u0026#34;MemberDto\u0026#34; parameterType=\u0026#34;Map\u0026#34;\u0026gt; SELECT * FROM memberdb \u0026lt;if test = \u0026#34;searchword! = null\u0026#34;\u0026gt; WHERE ${searchfield} like concat(\u0026#39;%\u0026#39;, #{searchword}, \u0026#39;%\u0026#39;) \u0026lt;/if\u0026gt; ORDER BY num DESC \u0026lt;/select\u0026gt; MemberDao #public List\u0026lt;MemberDto\u0026gt; getSearchMember(String field, String word){ //mapper 에서 \u0026#34;searchword가 null 이 아니면\u0026#34;이라는 조건이 있기 때문에 //word의 길이가 0일 경우 null로 반환해준다. word = word == null || word.length() == 0 ? null : word; Map\u0026lt;String, String\u0026gt; map = new HashMap\u0026lt;\u0026gt;(); map.put(\u0026#34;searchfield\u0026#34;,field); map.put(\u0026#34;searchword\u0026#34;,word); return session.selectList(nameSpace + \u0026#34;selectAllMembers\u0026#34;, map); } id 컬럼 추가 # mapper - insert 수정 #\u0026lt;insert id=\u0026#34;insertMember\u0026#34; parameterType=\u0026#34;MemberDto\u0026#34;\u0026gt; INSERT INTO memberdb (name, myid, pass, photo, hp, email, gaipday) VALUES (#{name}, #{myid}, #{pass}, #{photo}, #{hp}, #{email}, now()) \u0026lt;/insert\u0026gt; id 폼추가 #\u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;아이디\u0026lt;/td\u0026gt; \u0026lt;td class = \u0026#34;input-group\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; name = \u0026#34;myid\u0026#34; id = \u0026#34;myid\u0026#34; class = \u0026#34;form-control\u0026#34; required=\u0026#34;required\u0026#34;\u0026gt; \u0026lt;button type=\u0026#34;button\u0026#34; class = \u0026#34;btn btn-danger btn-sm\u0026#34; id = \u0026#34;btnidcheck\u0026#34;\u0026gt;중복체크\u0026lt;/button\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; id 스크립트 #//전역변수 주기 let idok = false; //전송 시 중복체크 if(!idok){ alert(\u0026#34;중복체크 버튼을 눌러주세요.\u0026#34;); return false; } //아이디 입력 시 발생하는 이벤트 $(\u0026#34;#myid\u0026#34;).keyup(function (){ idok = false; }); if(!idok){ alert(\u0026#34;중복체크 버튼을 눌러주세요.\u0026#34;); return false; } let pass1 = $(\u0026#34;#pass1\u0026#34;).val(); let pass2 = $(\u0026#34;#pass2\u0026#34;).val(); if (pass1 == pass2) { return true; } else { alert(\u0026#34;비밀번호가 맞지 않습니다.\u0026#34;) return false; } 계층형 게시판 기본 세팅 # db를 2개 추가로 만든다. QUERY #CREATE TABLE boarddb( num SMALLINT AUTO_INCREMENT PRIMARY KEY, writer VARCHAR(20), myid VARCHAR(20), subject VARCHAR(1000), content VARCHAR(3000), readcount SMALLINT DEFAULT 0, -- 계층형 게시판에 필요한 컬럼 3가지 regroup SMALLINT, restep SMALLINT, relevel SMALLINT, -- 여기까지 writeday DATETIME ); CREATE TABLE board_file( idx SMALLINT AUTO_INCREMENT PRIMARY KEY, num SMALLINT, photoname VARCHAR(100), CONSTRAINT fk_board_num FOREIGN KEY (num) REFERENCES boarddb(num) ); Dto #Dto 클래스 #@Data public class BoardDto { private int num; private String writer; private String myid; private String subject; private String content; private int readcount; private int regroup; private int restep; private int relevel; private List\u0026lt;String\u0026gt; photoNames; private Timestamp writeday; } @Data public class BoardFileDto { private int idx; private int num; private String photoName; } 그 외 세팅 # mybatis-config.xml 각 DTO 추가 BoardMapper.xml, BoardFileMapper.xml 만들기 각 Dao 클래스 파일 만들기 ","date":"2023-11-21","permalink":"/devl/spring/012/","section":"Developer Course","summary":"memberdb 만들기 # Service # Service : 로직처리를 담당","title":"미니 프로젝트 #2"},{"content":"레이아웃을 위한 Tiles 의존성 추가 # \u0026lt;!-- tiles start --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.apache.tiles\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;tiles-jsp\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;3.0.0\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.apache.tiles\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;tiles-core\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;3.0.5\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.apache.tiles\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;tiles-api\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;3.0.5\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- tiles end --\u0026gt; tilesdef.xml #여러 레이아웃을 만들 수 있다.\nDOCTYPE 설정 (강사님 제공) #\u0026lt;!DOCTYPE tiles-definitions PUBLIC \u0026#34;-//Apache Software Foundation//DTD Tiles Configuration 3.0//EN\u0026#34; \u0026#34;http://tiles.apache.org/dtds/tiles-config_3_0.dtd\u0026#34;\u0026gt; template : 레이아웃을 어디서 만들 것인지 경로 설정 \u0026lt;tiles-definitions\u0026gt; \u0026lt;!--template : 레이아웃을 어디서 만들 것인지 경로 설정--\u0026gt; \u0026lt;definition name = \u0026#34;layout1\u0026#34; template=\u0026#34;/WEB-INF/layout/layout1.jsp\u0026#34;\u0026gt; \u0026lt;put-attribute name=\u0026#34;header\u0026#34; value = \u0026#34;/WEB-INF/layout/header.jsp\u0026#34;/\u0026gt; \u0026lt;put-attribute name=\u0026#34;menu\u0026#34; value = \u0026#34;/WEB-INF/layout/menu.jsp\u0026#34;/\u0026gt; \u0026lt;put-attribute name=\u0026#34;info\u0026#34; value = \u0026#34;/WEB-INF/layout/info.jsp\u0026#34;/\u0026gt; \u0026lt;put-attribute name=\u0026#34;footer\u0026#34; value = \u0026#34;/WEB-INF/layout/footer.jsp\u0026#34;/\u0026gt; \u0026lt;put-attribute name=\u0026#34;home\u0026#34; value = \u0026#34;/WEB-INF/layout/home.jsp\u0026#34;/\u0026gt; \u0026lt;/definition\u0026gt; \u0026lt;/tiles-definitions\u0026gt; 매크로 설정 #레이아웃 이동을 페이지마다 설정해도 되지만 그렇게 하면 설정이 너무 길어지기 때문에 매크로를 사용한다.\nname = \u0026quot;*/*\u0026quot; : \u0026ldquo;폴더명/파일명\u0026rdquo; 이라는 뜻\nextends=\u0026quot;layout1\u0026quot; : 어느 레이아웃을 상속받을지 설정.\n\u0026lt;definition name = \u0026#34;*/*\u0026#34; extends=\u0026#34;layout1\u0026#34;\u0026gt; \u0026lt;put-attribute name=\u0026#34;home\u0026#34; value=\u0026#34;/WEB-INF/{1}/{2}.jsp\u0026#34;/\u0026gt; \u0026lt;/definition\u0026gt; 매크로를 추가할 경우 상속받을 layout2 를 만들어서 사용하면 된다.\nservlet-context.xml # 위 기본 경로를 사용하지 않고 tiles로 이동하도록 설정해줘야한다. (기존 Resolves는 삭제)\nResolver가 tiles 로 가도록 설정하는 코드 (강사님 제공) #\u0026lt;beans:bean id=\u0026#34;tilesConfigurer\u0026#34; class=\u0026#34;org.springframework.web.servlet.view.tiles3.TilesConfigurer\u0026#34;\u0026gt; \u0026lt;beans:property name=\u0026#34;definitions\u0026#34;\u0026gt; \u0026lt;beans:list\u0026gt; \u0026lt;beans:value\u0026gt;/WEB-INF/tiles/tilesdef.xml\u0026lt;/beans:value\u0026gt; \u0026lt;/beans:list\u0026gt; \u0026lt;/beans:property\u0026gt; \u0026lt;beans:property name=\u0026#34;preparerFactoryClass\u0026#34; value=\u0026#34;org.springframework.web.servlet.view.tiles3.SpringBeanPreparerFactory\u0026#34;/\u0026gt; \u0026lt;/beans:bean\u0026gt; \u0026lt;!--viewResolver가 아래로 적용되도록 설정--\u0026gt; \u0026lt;beans:bean id=\u0026#34;viewResolver\u0026#34; class=\u0026#34;org.springframework.web.servlet.view.UrlBasedViewResolver\u0026#34;\u0026gt; \u0026lt;beans:property name=\u0026#34;viewClass\u0026#34; value=\u0026#34;org.springframework.web.servlet.view.tiles3.TilesView\u0026#34;/\u0026gt; \u0026lt;/beans:bean\u0026gt; layout1.jsp #상단 영역에 tiles 설정 넣어주기\n\u0026lt;%@ taglib prefix = \u0026#34;c\u0026#34; uri=\u0026#34;http://java.sun.com/jsp/jstl/core\u0026#34; %\u0026gt; \u0026lt;%@ taglib prefix=\u0026#34;fmt\u0026#34; uri=\u0026#34;http://java.sun.com/jsp/jstl/fmt\u0026#34; %\u0026gt; \u0026lt;!-- 아래 tiles 설정을 추가로 넣어줘야 함--\u0026gt; \u0026lt;%@ taglib prefix = \u0026#34;tiles\u0026#34; uri =\u0026#34;http://tiles.apache.org/tags-tiles\u0026#34; %\u0026gt; 메인 컨테이너 설정 # tiles:insertAttribute의 name은 tilesder.xml에 정의된 name을 사용해야함 \u0026lt;div class=\u0026#34;main_container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;header\u0026#34;\u0026gt; \u0026lt;!--tilesder.xml에 정의된 name을 사용해야함--\u0026gt; \u0026lt;tiles:insertAttribute name=\u0026#34;header\u0026#34;/\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;info\u0026#34;\u0026gt; \u0026lt;tiles:insertAttribute name=\u0026#34;info\u0026#34;/\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;menu\u0026#34;\u0026gt; \u0026lt;tiles:insertAttribute name=\u0026#34;menu\u0026#34;/\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;home\u0026#34;\u0026gt; \u0026lt;tiles:insertAttribute name=\u0026#34;home\u0026#34;/\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;footer\u0026#34;\u0026gt; \u0026lt;tiles:insertAttribute name=\u0026#34;footer\u0026#34;/\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; java 패키지 설정 # 패키지 경로 servlet-context.xml에 적용 #\u0026lt;context:component-scan base-package=\u0026#34;study.spring.mini, naver.storage, mini.*\u0026#34; /\u0026gt; HomeController # 홈경로 : tilesdef.xml에 입력한 매크로 경로대로 설정해야 함.(중요!!)\n매크로의 home은 layout1 에서 home을 상속받아 재정의 해줬다고보면된다.\n\u0026lt;definition name = \u0026#34;*/*\u0026#34; extends=\u0026#34;layout1\u0026#34;\u0026gt; \u0026lt;put-attribute name=\u0026#34;home\u0026#34; value=\u0026#34;/WEB-INF/{1}/{2}.jsp\u0026#34;/\u0026gt; \u0026lt;/definition\u0026gt; {1}/{2}.jsp {1} : 경로명. 현재는 layout 폴더를 말한다. {2} : 파일명 HomeController - home() #@GetMapping(\u0026#34;/\u0026#34;) public String home() { //위 tilesdef.xml 의 매크로 name \u0026#34;layout/home\u0026#34;을 설정해준다. return \u0026#34;layout/home\u0026#34;; } 톰캣 실행 # style로 각 영역 레이아웃 위치 조정 #div.main_container div.header{ width: 100%; height: 100px; line-height: 100px; text-align: center; font-size: 30px; font-weight: bold; } div.main_container div.menu{ width: 100%; text-align: center; height: 100px; line-height: 100px; } div.main_container div.info{ position: absolute; left: 30px; top : 250px; width: 150px; height: 200px; } div.main_container div.home{ position: absolute; left: 200px; top : 200px; width : 700px; height: 550px; } div.main_container div.footer{ position: absolute; left: 0; top : 750px; width: 100%; height: 100px; line-height: 100px; text-align: center; } header.jsp #root 경로 설정 #\u0026lt;c:set var = \u0026#34;root\u0026#34; value = \u0026#34;\u0026lt;%=request.getContextPath()%\u0026gt;\u0026#34;/\u0026gt; 이미지 경로 설정 #위 var = \u0026quot;root\u0026quot; 설정을 이용해서 photo 폴더에서 이미지 불러오기\n\u0026lt;img src = \u0026#34;${root}/res/photo/1.jpg\u0026#34; width=\u0026#34;50\u0026#34; hspace=\u0026#34;20\u0026#34;\u0026gt; a 스타일 변경 #페이지 내 전체 a 태그에 적용해주기 위해 layout1.jsp 스타일에 설정해준다.\na:link, a:visited{ color : black; text-decoration: black; } a:hover{ color:darkolivegreen; } controller # 각 컨트롤러 메인페이지 설정 #@Controller public class LoginController { @GetMapping(\u0026#34;/login/main\u0026#34;) public String login(){ return \u0026#34;login/loginmain\u0026#34;; } } LoginController\nGetMapping : /login/main return : login/loginmain BoardController\nGetMapping : /board/list return : board/boardlist GuestController\nGetMapping : /guest/list return : guest/guestlist MemberController\nGetMapping : /member/form return : member/memberform map.jsp 추가 #HomeController #@GetMapping(\u0026#34;/map\u0026#34;) public String map(){ return \u0026#34;layout/map\u0026#34;; } \u0026lt;iframe src=\u0026#34;https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d6330.384154535663!2d127.02658039724523!3d37.50338768821974!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x357ca194d4bb162f%3A0x9612cf895f23eaca!2z67mE7Yq47Lqg7ZSEIOqwleuCqOuzuOybkA!5e0!3m2!1sko!2skr!4v1700464846722!5m2!1sko!2skr\u0026#34; width=\u0026#34;600\u0026#34; height=\u0026#34;450\u0026#34; style=\u0026#34;border:0;\u0026#34; allowfullscreen=\u0026#34;\u0026#34; loading=\u0026#34;lazy\u0026#34; referrerpolicy=\u0026#34;no-referrer-when-downgrade\u0026#34;\u0026gt;\u0026lt;/iframe\u0026gt; menu 목록 만들기 #\u0026lt;c:set var=\u0026#34;root\u0026#34; value=\u0026#34;\u0026lt;%=request.getContextPath()%\u0026gt;\u0026#34;/\u0026gt; \u0026lt;body\u0026gt; \u0026lt;ul class=\u0026#34;menu\u0026#34;\u0026gt; \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;${root}/\u0026#34;\u0026gt;HOME\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;${root}/member/form\u0026#34;\u0026gt;JOIN\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;${root}/board/list\u0026#34;\u0026gt;BOARD\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;${root}/guest/list\u0026#34;\u0026gt;GUEST BOOK\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;${root}/map\u0026#34;\u0026gt;LOCATION\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/body\u0026gt; ","date":"2023-11-20","permalink":"/devl/spring/011/","section":"Developer Course","summary":"레이아웃을 위한 Tiles 의존성 추가 # \u0026lt;!","title":"미니 프로젝트 #1"},{"content":"메모 삭제 #1. #\u0026lt;delete id=\u0026#34;deleteMemo\u0026#34; parameterType=\u0026#34;int\u0026#34;\u0026gt; DELETE FROM memodb WHERE num = #{num} \u0026lt;/delete\u0026gt; 2. #public void deleteMemo(int num) { session.delete(nameSpace + \u0026#34;deleteMemo\u0026#34;, num); } 3. #@GetMapping(\u0026#34;/memo/delete\u0026#34;) public void memoDelete(@RequestParam int num){ memoDao.deleteMemo(num); } 4. #//삭제 아이콘 \u0026lt;a href=\u0026#34;#\u0026#34; class = \u0026#34;memodel\u0026#34; num = \u0026#34;\\${item.num}\u0026#34; style=\u0026#34;cursor: pointer; color: red;\u0026#34;\u0026gt;삭제\u0026lt;/a\u0026gt; //메인 함수 내 $(document).on(\u0026#34;click\u0026#34;,\u0026#34;.memodel\u0026#34;, function (){ let num = $(this).attr(\u0026#34;num\u0026#34;); let a = confirm(\u0026#34;삭제하려면 확인\u0026#34;); if(a){ $.ajax({ type:\u0026#34;get\u0026#34;, dataType:\u0026#34;text\u0026#34;, url:\u0026#34;./delete\u0026#34;, data : {\u0026#34;num\u0026#34;:num}, success:function (res){ list(); } }) ; } }); 추천수 증가 #1. #\u0026lt;update id=\u0026#34;updateLikesByNum\u0026#34; parameterType=\u0026#34;int\u0026#34;\u0026gt; UPDATE memodb set likes = likes + 1 WHERE num = #{num} \u0026lt;/update\u0026gt; \u0026lt;select id=\u0026#34;countLikes\u0026#34; parameterType=\u0026#34;int\u0026#34; resultType=\u0026#34;int\u0026#34;\u0026gt; SELECT likes FROM memodb WHERE num = #{num} \u0026lt;/select\u0026gt; 2. #public void updateLikes(int num) { session.update(nameSpace + \u0026#34;updateLikesByNum\u0026#34;, num); } public int getCountLikes(int num) { return session.selectOne(nameSpace + \u0026#34;countLikes\u0026#34;, num); } 3. #@GetMapping(\u0026#34;/memo/likes\u0026#34;) public Map\u0026lt;String, Integer\u0026gt; countLikes(@RequestParam int num){ //좋아요 수 증가 memoDao.updateLikes(num); //증가된 좋아요 수 얻기 int likes = memoDao.getCountLikes(num); Map\u0026lt;String, Integer\u0026gt; map = new HashMap\u0026lt;\u0026gt;(); map.put(\u0026#34;likes\u0026#34;, likes); return map; } 4. #추천수 : \u0026lt;span\u0026gt;\\${item.likes}\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026#34;increlikes\u0026#34; style = \u0026#34;cursor:pointer;\u0026#34; num = \u0026#34;\\${item.num}\u0026#34;\u0026gt;💙\u0026lt;/span\u0026gt;\u0026lt;br\u0026gt; //좋아요 수 증가 $(document).on(\u0026#34;click\u0026#34;,\u0026#34;.increlikes\u0026#34;,function (){ let num = $(this).attr(\u0026#34;num\u0026#34;); let $prev = $(this).prev(); $.ajax({ type:\u0026#34;get\u0026#34;, dataType:\u0026#34;json\u0026#34;, url:\u0026#34;./likes\u0026#34;, data : {\u0026#34;num\u0026#34;: num}, success:function (res){ $prev.text(res.likes); } }); }); 네이버 # 즐겨찾기 추가 Bucket Managment Image Optimizer Global Edge 오브젝트 스토리지 \u0026gt; 버킷 생성 \u0026gt; 버킷 이름 (bitcamp701) \u0026gt; 다음 \u0026gt; 다음 \u0026gt; 공개 \u0026gt;\n이미지옵티마이저\nBucket Managment # 이용 신청 \u0026gt; 버킷생성 누르기 *** 버키생성 과정 다시 정리하식\n새폴더 -\u0026gt; photo (더블클릭)\n들어가면 우측상단에 현재 경로가 나타난다.\n업로드 \u0026gt; [권한 및 메타 데이터 설정] \u0026gt; 모두에게 공개하기 (공개) \u0026gt; 확인\n이미지를 더블클릭하면 경로가 나온다.\nGlobal Edge 프로필 생성 # Image Optimaizer 세팅 # 얼굴 사진일 경우 얼굴을 영역을 인식해서 정사각형으로 자동으로 맞춰줌. 프로젝트 생성 쉬운입력 클릭 메모넣고 저장 네이버 연결 # # 굿어스 데이터 \u0026gt; 계정관리\n인증키 관리 \u0026gt; 액세스키 + 시크릿키 확인가능.\npom.xml 에 의존성 추가 #\u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;io.awspring.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-starter-aws\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.4.4\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.amazonaws\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;aws-java-sdk-s3\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.12.416\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; ","date":"2023-11-17","permalink":"/devl/spring/010/","section":"Developer Course","summary":"메모 삭제 #1.","title":"Memo #2"},{"content":" layout : single title : \u0026ldquo;Spring │ MEMO #1\u0026rdquo; categories : spring tag : [spring,네이버클라우드캠프] toc: true toc_sticky: true breadcrumb: true #DB 테이블 생성 #CREATE TABLE memodb( num SMALLINT AUTO_INCREMENT PRIMARY KEY, nickname VARCHAR(30), photo VARCHAR(100), memo VARCHAR(1000), likes SMALLINT DEFAULT 0, writeday DATETIME ) 파일트리 # JSON 테스트1 #@Controller public class RestTestController { @GetMapping(\u0026#34;/test/list1\u0026#34;) @ResponseBody public List\u0026lt;MemoDto2\u0026gt; list1(){ //위 어노테이션 빼먹지 말자 ! List\u0026lt;MemoDto2\u0026gt; list = new ArrayList\u0026lt;\u0026gt;(); list.add(new MemoDto2(1, \u0026#34;김나나\u0026#34;, \u0026#34;1.jpg\u0026#34;, \u0026#34;안녕하세요\u0026#34;, 5, \u0026#34;2023-10-10\u0026#34;)); list.add(new MemoDto2(1, \u0026#34;캔디바\u0026#34;, \u0026#34;2.jpg\u0026#34;, \u0026#34;히히\u0026#34;, 2, \u0026#34;2023-10-13\u0026#34;)); list.add(new MemoDto2(1, \u0026#34;비비빅\u0026#34;, \u0026#34;3.jpg\u0026#34;, \u0026#34;힝구\u0026#34;, 7, \u0026#34;2023-11-22\u0026#34;)); return list; } } 결과 postman을 이용해서 JSON 데이터 보기 # @ResponseBody 와 @RestController # @ResponseBody : 메소드마다 매번 등록 @RestController : 클래스명에 한번만 등록 @RestController //왼쪽 어노테이션을 주면 메서드마다 @ResponseBody붙이는 것을 생략할 수 있다. public class RestTestController { @GetMapping(\u0026#34;/test/list1\u0026#34;) public List\u0026lt;MemoDto2\u0026gt; list1() { List\u0026lt;MemoDto2\u0026gt; list = new ArrayList\u0026lt;\u0026gt;(); list.add(new MemoDto2(1, \u0026#34;김나나\u0026#34;, \u0026#34;1.jpg\u0026#34;, \u0026#34;안녕하세요\u0026#34;, 5, \u0026#34;2023-10-10\u0026#34;)); list.add(new MemoDto2(1, \u0026#34;캔디바\u0026#34;, \u0026#34;2.jpg\u0026#34;, \u0026#34;히히\u0026#34;, 2, \u0026#34;2023-10-13\u0026#34;)); list.add(new MemoDto2(1, \u0026#34;비비빅\u0026#34;, \u0026#34;3.jpg\u0026#34;, \u0026#34;힝구\u0026#34;, 7, \u0026#34;2023-11-22\u0026#34;)); return list; } } JSON 테스트2 : POST 방식으로 JSON 보내기 #@PostMapping(\u0026#34;/test/list2\u0026#34;) public Map\u0026lt;String, String\u0026gt; text(){ Map\u0026lt;String, String\u0026gt; map = new HashMap\u0026lt;\u0026gt;(); map.put(\u0026#34;name\u0026#34;,\u0026#34;이것이\u0026#34;); map.put(\u0026#34;age\u0026#34;,\u0026#34;35\u0026#34;); return map; } 포스트맨에서 http://localhost:8080/test/list2 넣고 [Send] 기본세팅 #MemoDto #@Data @NoArgsConstructor @AllArgsConstructor public class MemoDto { private int num; private String nickname; private String photo; private String memo; private int likes; private Timestamp writeday; } MemoRestController #@PostMapping(\u0026#34;/memo/upload\u0026#34;) public String fileUpload(@RequestParam(\u0026#34;upload\u0026#34;) MultipartFile upload, HttpServletRequest request){ //파일을 업로드할 위치 System.out.println(\u0026#34;업로드한 파일명 \u0026#34; + upload.getOriginalFilename()); String path = request.getSession().getServletContext().getRealPath(\u0026#34;/resources/upload\u0026#34;); System.out.println(path); //랜덤 파일명 String photo = UUID.randomUUID().toString(); //업로드 try { upload.transferTo(new File(path + \u0026#34;/\u0026#34; + photo)); } catch (IllegalStateException e) { e.printStackTrace(); } catch (IOException e) { e.printStackTrace(); } return photo; } list.jsp 스크립트 영역 #\u0026lt;h3 class=\u0026#34;alert alert-success\u0026#34;\u0026gt;간단한 메모를 남겨봅시다\u0026lt;/h3\u0026gt; \u0026lt;div class=\u0026#34;memoform\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;camraupload\u0026#34;\u0026gt;📷\u0026lt;/span\u0026gt; \u0026lt;input type=\u0026#34;file\u0026#34; name=\u0026#34;upload\u0026#34; id =\u0026#34;upload\u0026#34; style=\u0026#34;display: none;\u0026#34;\u0026gt; \u0026lt;br\u0026gt; \u0026lt;img src = \u0026#34;../res/upload/noimg.png\u0026#34; class = \u0026#34;photo\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class = \u0026#34;memolist\u0026#34;\u0026gt; memo list \u0026lt;/div\u0026gt; processData : false : 서버에 전달하는 데이터는 query string 이라는 형태로 전달된다. 파일전송의 경우 이를 하지 않아야하는데 그 설정이 false. contentType : false : enctype이 원래 기본값은 application/x-www..(생략) . multipart/form-data로 변경해준다. $(function (){ $(\u0026#34;.camraupload\u0026#34;).click(function (){ $(\u0026#34;#upload\u0026#34;).trigger(\u0026#34;click\u0026#34;); }); $(\u0026#34;#upload\u0026#34;).change(function (){ let form = new FormData(); form.append(\u0026#34;upload\u0026#34;, $(\u0026#34;#upload\u0026#34;)[0].files[0]); $.ajax({ type:\u0026#34;post\u0026#34;, dataType:\u0026#34;text\u0026#34;, url:\u0026#34;./upload\u0026#34;, processData : false, contentType : false, data: form, success:function (res){ alert(res); }, statusCode:{ 404:function (){ alert(\u0026#34;json 파일을 찾을 수 없어요\u0026#34;); }, 500:function (){ alert(\u0026#34;서버오류. 코드를 다시 한 번 보세요.\u0026#34;); } } }) ; }); }); ","date":"2023-11-16","permalink":"/devl/spring/009/","section":"Developer Course","summary":"layout : single title : \u0026ldquo;Spring │ MEMO #1\u0026rdquo; categories : spring tag : [spring,네이버클라우드캠프] toc: true toc_sticky: true breadcrumb: true #DB 테이블 생성 #CREATE TABLE memodb( num SMALLINT AUTO_INCREMENT PRIMARY KEY, nickname VARCHAR(30), photo VARCHAR(100), memo VARCHAR(1000), likes SMALLINT DEFAULT 0, writeday DATETIME ) 파일트리 # JSON 테스트1 #@Controller public class RestTestController { @GetMapping(\u0026#34;/test/list1\u0026#34;) @ResponseBody public List\u0026lt;MemoDto2\u0026gt; list1(){ //위 어노테이션 빼먹지 말자 !","title":"Memo #1"},{"content":"코드 작성 순서 # 호출되는 역방향으로 코드 작성 Mapper - 2. DAO - 3. Controller - 4. jsp 글쓰기와 리스트 글쓰기 - INSERT #1. BoardMapper.xml insert 추가 #\u0026lt;insert id = \u0026#34;insertBoard\u0026#34; parameterType=\u0026#34;BoardDto\u0026#34;\u0026gt; \u0026lt;!--알아서 BoardDto내에서 불러옴--\u0026gt; INSERT INTO simpleboard VALUES (null, #{writer}, #{subject},#{content}, #{photo}, 0, now()) \u0026lt;/insert\u0026gt; 2. BoardDao insertBoard 추가 #//추가 된 부분 public void insertBoard(BoardDto dto) { //nameSpace는 설정파일에서 설정한 namespace이름 session.insert(nameSpace + \u0026#34;insertBoard\u0026#34;, dto); //BoardMapper의 insert id값 } 3. BoardWriteController #@Controller @RequestMapping(\u0026#34;/simple\u0026#34;) //공통된 경로를 지정, 여기 내부 코드들은 /simple 하위 경로로 들어가게 됨. @AllArgsConstructor //제발 빼먹지말자.. ㅠㅠ public class BoardWriteController { private BoardDao boardDao; @GetMapping(\u0026#34;/writeform\u0026#34;) public String form(){ return \u0026#34;writeform\u0026#34;; } @PostMapping(\u0026#34;/addprocess\u0026#34;) public String add(HttpServletRequest request, @ModelAttribute BoardDto dto, @RequestParam MultipartFile upload){ String path = request.getSession().getServletContext().getRealPath(\u0026#34;/WEB-INF/upload\u0026#34;); System.out.println(path); //경로 확인용 String photo = UUID.randomUUID().toString(); //파일이 존재하지 않을 때 처리 if(upload.getOriginalFilename().equals(\u0026#34;\u0026#34;)){ dto.setPhoto(\u0026#34;no\u0026#34;); }else{ dto.setPhoto(photo); } //파일 업로드 try { upload.transferTo(new File(path + \u0026#34;/\u0026#34; + photo)); }catch (IllegalStateException e){ e.getStackTrace(); } catch (IOException e){ e.getStackTrace(); } //db insert boardDao.insertBoard(dto); return \u0026#34;redirect:./list\u0026#34;; } } 4. writefrom.jsp #\u0026lt;img id=\u0026#34;showimg\u0026#34; style=\u0026#34;position: absolute;left:600px;top:60px;max-width: 300px;\u0026#34;\u0026gt; \u0026lt;div style=\u0026#34;margin:30px 50px;\u0026#34;\u0026gt; \u0026lt;!--* action : 경로설정해주기--\u0026gt; \u0026lt;form action=\u0026#34;./addprocess\u0026#34; method=\u0026#34;post\u0026#34; enctype=\u0026#34;multipart/form-data\u0026#34;\u0026gt; \u0026lt;table class=\u0026#34;table table-bordered\u0026#34; style=\u0026#34;width:500px;\u0026#34;\u0026gt; \u0026lt;caption align=\u0026#34;top\u0026#34;\u0026gt;글쓰기\u0026lt;/caption\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th width=\u0026#34;100\u0026#34;\u0026gt;작성자\u0026lt;/th\u0026gt; \u0026lt;td\u0026gt; \u0026lt;!-- writer --\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;writer\u0026#34; class=\u0026#34;form-control\u0026#34; style=\u0026#34;width: 150px\u0026#34; autofocus=\u0026#34;autofocus\u0026#34; required=\u0026#34;required\u0026#34;\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th width=\u0026#34;100\u0026#34;\u0026gt;제목\u0026lt;/th\u0026gt; \u0026lt;td class=\u0026#34;input-group\u0026#34;\u0026gt; \u0026lt;!-- subject --\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;subject\u0026#34; class=\u0026#34;form-control\u0026#34; required=\u0026#34;required\u0026#34;\u0026gt; \u0026lt;!-- upload (photo 처리) --\u0026gt; \u0026lt;input type=\u0026#34;file\u0026#34; name=\u0026#34;upload\u0026#34; id=\u0026#34;upload\u0026#34; style=\u0026#34;display: none;\u0026#34;\u0026gt; \u0026amp;nbsp;\u0026amp;nbsp; \u0026lt;i class=\u0026#34;bi bi-camera-fill uploadcamera\u0026#34;\u0026gt;\u0026lt;/i\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th width=\u0026#34;100\u0026#34;\u0026gt;내용\u0026lt;/th\u0026gt; \u0026lt;td\u0026gt; \u0026lt;textarea style=\u0026#34;width: 100%;height: 150px;\u0026#34; name=\u0026#34;content\u0026#34; required=\u0026#34;required\u0026#34; class=\u0026#34;form-control\u0026#34;\u0026gt;\u0026lt;/textarea\u0026gt; \u0026lt;!-- (위) content --\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td colspan=\u0026#34;2\u0026#34; align=\u0026#34;center\u0026#34;\u0026gt; \u0026lt;button type=\u0026#34;submit\u0026#34; class=\u0026#34;btn btn-outline-success\u0026#34; style=\u0026#34;width: 100px;\u0026#34;\u0026gt;등록\u0026lt;/button\u0026gt; \u0026lt;button type=\u0026#34;button\u0026#34; class=\u0026#34;btn btn-outline-success\u0026#34; style=\u0026#34;width: 100px;\u0026#34; onclick=\u0026#34;history.back()\u0026#34;\u0026gt;이전\u0026lt;/button\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/div\u0026gt; 리스트 - SELECT ALL BOARD #1. BoardMapper.xml selectAllBoard 추가 #\u0026lt;select id=\u0026#34;selectAllBoard\u0026#34; resultType=\u0026#34;BoardDto\u0026#34;\u0026gt; SELECT * FROM simpleboard ORDER BY num DESC \u0026lt;/select\u0026gt; 2. BoardDao selectAllBoard 추가 # return session.selectList(nameSpace + \u0026#34;selectAllBoard\u0026#34;); } 3. BoardListController # @GetMapping(\u0026#34;/simple/list\u0026#34;) public String list(Model model) { int totalCount = boardDao.getTotalCount(); model.addAttribute(\u0026#34;totalCount\u0026#34;, totalCount); //추가 List\u0026lt;BoardDto\u0026gt; list = boardDao.getAllDatas(); model.addAttribute(\u0026#34;list\u0026#34;, list); return \u0026#34;list\u0026#34;; } 4. list.jsp #\u0026lt;div style=\u0026#34;margin: 30px\u0026#34;\u0026gt; \u0026lt;h3 class = \u0026#34;alert alert-danger\u0026#34;\u0026gt;총 ${totalCount}개의 글이 있습니다. \u0026lt;button type=\u0026#34;button\u0026#34; class = \u0026#34;btn btn-outline-sucess\u0026#34; onclick=\u0026#34;location.href=\u0026#39;./writeform\u0026#39;\u0026#34; style=\u0026#34;float: right\u0026#34;\u0026gt; 글쓰기\u0026lt;/button\u0026gt; \u0026lt;/h3\u0026gt; \u0026lt;table class = table table-striped style=\u0026#34;margin: 30px; width: 600px;\u0026#34;\u0026gt; \u0026lt;thead\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th width = \u0026#34;50\u0026#34;\u0026gt;번호\u0026lt;/th\u0026gt; \u0026lt;th width = \u0026#34;300\u0026#34;\u0026gt;제목\u0026lt;/th\u0026gt; \u0026lt;th width = \u0026#34;80\u0026#34;\u0026gt;작성자\u0026lt;/th\u0026gt; \u0026lt;th width = \u0026#34;100\u0026#34;\u0026gt;작성일\u0026lt;/th\u0026gt; \u0026lt;th width = \u0026#34;50\u0026#34;\u0026gt;조회\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/thead\u0026gt; \u0026lt;tbody\u0026gt; \u0026lt;c:forEach var=\u0026#34;dto\u0026#34; items=\u0026#34;${list}\u0026#34; varStatus=\u0026#34;n\u0026#34;\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;${totalCount - n.index}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt; \u0026lt;a href =\u0026#34;./content?num=${dto.num}\u0026#34; style=\u0026#34;color:black; text-decoration: none;\u0026#34;\u0026gt; ${dto.subject} \u0026lt;c:if test = \u0026#34;${dto.photo != \u0026#39;no\u0026#39;}\u0026#34;\u0026gt; \u0026lt;!--photo값이 no가 아니면 아이콘 출력--\u0026gt; 🎊 \u0026lt;/c:if\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;${dto.writer}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt; \u0026lt;fmt:formatDate value=\u0026#34;${dto.writeday}\u0026#34; pattern=\u0026#34;yyyy.MM.dd\u0026#34;/\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;td\u0026gt; ${dto.readcount} \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/c:forEach\u0026gt; \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;/div\u0026gt; 이제 Content를 페이지가 나오도록 설정해주면된다.\nContent #1. BoardMapper.xml - Readcount(조회수) \u0026amp; 하나의 데이터 조회 #\u0026lt;!--조회수--\u0026gt; \u0026lt;update id = \u0026#34;updateReadcount\u0026#34; parameterType=\u0026#34;int\u0026#34;\u0026gt; UPDATE simpleboard SET readcount = (readcount + 1) WHERE num = #{num} \u0026lt;/update\u0026gt; \u0026lt;!--하나의 데이터 조회--\u0026gt; \u0026lt;select id = \u0026#34;selectOneData\u0026#34; parameterType=\u0026#34;int\u0026#34; resultType=\u0026#34;BoardDto\u0026#34;\u0026gt; SELECT * FROM simpleboard WHERE num = #{num} \u0026lt;/select\u0026gt; 2. BoardDao #//조회수 public void updateReadCount(int num){ session.update(nameSpace + \u0026#34;updateReadCount\u0026#34;, num); } //하나의 데이터 조회 public BoardDto getData(int nsum){ return session.selectOne(nameSpace + \u0026#34;selectOneData\u0026#34;,num); } 3. BoardContentController #@Controller @AllArgsConstructor public class BoardContentController { private BoardDao boardDao; @GetMapping(\u0026#34;/simple/content\u0026#34;) public String content(Model model, @RequestParam int num) { //조회수 증가 시키기 boardDao.updateReadCount(num); //dto 얻기 BoardDto dto = boardDao.getData(num); //model 저장 model.addAttribute(\u0026#34;dto\u0026#34;,dto); return \u0026#34;content\u0026#34;; } } 4. content.jsp #\u0026lt;div style=\u0026#34;margin: 30px; width:500px;\u0026#34;\u0026gt; \u0026lt;h3\u0026gt;\u0026lt;b\u0026gt;${dto.subject}\u0026lt;/b\u0026gt;\u0026lt;/h3\u0026gt; \u0026lt;div style=\u0026#34;width: 500px\u0026#34;\u0026gt; \u0026lt;span\u0026gt;${dto.writer}\u0026lt;/span\u0026gt; \u0026lt;span class = \u0026#34;day\u0026#34; style=\u0026#34;margin-right: 20px\u0026#34;\u0026gt; 조회 ${dto.readcount} \u0026lt;fmt:formatDate value=\u0026#34;${dto.writeday}\u0026#34; pattern=\u0026#34;yyyy-MM-dd HH:mm\u0026#34;/\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;hr\u0026gt; \u0026lt;pre\u0026gt;${dto.content}\u0026lt;/pre\u0026gt; \u0026lt;c:if test = \u0026#34;${dto.photo != \u0026#39;no\u0026#39;}\u0026#34;\u0026gt; \u0026lt;br\u0026gt;\u0026lt;br\u0026gt; \u0026lt;img src = \u0026#34;../upload/${dto.photo}\u0026#34; width=\u0026#34;300px\u0026#34;\u0026gt; \u0026lt;/c:if\u0026gt; \u0026lt;br\u0026gt;\u0026lt;br\u0026gt; \u0026lt;button type=\u0026#34;button\u0026#34; class=\u0026#34;btn btn-outline-info btn-sm\u0026#34; style=\u0026#34;width: 80px\u0026#34; onclick=\u0026#34;location.href=\u0026#39;./writeform\u0026#39;\u0026#34;\u0026gt;글쓰기\u0026lt;/button\u0026gt; \u0026lt;button type=\u0026#34;button\u0026#34; class=\u0026#34;btn btn-outline-info btn-sm\u0026#34; style=\u0026#34;width: 80px\u0026#34; onclick=\u0026#34;location.href=\u0026#39;./list\u0026#39;\u0026#34;\u0026gt;목록\u0026lt;/button\u0026gt; \u0026lt;button type=\u0026#34;button\u0026#34; class=\u0026#34;btn btn-outline-info btn-sm\u0026#34; style=\u0026#34;width: 80px\u0026#34; onclick=\u0026#34;location.href=\u0026#39;./updateform?num=${dto.num}\u0026#39;\u0026#34;\u0026gt;수정\u0026lt;/button\u0026gt; \u0026lt;button type=\u0026#34;button\u0026#34; class=\u0026#34;btn btn-outline-info btn-sm\u0026#34; style=\u0026#34;width: 80px\u0026#34; onclick=\u0026#34;location.href=\u0026#39;./delete?num=${dto.num}\u0026#39;\u0026#34;\u0026gt;삭제\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; DELETE #1. BoardMapper.xml #\u0026lt;delete id=\u0026#34;deleteBoard\u0026#34; parameterType=\u0026#34;int\u0026#34;\u0026gt; DELETE FROM simpleboard WHERE num = #{num} \u0026lt;/delete\u0026gt; 2. BoardDao #public void deleteData(int num){ session.delete(nameSpace + \u0026#34;deleteBoard\u0026#34;,num); } 3. BoardContentController #@GetMapping(\u0026#34;/simple/delete\u0026#34;) public String delete(@RequestParam int num){ boardDao.deleteData(num); return \u0026#34;redirect:./list\u0026#34;; } 4. content.jsp # \u0026lt;button type=\u0026#34;button\u0026#34; class=\u0026#34;btn btn-outline-info btn-sm\u0026#34; style=\u0026#34;width: 80px\u0026#34; onclick=\u0026#34;location.href=\u0026#39;./delete?num=${dto.num}\u0026#39;\u0026#34;\u0026gt;삭제\u0026lt;/button\u0026gt; UPDATE 폼 #1. BoardContentController #@GetMapping(\u0026#34;/simple/update\u0026#34;) public String update(@RequestParam int num, Model model){ //num에 해당하는 dto를 얻어서 BoardDto dto = boardDao.getData(num); //dto를 모델에 저장 model.addAttribute(\u0026#34;dto\u0026#34;,dto); return \u0026#34;updateform\u0026#34;; } 2. updateform.jsp #writeform 복사 후 수정\n\u0026lt;img id=\u0026#34;showimg\u0026#34; style=\u0026#34;position: absolute;left:600px;top:60px;max-width: 300px;\u0026#34; src = \u0026#34;../upload/${dto.photo}\u0026#34; onerror=\u0026#34;this.style.display=\u0026#39;none\u0026#34;\u0026gt; \u0026lt;!--⬆사진 가져오기--\u0026gt; \u0026lt;!--⬆사진 에러일경우 숨김처리--\u0026gt; ... \u0026lt;form action=\u0026#34;./updateprocess\u0026#34; method=\u0026#34;post\u0026#34; enctype=\u0026#34;multipart/form-data\u0026#34;\u0026gt; ... \u0026lt;input type=\u0026#34;hidden\u0026#34; name = \u0026#34;num\u0026#34; value=\u0026#34;${dto.num}\u0026#34;\u0026gt; ... \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;writer\u0026#34; class=\u0026#34;form-control\u0026#34; style=\u0026#34;width: 150px\u0026#34; autofocus=\u0026#34;autofocus\u0026#34; required=\u0026#34;required\u0026#34; value = \u0026#34;${dto.writer}\u0026#34;\u0026gt; ... \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;subject\u0026#34; class=\u0026#34;form-control\u0026#34; required=\u0026#34;required\u0026#34; vlaue = \u0026#34;${dto.subject}\u0026#34;\u0026gt; ... \u0026lt;textarea style=\u0026#34;width: 100%;height: 150px;\u0026#34; name=\u0026#34;content\u0026#34; required=\u0026#34;required\u0026#34; class=\u0026#34;form-control\u0026#34; \u0026gt;${dto.content}\u0026lt;/textarea\u0026gt; MyBatis if문 #if문 예시 #\u0026lt;selectid=”findActiveBlogLike” parameterType=”Blog”resultType=”Blog”\u0026gt; SELECT * FROM BLOG WHERE \u0026lt;if test=”state != null”\u0026gt; state = #{state} \u0026lt;/if\u0026gt; \u0026lt;if test=”title != null”\u0026gt; AND title like #{title} \u0026lt;/if\u0026gt; \u0026lt;if test=”author != null and author.name!= null”\u0026gt; AND title like #{author.name} \u0026lt;/if\u0026gt; \u0026lt;/select\u0026gt; UPDATE 적용 (MyBatis if문 활용) #1. BoardMapper.xml #\u0026lt;update id=\u0026#34;updateBoard\u0026#34; parameterType=\u0026#34;BoardDto\u0026#34;\u0026gt; UPDATE simpleboard SET writer = #{writer}, subject = #{subject}, content = #{content} \u0026lt;if test = \u0026#34;photo != null\u0026#34;\u0026gt; , photo = #{photo} \u0026lt;/if\u0026gt; WHERE num = #{num} \u0026lt;/update\u0026gt; 2. BoardDao #public void updateData(BoardDto dto){ session.update(nameSpace + \u0026#34;updateBoard\u0026#34;,dto); } 3. BoardContentController #@PostMapping(\u0026#34;/simple/updateprocess\u0026#34;) public String update(@ModelAttribute BoardDto dto, @RequestParam MultipartFile upload, HttpServletRequest request){ String path = request.getSession().getServletContext().getRealPath(\u0026#34;/WEB-INF/upload\u0026#34;); String photo = \u0026#34;\u0026#34;; if (upload.getOriginalFilename().equals(\u0026#34;\u0026#34;)){ dto.setPhoto(null); //BoardMapper의 if문에서 photo!=null 이라는 조건을 맞추기 위함 }else{ photo = UUID.randomUUID().toString(); dto.setPhoto(photo); } //업로드 try { upload.transferTo(new File(path + \u0026#34;/\u0026#34; + photo)); } catch (IllegalStateException e) { e.getStackTrace(); }catch (IOException e) { e.getStackTrace(); } //db수정 boardDao.updateData(dto); return \u0026#34;redirect:./content?num=\u0026#34; + dto.getNum(); } 4. content.jsp #\u0026lt;button type=\u0026#34;button\u0026#34; class=\u0026#34;btn btn-outline-info btn-sm\u0026#34; style=\u0026#34;width: 80px\u0026#34; onclick=\u0026#34;location.href=\u0026#39;./updateform?num=${dto.num}\u0026#39;\u0026#34;\u0026gt;수정\u0026lt;/button\u0026gt; ","date":"2023-11-15","permalink":"/devl/spring/007/","section":"Developer Course","summary":"코드 작성 순서 # 호출되는 역방향으로 코드 작성 Mapper - 2.","title":"SimpleBoard #2"},{"content":"기본 설정 # AnswerDto #@Data public class AnswerDto { private int idx; private int num; private String nickname; private String content; private Timestamp writeday; } AnswerMapper.xml 새 파일 생성 #\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;!DOCTYPE mapper PUBLIC \u0026#34;-//mybatis.org//DTD Mapper3.0//EN\u0026#34; \u0026#34;http://mybatis.org/dtd/mybatis-3-mapper.dtd\u0026#34;\u0026gt; \u0026lt;!--nameSpace 수정--\u0026gt; \u0026lt;mapper namespace=\u0026#34;board.data.AnswerDao\u0026#34;\u0026gt; \u0026lt;/mapper\u0026gt; mybatis-config.xml AnswerDto 설정 추가 #\u0026lt;configuration\u0026gt; \u0026lt;typeAliases\u0026gt; \u0026lt;typeAlias type=\u0026#34;board.data.BoardDto\u0026#34; alias=\u0026#34;BoardDto\u0026#34;/\u0026gt; \u0026lt;!--아래 설정 추가--\u0026gt; \u0026lt;typeAlias type=\u0026#34;board.data.AnswerDto\u0026#34; alias=\u0026#34;AnswerDto\u0026#34;/\u0026gt; \u0026lt;/typeAliases\u0026gt; \u0026lt;/configuration\u0026gt; content.jsp에 댓글 폼 삽입 #\u0026lt;/c:if\u0026gt; \u0026lt;!--위 태그 아래에 넣기--\u0026gt; \u0026lt;div style=\u0026#34;margin-bottom: 10px;\u0026#34;\u0026gt; \u0026lt;form action=\u0026#34;./addanswer\u0026#34; method=\u0026#34;post\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;hidden\u0026#34; name=\u0026#34;num\u0026#34; value=\u0026#34;${dto.num}\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;input-group\u0026#34; style=\u0026#34;width:500px;\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;nickname\u0026#34; class=\u0026#34;form-control\u0026#34; style=\u0026#34;margin-left:5px;width:100px;\u0026#34; placeholder=\u0026#34;닉네임\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;content\u0026#34; class=\u0026#34;form-control\u0026#34; style=\u0026#34;margin-left:5px;width:300px;\u0026#34; placeholder=\u0026#34;댓글\u0026#34;\u0026gt; \u0026lt;button type=\u0026#34;submit\u0026#34; class=\u0026#34;btn btn-sm btn-outline-success\u0026#34;\u0026gt;저장\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/div\u0026gt; AnswerSBoard Insert #AnswerMapper.xml #\u0026lt;insert id=\u0026#34;insertAnswer\u0026#34; parameterType=\u0026#34;AnswerDto\u0026#34;\u0026gt; INSERT INTO answersboard VALUES (null, #{num}, #{nickname}, #{content}, now()) \u0026lt;/insert\u0026gt; \u0026lt;select id=\u0026#34;selectAnswerByNum\u0026#34; parameterType=\u0026#34;int\u0026#34; resultType=\u0026#34;AnswerDto\u0026#34;\u0026gt; SELECT * FROM answersboard WHERE num = #{num} ORDER BY idx DESC \u0026lt;/select\u0026gt; AnswerDao #@Repository //bean 등록 public class AnswerDao { @Autowired //자동으로 세터 주입 private SqlSession session; private String nameSpace = \u0026#34;board.data.AnswerDao.\u0026#34;; public void insertAnswer(AnswerDto dto) { session.insert(nameSpace + \u0026#34;insertAnswer\u0026#34;, dto); } public List\u0026lt;AnswerDto\u0026gt; getAnswers(int num) { return session.selectList(nameSpace + \u0026#34;selectAnswerByNum\u0026#34;,num); } } BoardContentController 에 추가 #//클래스에서 @AllArgsConstructor처리를 했기 때문에 @Autowired 생략함. private AnswerDao answerDao; //댓글 추가 @PostMapping(\u0026#34;/simple/addanswer\u0026#34;) public String addAnswer(@ModelAttribute AnswerDto dto){ //댓글 추가 answerDao.insertAnswer(dto); return \u0026#34;redirect:./content?num=\u0026#34; + dto.getNum(); } BoardContentController 내 content에 댓글 추가 #@GetMapping(\u0026#34;/simple/content\u0026#34;) public String content(Model model, @RequestParam int num) { //... List\u0026lt;AnswerDto\u0026gt; aList = answerDao.getAnswers(num); model.addAttribute(\u0026#34;alist\u0026#34;,alist); model.addAttribute(\u0026#34;acount\u0026#34;,alist.size()); //... } content.jsp #\u0026lt;div style=\u0026#34;margin : 20px;\u0026#34;\u0026gt; \u0026lt;!--댓글카운트 출력--\u0026gt; ➕ ${acount}\u0026lt;br\u0026gt;\u0026lt;br\u0026gt; \u0026lt;!--댓글 출력--\u0026gt; \u0026lt;c:forEach var=\u0026#34;adto\u0026#34; items=\u0026#34;${alist}\u0026#34;\u0026gt; \u0026lt;span\u0026gt;${adto.nickname} : ${adto.content}\u0026lt;/span\u0026gt; \u0026lt;span style=\u0026#34;margin-left: 20px; color:gray; font-size: 0.9em\u0026#34;\u0026gt; \u0026lt;fmt:formatDate value=\u0026#34;${adto.writeday}\u0026#34; pattern=\u0026#34;yyyy-MM-dd HH:mm\u0026#34;/\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;br\u0026gt; \u0026lt;/c:forEach\u0026gt; \u0026lt;/div\u0026gt; ","date":"2023-11-15","permalink":"/devl/spring/008/","section":"Developer Course","summary":"기본 설정 # AnswerDto #@Data public class AnswerDto { private int idx; private int num; private String nickname; private String content; private Timestamp writeday; } AnswerMapper.","title":"SimpleBoard #3 댓글"},{"content":"pom.xml dependencies 추가 # 참조 사이트 : https://mvnrepository.com/ spring-jdbc mysql-connector-java mybatis mybatis-spring \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-jdbc\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${org.springframework-version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;mysql\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;mysql-connector-java\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;8.0.28\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.mybatis\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;mybatis\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;3.5.9\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.mybatis\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;mybatis-spring\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.0.7\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; 폴더 구조 # root-context.xml BoardMapper.xml mybatis-config.xml root-context.xml #\u0026lt;!-- 데이터베이스 이름 및 계정 확인 --\u0026gt; \u0026lt;bean id=\u0026#34;dataSource\u0026#34; class=\u0026#34;org.springframework.jdbc.datasource.DriverManagerDataSource\u0026#34;\u0026gt; \u0026lt;property name=\u0026#34;driverClassName\u0026#34; value=\u0026#34;com.mysql.cj.jdbc.Driver\u0026#34;/\u0026gt; \u0026lt;property name=\u0026#34;url\u0026#34; value=\u0026#34;jdbc:mysql://localhost:3306/DB이름?useSSL=false\u0026amp;amp;serverTimezone=Asia/Seoul\u0026#34; /\u0026gt; \u0026lt;property name=\u0026#34;username\u0026#34; value=\u0026#34;아이디\u0026#34;/\u0026gt; \u0026lt;property name=\u0026#34;password\u0026#34; value=\u0026#34;비밀번호\u0026#34;/\u0026gt; \u0026lt;/bean\u0026gt; \u0026lt;bean id=\u0026#34;transactionManager\u0026#34; class=\u0026#34;org.springframework.jdbc.datasource.DataSourceTransactionManager\u0026#34;\u0026gt; \u0026lt;property name=\u0026#34;dataSource\u0026#34; ref=\u0026#34;dataSource\u0026#34; /\u0026gt; \u0026lt;/bean\u0026gt; \u0026lt;bean id=\u0026#34;sqlSessionFactory\u0026#34; class=\u0026#34;org.mybatis.spring.SqlSessionFactoryBean\u0026#34;\u0026gt; \u0026lt;property name=\u0026#34;dataSource\u0026#34; ref=\u0026#34;dataSource\u0026#34;/\u0026gt; \u0026lt;property name=\u0026#34;configLocation\u0026#34; value=\u0026#34;classpath:mybatis-config.xml\u0026#34;/\u0026gt; \u0026lt;property name=\u0026#34;mapperLocations\u0026#34; value=\u0026#34;classpath:mapper/*Mapper.xml\u0026#34;/\u0026gt; \u0026lt;/bean\u0026gt; \u0026lt;bean id=\u0026#34;sqlSession\u0026#34; class=\u0026#34;org.mybatis.spring.SqlSessionTemplate\u0026#34;\u0026gt; \u0026lt;constructor-arg ref=\u0026#34;sqlSessionFactory\u0026#34;/\u0026gt; \u0026lt;/bean\u0026gt; BoardMapper.xml #\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;!DOCTYPE mapper PUBLIC \u0026#34;-//mybatis.org//DTD Mapper3.0//EN\u0026#34; \u0026#34;http://mybatis.org/dtd/mybatis-3-mapper.dtd\u0026#34;\u0026gt; \u0026lt;mapper namespace=\u0026#34;board.data.BoardDao\u0026#34;\u0026gt; \u0026lt;select id=\u0026#34;totalCountOfBoard\u0026#34; resultType=\u0026#34;int\u0026#34;\u0026gt; SELECT COUNT(*) FROM simpleboard \u0026lt;/select\u0026gt; \u0026lt;/mapper\u0026gt; mybatis-config.xml #\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;!DOCTYPE configuration PUBLIC \u0026#34;-//mybatis.org//DTD Config 3.0//EN\u0026#34; \u0026#34;http://mybatis.org/dtd/mybatis-3-config.dtd\u0026#34;\u0026gt; \u0026lt;configuration\u0026gt; \u0026lt;typeAliases\u0026gt; \u0026lt;typeAlias type=\u0026#34;board.data.BoardDto\u0026#34; alias=\u0026#34;BoardDto\u0026#34;/\u0026gt; \u0026lt;/typeAliases\u0026gt; \u0026lt;/configuration\u0026gt; BoardDao #@Repository //bean을 자동등록 해 주는 어노테이션 주로 dao에 붙인다 public class BoardDao { @Autowired //자동으로 주입해주는 어노테이션 주로 controller에 붙인다. private SqlSession session; private String nameSpace = \u0026#34;board.data.BoardDao.\u0026#34;; //전체 갯수 반환하는 메서드 public int getTotalCount() { //복수개로 여러개로 받을 거면 selectList //하나로만 받을거면 selectOne return session.selectOne(nameSpace + \u0026#34;totalCountOfBoard\u0026#34;); //BoardMapper의 select id값 } } BoardDto #@Data public class BoardDto { private int num; private String writer; private String subject; private String content; private String photo; private int readcount; private Timestamp writeday; } HomeController #@Controller public class HomeController { @RequestMapping(value = \u0026#34;/\u0026#34;, method = RequestMethod.GET) public String home(){ return \u0026#34;redirect:./simple/list\u0026#34;; } } BoardListController #@Controller //@AllArgsConstructor public class BoardListController { @Autowired private BoardDao boardDao; @GetMapping(\u0026#34;/simple/list\u0026#34;) public String list(Model model) { //전체 갯수 가져오기 int totalCount = boardDao.getTotalCount(); model.addAttribute(\u0026#34;totalCount\u0026#34;, totalCount); return \u0026#34;list\u0026#34;; } } list.jsp #\u0026lt;body\u0026gt; \u0026lt;div style=\u0026#34;margin: 30px\u0026#34;\u0026gt; \u0026lt;h3 class = \u0026#34;alert alert-danger\u0026#34;\u0026gt;총 ${totalCount}개의 글이 있습니다.\u0026lt;/h3\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; 결과 # ","date":"2023-11-14","permalink":"/devl/spring/006/","section":"Developer Course","summary":"pom.xml dependencies 추가 # 참조 사이트 : https://mvnrepository.","title":"SimpleBoard #1"},{"content":" web.xml 한글 인코딩 설정 \u0026lt;!-- UTF8 encoding --\u0026gt; \u0026lt;filter\u0026gt; \u0026lt;filter-name\u0026gt;encodingFilter\u0026lt;/filter-name\u0026gt; \u0026lt;filter-class\u0026gt; org.springframework.web.filter.CharacterEncodingFilter \u0026lt;/filter-class\u0026gt; \u0026lt;init-param\u0026gt; \u0026lt;param-name\u0026gt;encoding\u0026lt;/param-name\u0026gt; \u0026lt;param-value\u0026gt;utf-8\u0026lt;/param-value\u0026gt; \u0026lt;/init-param\u0026gt; \u0026lt;/filter\u0026gt; \u0026lt;filter-mapping\u0026gt; \u0026lt;filter-name\u0026gt;encodingFilter\u0026lt;/filter-name\u0026gt; \u0026lt;url-pattern\u0026gt;/*\u0026lt;/url-pattern\u0026gt; \u0026lt;/filter-mapping\u0026gt; Get방식으로 데이터 읽기 #DataReadController #//매핑 방법1 @GetMapping(\u0026#34;/process1\u0026#34;) //@RequestParam(\u0026#34;폼태그의 name\u0026#34;) String 변수명 : 폼태그의 name과 변수명이 같을 경우 name은 생략가능 //@RequestParam 자체가 사실 생략이 가능하다. (하지만 를다른 어노테이션으로 잘못 인식하는 경우 방지하기 위해 생략하는 것을 지양) public String process1(Model model, @RequestParam(\u0026#34;name\u0026#34;) String irum, @RequestParam String addr, @RequestParam int age) { model.addAttribute(\u0026#34;name\u0026#34;,irum); model.addAttribute(\u0026#34;addr\u0026#34;,addr); model.addAttribute(\u0026#34;age\u0026#34;,age + \u0026#34;세는 \u0026#34; + (age \u0026gt;= 20 ? \u0026#34;성인\u0026#34; : \u0026#34;미성년자\u0026#34;) + \u0026#34;입니다\u0026#34;); return \u0026#34;result1\u0026#34;; } //매핑 방법2 @GetMapping(\u0026#34;/process1\u0026#34;) public String process1(HttpServletRequest request, Model model) { String name = request.getParameter(\u0026#34;name\u0026#34;); String addr = request.getParameter(\u0026#34;addr\u0026#34;); int age = Integer.parseInt(request.getParameter(\u0026#34;age\u0026#34;)); model.addAttribute(\u0026#34;name\u0026#34;,name); model.addAttribute(\u0026#34;addr\u0026#34;,addr); model.addAttribute(\u0026#34;age\u0026#34;,age+\u0026#34;세는 \u0026#34; + (age \u0026gt; 20 ? \u0026#34;성인\u0026#34; : \u0026#34;미성년자\u0026#34; ) + \u0026#34;입니다.\u0026#34;); }\tform1.jsp #\u0026lt;h3\u0026gt; Get방식으로 데이터 읽기\u0026lt;/h3\u0026gt; \u0026lt;form action = \u0026#34;./process1\u0026#34; method =\u0026#34;get\u0026#34;\u0026gt; 이름 : \u0026lt;input type = \u0026#34;text\u0026#34; name = \u0026#34;name\u0026#34;\u0026gt;\u0026lt;br\u0026gt; 주소 : \u0026lt;input type = \u0026#34;text\u0026#34; name = \u0026#34;addr\u0026#34;\u0026gt;\u0026lt;br\u0026gt; 나이 : \u0026lt;input type = \u0026#34;text\u0026#34; name = \u0026#34;age\u0026#34;\u0026gt;\u0026lt;br\u0026gt; \u0026lt;button type = \u0026#34;submit\u0026#34;\u0026gt;전송 #1\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; result1.jsp #\u0026lt;h3\u0026gt;Get 방식으로 읽은 데이터\u0026lt;/h3\u0026gt; 이름 : ${name} 주소 : ${addr} 나이 : ${age} 결과 #파일 업로드 : 1개 #pom.xml dependency 추가 #\u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;commons-io\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;commons-io\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.4\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;commons-fileupload\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;commons-fileupload\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.2.2\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; servlet-context.xml 추가 설정 #\t\u0026lt;!-- File Upload Setting --\u0026gt; \u0026lt;beans:bean id = \u0026#34;multipartResolver\u0026#34; class = \u0026#34;org.springframework.web.multipart.commons.CommonsMultipartResolver\u0026#34;\u0026gt; \u0026lt;beans:property name=\u0026#34;defaultEncoding\u0026#34; value = \u0026#34;utf-8\u0026#34;/\u0026gt; \u0026lt;beans:property name=\u0026#34;maxUploadSize\u0026#34; value = \u0026#34;4000000\u0026#34;/\u0026gt; \u0026lt;!--약 4mb--\u0026gt; \u0026lt;/beans:bean\u0026gt; ","date":"2023-11-13","permalink":"/devl/spring/005/","section":"Developer Course","summary":"web.","title":"Spring #5 기초 - 데이터 읽기"},{"content":" 맵핑 주소 외부에서 실제 내부주소를 알 수 없게끔 설정. 예제2 # /market/morning/brunch 호출 시 -\u0026gt; list2\n\u0026ldquo;message\u0026rdquo; : \u0026ldquo;오늘의 브런치 메뉴들\u0026rdquo;\n\u0026ldquo;today\u0026rdquo; : 현재 날짜-출력 이 연,월,일 시 분\n\u0026ldquo;list\u0026rdquo; : 3개의 사진명을 담아서 출력 (photo 폴더)\nphoto 폴더 위치\nShopController #@GetMapping(\u0026#34;/market/morning/brunch\u0026#34;) public String list2(Model model) { String message = \u0026#34;오늘의 팀체리 캐릭터 소개\u0026#34;; List\u0026lt;String\u0026gt; photoList1 = new ArrayList\u0026lt;String\u0026gt;(Arrays.asList(\u0026#34;002.png\u0026#34;,\u0026#34;003.png\u0026#34;,\u0026#34;004.png\u0026#34;)); model.addAttribute(\u0026#34;message\u0026#34;, message); model.addAttribute(\u0026#34;today\u0026#34;,new Date()); model.addAttribute(\u0026#34;photoList1\u0026#34;, photoList1); return \u0026#34;list2\u0026#34;; } servlet-context.xml #\u0026lt;resources mapping=\u0026#34;/photo/**\u0026#34; location=\u0026#34;/WEB-INF/photo/\u0026#34; /\u0026gt; list2.jsp #\u0026lt;h5\u0026gt;${message}\u0026lt;/h5\u0026gt; \u0026lt;h5\u0026gt;\u0026lt;fmt:formatDate value =\u0026#34;${today}\u0026#34; pattern=\u0026#34;yyyy-MM-dd HH:mm\u0026#34;/\u0026gt;\u0026lt;/h5\u0026gt; \u0026lt;c:set var=\u0026#34;num1\u0026#34; value=\u0026#34;0\u0026#34;/\u0026gt; \u0026lt;c:forEach var=\u0026#34;img\u0026#34; items=\u0026#34;${photoList1}\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;../../photo/${img}\u0026#34; width = \u0026#34;300\u0026#34;\u0026gt; \u0026lt;/c:forEach\u0026gt; 결과 # 예제3 : ModelAndView로 작성 # photo 경로 및 설정파일은 위 예제와 동일함 ShopController #@GetMapping(\u0026#34;/market/photo/detail\u0026#34;) public ModelAndView list3(Model model) { ModelAndView mview = new ModelAndView(); mview.setViewName(\u0026#34;list3\u0026#34;); List\u0026lt;String\u0026gt; photoList2 = new ArrayList\u0026lt;String\u0026gt;(Arrays.asList(\u0026#34;12.jpg\u0026#34;,\u0026#34;25.jpg\u0026#34;,\u0026#34;28.jpg\u0026#34;)); model.addAttribute(\u0026#34;name\u0026#34;, \u0026#34;Aiur\u0026#34;); model.addAttribute(\u0026#34;addr\u0026#34;, \u0026#34;강남구\u0026#34;); model.addAttribute(\u0026#34;photoList2\u0026#34;, photoList2); return mview; } list3.jsp #\u0026lt;body\u0026gt; \u0026lt;h5\u0026gt;${name}\u0026lt;/h5\u0026gt; \u0026lt;h5\u0026gt;${addr}\u0026lt;/h5\u0026gt; \u0026lt;c:forEach var=\u0026#34;img2\u0026#34; items=\u0026#34;${photoList2}\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;../../photo/${img2}\u0026#34; width = \u0026#34;300\u0026#34;\u0026gt; \u0026lt;/c:forEach\u0026gt; \u0026lt;/body\u0026gt; ","date":"2023-11-10","permalink":"/devl/spring/004/","section":"Developer Course","summary":"맵핑 주소 외부에서 실제 내부주소를 알 수 없게끔 설정.","title":"Spring #4 기초"},{"content":"Interface \u0026gt; 의존성 주입까지 복습 # Tire 인터페이스 생성 public interface Tire { public String getTireName(); } Tire 클래스 1 public class KoreaTire implements Tire { @Override public String getTireName() { // TODO Auto-generated method stub return \u0026#34;한국타이어\u0026#34;; } } Tire 클래스 2 public class CanadaTire implements Tire { @Override public String getTireName() { // TODO Auto-generated method stub return \u0026#34;캐나다타이어\u0026#34;; } } Car 클래스 public class Car { Tire tire; public Car(Tire tire) { this.tire = tire; } public void myCarInfo() { System.out.println(\u0026#34;내 차의 타이어는 \u0026#34; + tire.getTireName() + \u0026#34;입니다\u0026#34;); } } 의존성 주입 \u0026lt;bean id = \u0026#34;cTire\u0026#34; class = \u0026#34;day1109.test5.CanadaTire\u0026#34;/\u0026gt; \u0026lt;bean id = \u0026#34;kTire\u0026#34; class = \u0026#34;day1109.test5.KoreaTire\u0026#34;/\u0026gt; \u0026lt;bean id=\u0026#34;car1\u0026#34; class = \u0026#34;day1109.test5.Car\u0026#34;\u0026gt; \u0026lt;constructor-arg ref=\u0026#34;cTire\u0026#34;/\u0026gt; \u0026lt;/bean\u0026gt; \u0026lt;bean id=\u0026#34;car2\u0026#34; class = \u0026#34;day1109.test5.Car\u0026#34;\u0026gt; \u0026lt;constructor-arg ref=\u0026#34;kTire\u0026#34;/\u0026gt; \u0026lt;/bean\u0026gt; 메인 public static void main(String[] args) { ApplicationContext context = new ClassPathXmlApplicationContext(\u0026#34;appcontext2.xml\u0026#34;); Car car1 = (Car)context.getBean(\u0026#34;car1\u0026#34;); car1.myCarInfo(); Car car2 = (Car)context.getBean(\u0026#34;car2\u0026#34;); car2.myCarInfo(); } //결과 // 내 차의 타이어는 캐나다타이어입니다 // 내 차의 타이어는 한국타이어입니다 Annotation # @Required : @Autowired : 자동으로 똑같은 이름의 빈을 찾아서 주입해준다. (타입으로 찾음) 지금은 @All아규먼트 @리콰이어 아규먼트를 많이 씀 @RequiredArgsConstructor - final인 필드를 포함하는 생성자 @NoArgsConstructor - 파라미터 없는 기본 생성자 @AllArgsConstructor - 모든 필드 포함하는 생성자 자동 추가\n웹에서 사용하는 어노테이션들 빈을 자동으로 등록해주는 어노테이션들 (xml 설정없이 자동으로 등록됨) 아래 4개는 기능은 같음. 사용하는 곳만 다름\n@Component @Service @Repository @Contrlloer 사용법 @Conponent\n응용\n@NoArgsConstructor(force = true, access = AccessLevel.PRIVATE) 파라미터 없는 생성자 강제 생성 \u0026amp; 접근제어자는 private로\nAnnotation #","date":"2023-11-09","permalink":"/devl/spring/002/","section":"Developer Course","summary":"Interface \u0026gt; 의존성 주입까지 복습 # Tire 인터페이스 생성 public interface Tire { public String getTireName(); } Tire 클래스 1 public class KoreaTire implements Tire { @Override public String getTireName() { // TODO Auto-generated method stub return \u0026#34;한국타이어\u0026#34;; } } Tire 클래스 2 public class CanadaTire implements Tire { @Override public String getTireName() { // TODO Auto-generated method stub return \u0026#34;캐나다타이어\u0026#34;; } } Car 클래스 public class Car { Tire tire; public Car(Tire tire) { this.","title":"Spring #2 기초 - Annotation"},{"content":" web.xml\n공인데이터 제일 먼저 실행됨 아래처럼 서블릿이 호출되도록 설정 돼 있음\n\u0026lt;servlet\u0026gt; \u0026lt;servlet-name\u0026gt;appServlet\u0026lt;/servlet-name\u0026gt; \u0026lt;servlet-class\u0026gt;org.springframework.web.servlet.DispatcherServlet\u0026lt;/servlet-class\u0026gt; \u0026lt;init-param\u0026gt; \u0026lt;param-name\u0026gt;contextConfigLocation\u0026lt;/param-name\u0026gt; \u0026lt;param-value\u0026gt;/WEB-INF/spring/appServlet/servlet-context.xml\u0026lt;/param-value\u0026gt; \u0026lt;/init-param\u0026gt; \u0026lt;load-on-startup\u0026gt;1\u0026lt;/load-on-startup\u0026gt; \u0026lt;/servlet\u0026gt; model2 : 로직과 디자인만 분리된 구조\nMVC : model2에서 MVC로 발전\nM : POJO (Controller)/DB 연동과 같은 비지니스 로직을 처리 V : View C : Front Controller (유일하게 서블릿으로 되어 있음) 디스패쳐 서블릿\n설정파일은 한번만 읽음. 그렇기 때문에 설정파일 (xml)이 변경되면 다시 실행해야함. 마이바티스\n요즘은 스프링BOOT 사용이 많아지면서 jpa 50%, 마이바티스 50%라고 함. 스프링에 대한 구조 # 구성 요소간의 메세지 흐름 # sevlet-context.xml #\u0026lt;!-- 이미지등 리소스 경로 --\u0026gt; \u0026lt;resources mapping=\u0026#34;/resources/**\u0026#34; location=\u0026#34;/resources/\u0026#34; /\u0026gt; \u0026lt;!--이 패키지의 어노테이션을 인식하게 해주는 부분--\u0026gt; \u0026lt;context:component-scan base-package=\u0026#34;study.day1109.mvc1\u0026#34; /\u0026gt; @RequestMapping #@RequestMapping(value = \u0026#34;/\u0026#34;, method = RequestMethod.GET) 겟이나 포스트가 정해져 있지 않음. 생략가능함 겟, 포스트 공통으로 주고 싶을 때 @GetMapping / @PostMapping 이 적용이 안 될경우 3버전이어서 그럼 pom.xml에서 5버전으로 바꿔 줘야함\n//모델앤뷰 : 위 모델 과 뷰를 같이 나타내는 것 public String home(Locale locale, Model model) { //Model : 모델 logger.info(\u0026#34;Welcome home! The client locale is {}.\u0026#34;, locale); Date date = new Date(); DateFormat dateFormat = DateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.LONG, locale); String formattedDate = dateFormat.format(date); model.addAttribute(\u0026#34;serverTime\u0026#34;, formattedDate ); return \u0026#34;home\u0026#34;; //\u0026lt; 뷰 : 홈을 리턴할 경우 다시 디스패쳐 서블릿으로 감. 처음 설정파일에서 찾는다. (아래 xml) } 포워드를 어떻게 할 것인가 설정 해주는 부분 \u0026lt;!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory --\u0026gt; \u0026lt;beans:bean class=\u0026#34;org.springframework.web.servlet.view.InternalResourceViewResolver\u0026#34;\u0026gt; \u0026lt;beans:property name=\u0026#34;prefix\u0026#34; value=\u0026#34;/WEB-INF/views/\u0026#34; /\u0026gt; \u0026lt;!-- 여기에 있는 경로 파일 리스트 중 --\u0026gt; \u0026lt;beans:property name=\u0026#34;suffix\u0026#34; value=\u0026#34;.jsp\u0026#34; /\u0026gt; \u0026lt;!-- .jsp 확장자를 찾아서 포워드 함--\u0026gt; \u0026lt;/beans:bean\u0026gt; 그래서 아래가 home.jsp가 출력이 된다. \u0026lt;!--home.jsp--\u0026gt; \u0026lt;%@ taglib uri=\u0026#34;http://java.sun.com/jsp/jstl/core\u0026#34; prefix=\u0026#34;c\u0026#34; %\u0026gt; \u0026lt;%@ page session=\u0026#34;false\u0026#34; %\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Home\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt; Hello world! \u0026lt;/h1\u0026gt; \u0026lt;P\u0026gt; The time on the server is ${serverTime}. \u0026lt;/P\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 실습 # TestContrlloer.java 홈경로 지정 1 #@Controller //컨트롤러를 줘야 자동으로 빈을 생성함. public class TestController { @RequestMapping(\u0026#34;/\u0026#34;) // 리퀘스트 맵핑하기. 기본방식인 Get방식으로 호출됨; 초기 부전부터 모두 가능한 어노테이션 public String home(Model model) { //Model import return \u0026#34;result1\u0026#34;; } } 홈경로 지정 2 #@Controller public class TestController { @GetMapping(\u0026#34;/\u0026#34;) //스프링버전 5부터 가능한 어노테이션 public String home(Model model) { return \u0026#34;result1\u0026#34;; } } 주의 : 스프링에서는 설정 파일이 잘못돼도 404에러가 나올 수 있다.\n\u0026lt;!--result1.jsp--\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h2 class=\u0026#34;alert alert-info\u0026#34;\u0026gt;TestController 로부터 포워드됨\u0026lt;/h2\u0026gt; \u0026lt;h4\u0026gt;오늘의 메세지 : ${message}\u0026lt;/h4\u0026gt; \u0026lt;h5\u0026gt;현재시간 : ${today}\u0026lt;/h5\u0026gt; \u0026lt;h5\u0026gt; 현재날짜와 시간 : \u0026lt;fmt:formatDate value=\u0026#34;${today}\u0026#34; pattern=\u0026#34;yyyy-MM-dd HH:mm\u0026#34; /\u0026gt; \u0026lt;/h5\u0026gt; \u0026lt;hr\u0026gt; \u0026lt;h4\u0026gt;매핑주소 테스트하기\u0026lt;/h4\u0026gt; \u0026lt;ol\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;./shop/insert\u0026#34;\u0026gt;/shop/insert\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;./shop/delete\u0026#34;\u0026gt;/shop/delete\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;./shop/list\u0026#34;\u0026gt;/shop/list\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;./shop/list.do\u0026#34;\u0026gt;/shop/list.do\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;./shop/list.nhn\u0026#34;\u0026gt;/shop/list.nhn\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;./board/update\u0026#34;\u0026gt;/board/update\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;./stu/form/test1\u0026#34;\u0026gt;/stu/form/test1\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ol\u0026gt; \u0026lt;/body\u0026gt; 결과 : result1.jsp 메인만 나옴\n하위 경로 지정 2 # /shop/list 및 /shop/list.* 하위 경로 모두 호출\n@GetMapping(\u0026#34;/shop/list\u0026#34;) // public String go(Model model) { model.addAttribute(\u0026#34;path\u0026#34;,\u0026#34;/shop/list\u0026#34;); return \u0026#34;list\u0026#34;; } 하위 경로 지정 2 # /shop/list/do 경로만 호출됨\n@GetMapping(\u0026#34;/shop/list.do\u0026#34;) // /shop/list.do 만 호출가능 public String go(Model model) { model.addAttribute(\u0026#34;path\u0026#34;,\u0026#34;/shop/list\u0026#34;); return \u0026#34;list\u0026#34;; } 이미지 불러오기 # resources image 폴더 만들기 WEB-INF 아래에 photo 폴더 만들기 xml 리소스 경로 설정 변경 \u0026lt;resources mapping=\u0026#34;/res/**\u0026#34; location=\u0026#34;/resources/\u0026#34; /\u0026gt; \u0026lt;resources mapping=\u0026#34;/photo/**\u0026#34; location=\u0026#34;/WEB-INF/photo/\u0026#34; /\u0026gt; ModelAndView 단일 맵핑 #@GetMapping(\u0026#34;/board/update\u0026#34;) public ModelAndView hello() { ModelAndView mview = new ModelAndView(); mview.addObject(\u0026#34;message\u0026#34;,\u0026#34;매핑주소로 사진을 나타내보자\u0026#34;); mview.setViewName(\u0026#34;result2\u0026#34;); // xml에서 경로가 \u0026lt;beans:property name=\u0026#34;prefix\u0026#34; value=\u0026#34;/WEB-INF/views/\u0026#34; /\u0026gt; // 이렇게 설졍돼 있으므로 \u0026#34;result2\u0026#34; 파일명만 입력해주면된다. return mview; } \u0026lt;!--result2.jsp--\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h2 class=\u0026#34;alert alert-info\u0026#34;\u0026gt;TestController로부터 포워드 됨\u0026lt;/h2\u0026gt; \u0026lt;h3\u0026gt;${message}\u0026lt;/h3\u0026gt; \u0026lt;h3\u0026gt;Team Cherry\u0026lt;/h3\u0026gt; \u0026lt;!--/board/update에서 상대적 경로 설정--\u0026gt; \u0026lt;img src = \u0026#34;../res/image/003.png\u0026#34; width = \u0026#34;300\u0026#34;\u0026gt;\u0026lt;br\u0026gt; \u0026lt;img src = \u0026#34;../photo/001.png\u0026#34; width = \u0026#34;300\u0026#34;\u0026gt; \u0026lt;/body\u0026gt; ModelAndView 복수 맵핑 #@GetMapping({\u0026#34;/board/update\u0026#34;,\u0026#34;/stu/form/test1\u0026#34;}) public ModelAndView hello() { ModelAndView mview = new ModelAndView(); mview.addObject(\u0026#34;message\u0026#34;,\u0026#34;매핑주소로 사진을 나타내보자\u0026#34;); mview.setViewName(\u0026#34;result2\u0026#34;); return mview; } 복수 경로 지정시 리소스 상대 주소의 문제점 \u0026lt;!--result2.jsp--\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h2 class=\u0026#34;alert alert-info\u0026#34;\u0026gt;TestController로부터 포워드 됨\u0026lt;/h2\u0026gt; \u0026lt;h3\u0026gt;${message}\u0026lt;/h3\u0026gt; \u0026lt;h3\u0026gt;Team Cherry\u0026lt;/h3\u0026gt; \u0026lt;!--/board/update에서 상대적 경로 설정된 부분--\u0026gt; \u0026lt;!--stu/form/test1는 한번더 상위폴더를 빠져나가야 하기 때문에 아래 경로가 먹히지 않는다.--\u0026gt; \u0026lt;img src = \u0026#34;../res/image/003.png\u0026#34; width = \u0026#34;300\u0026#34;\u0026gt;\u0026lt;br\u0026gt; \u0026lt;img src = \u0026#34;../photo/001.png\u0026#34; width = \u0026#34;300\u0026#34;\u0026gt; \u0026lt;/body\u0026gt; /board/update 에서는 모든 이미지나타나지만 /stu/form/test1 에서는 이미지가 나타나지 않음 이런 상황에서는 리소스 경로를 절대 주소를 구해야 함.\nHttpServletRequest 사용\nHttpServletRequest 사용하여 절대 경로 찾기 #@GetMapping({\u0026#34;/board/update\u0026#34;,\u0026#34;/stu/form/test1\u0026#34;}) public ModelAndView hello(HttpServletRequest request ) { //추가 String root = request.getContextPath(); //추가 System.out.println(root); //추가 : 콘솔에 경로를 확인해보자 ModelAndView mview = new ModelAndView(); mview.addObject(\u0026#34;message\u0026#34;,\u0026#34;매핑주소로 사진을 나타내보자\u0026#34;); mview.addObject(\u0026#34;root\u0026#34;, root); //추가 mview.setViewName(\u0026#34;result2\u0026#34;); return mview; } 콘솔창에 /mvc1 라는 경로값이 나타난다.\n이 경로는 추후 바뀔 수도 있기 때문에 root 변수를 활용해서 리소스의 절대 경로를 지정해준다.\n\u0026lt;body\u0026gt; \u0026lt;h2 class=\u0026#34;alert alert-info\u0026#34;\u0026gt;TestController로부터 포워드 됨\u0026lt;/h2\u0026gt; \u0026lt;h3\u0026gt;${message}\u0026lt;/h3\u0026gt; \u0026lt;h3\u0026gt;Team Cherry\u0026lt;/h3\u0026gt; \u0026lt;!--${root}로 절대 경로지정 --\u0026gt; \u0026lt;img src = \u0026#34;${root}/res/image/003.png\u0026#34; width = \u0026#34;300\u0026#34;\u0026gt;\u0026lt;br\u0026gt; \u0026lt;img src = \u0026#34;${root}/photo/001.png\u0026#34; width = \u0026#34;300\u0026#34;\u0026gt; \u0026lt;/body\u0026gt; ${root} + xml의 리소스 경로\n/board/update 와 /stu/form/test1에서는 모두 이미지 나타남. SHOP 예제 #view 및 리소스 경로를 바꾸고 xml 경로 재설정하기 # xml 수정 #\t\u0026lt;!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory --\u0026gt; \u0026lt;resources mapping=\u0026#34;/res/**\u0026#34; location=\u0026#34;/resources/\u0026#34; /\u0026gt; \u0026lt;!--변경--\u0026gt; \u0026lt;!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory --\u0026gt; \u0026lt;beans:bean class=\u0026#34;org.springframework.web.servlet.view.InternalResourceViewResolver\u0026#34;\u0026gt; \u0026lt;beans:property name=\u0026#34;prefix\u0026#34; value=\u0026#34;/WEB-INF/shop/\u0026#34; /\u0026gt; \u0026lt;!--view -\u0026gt; shop 으로 수정--\u0026gt; \u0026lt;beans:property name=\u0026#34;suffix\u0026#34; value=\u0026#34;.jsp\u0026#34; /\u0026gt; \u0026lt;/beans:bean\u0026gt; home.jsp #\u0026lt;body\u0026gt; \u0026lt;h1 class = \u0026#34;alert alert-danger\u0026#34;\u0026gt;쇼핑몰\u0026lt;/h1\u0026gt; \u0026lt;div style=\u0026#34;margin: 30px;\u0026#34;\u0026gt; \u0026lt;ul class=\u0026#34;menu\u0026#34;\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;./shop/list1\u0026#34;\u0026gt;원피스\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;./shop/list2\u0026#34;\u0026gt;슈즈\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;./shop/list3\u0026#34;\u0026gt;악세사리\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/body\u0026gt; ShopDto 클래스 생성 #@Data @NoArgsConstructor @AllArgsConstructor public class ShopDto { private String sang; private String photo; private int price; } ShopController 클래스 생성 #@Controller public class ShopController { @GetMapping(\u0026#34;/\u0026#34;) public String home() { return \u0026#34;home\u0026#34;; } @GetMapping(\u0026#34;/shop/{path}\u0026#34;) //public String list(@PathVariable(\u0026#34;path\u0026#34;) String path) { // @GetMapping(\u0026#34;/shop/{path}\u0026#34;)의 {path}와 @PathVariable의 \u0026#34;path\u0026#34;내 값이 같으면 아래와 같이 생략 가능 public String list(@PathVariable String path) { System.out.println(path); return \u0026#34;list1\u0026#34;; } } list.jsp 수정 #\u0026lt;body\u0026gt; \u0026lt;h3 class = \u0026#34;alert alert-info\u0026#34;\u0026gt; ${shopinfo}\u0026lt;/h3\u0026gt; \u0026lt;/body\u0026gt; ShopController : String list() 수정 #\t@GetMapping(\u0026#34;/shop/{path}\u0026#34;) public String list(@PathVariable(\u0026#34;path\u0026#34;) String path, Model model) { System.out.println(path); String shopinfo=\u0026#34;\u0026#34;; if(path.equals(\u0026#34;list1\u0026#34;)) { shopinfo = \u0026#34;가방 상품 목록\u0026#34;; } else if(path.equals(\u0026#34;list2\u0026#34;)) { shopinfo = \u0026#34;슈즈 상품 목록\u0026#34;; } else { shopinfo = \u0026#34;액세서리 상품 목록\u0026#34;; } //상품 목록 담기 List\u0026lt;ShopDto\u0026gt; list = new ArrayList\u0026lt;ShopDto\u0026gt;(); if(path.equals(\u0026#34;list1\u0026#34;)) { list.add(new ShopDto(\u0026#34;도시락백\u0026#34;, \u0026#34;3.jpg\u0026#34;, 45000)); list.add(new ShopDto(\u0026#34;블랙토트백\u0026#34;, \u0026#34;7.jpg\u0026#34;, 178000)); list.add(new ShopDto(\u0026#34;스포티백\u0026#34;, \u0026#34;10.jpg\u0026#34;, 68000)); list.add(new ShopDto(\u0026#34;백팩\u0026#34;, \u0026#34;28.jpg\u0026#34;, 190000)); } if(path.equals(\u0026#34;list2\u0026#34;)) { list.add(new ShopDto(\u0026#34;플랫슈즈\u0026#34;, \u0026#34;5.jpg\u0026#34;, 98000)); list.add(new ShopDto(\u0026#34;그린오픈뮬\u0026#34;, \u0026#34;13.jpg\u0026#34;, 133000)); list.add(new ShopDto(\u0026#34;어그\u0026#34;, \u0026#34;22.jpg\u0026#34;, 150000)); list.add(new ShopDto(\u0026#34;타이거\u0026#34;, \u0026#34;26.jpg\u0026#34;, 270000)); } if(path.equals(\u0026#34;list3\u0026#34;)) { list.add(new ShopDto(\u0026#34;볼캡\u0026#34;, \u0026#34;6.jpg\u0026#34;, 68000)); list.add(new ShopDto(\u0026#34;오렌지키링\u0026#34;, \u0026#34;15.jpg\u0026#34;, 28000)); list.add(new ShopDto(\u0026#34;스크런치\u0026#34;, \u0026#34;2.jpg\u0026#34;, 18000)); list.add(new ShopDto(\u0026#34;곰돌이\u0026#34;, \u0026#34;29.jpg\u0026#34;, 37000)); } model.addAttribute(\u0026#34;list\u0026#34;,list); model.addAttribute(\u0026#34;shopinfo\u0026#34;, shopinfo); model.addAttribute(\u0026#34;count\u0026#34;,list.size()); return \u0026#34;list1\u0026#34;; } list1.jsp 수정 #\u0026lt;body\u0026gt; \u0026lt;h3 class=\u0026#34;alert alert-info\u0026#34;\u0026gt;${shopinfo}\u0026lt;/h3\u0026gt; \u0026lt;h3\u0026gt;총 ${count}개의 상품이 있습니다.\u0026lt;/h3\u0026gt; \u0026lt;hr\u0026gt; \u0026lt;c:forEach var=\u0026#34;dto\u0026#34; items=\u0026#34;${list}\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;photo\u0026#34;\u0026gt; \u0026lt;figure\u0026gt; \u0026lt;img src=\u0026#34;../res/shop/${dto.photo}\u0026#34;\u0026gt; \u0026lt;figcaprion\u0026gt; \u0026lt;h5\u0026gt;${dto.sang}\u0026lt;/h5\u0026gt; \u0026lt;h6\u0026gt; \u0026lt;fmt:formatNumber value=\u0026#34;${dto.price}\u0026#34; type=\u0026#34;number\u0026#34; /\u0026gt;원 \u0026lt;/h6\u0026gt; \u0026lt;/figcaprion\u0026gt; \u0026lt;/figure\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/c:forEach\u0026gt; \u0026lt;/body\u0026gt; ","date":"2023-11-09","permalink":"/devl/spring/003/","section":"Developer Course","summary":"web.","title":"Spring #3 기초 - Web"},{"content":"이클립스 lombok 설치 # 롬복 실행 Specify location 추가 설정\n인텔리제이는 이 과정을 건너뛰어도 된다고 함.\nSTS.exe 파일 찾아서 선택해주기 Install/Udate \u0026gt; Quit Installer\n주의 : 롬복 설치 경로에 한글이 있으면 STS.ex 설치 확인 스프링 실행 \u0026amp; 새 프로젝트 # 프로젝트명 작성하고\n패키키명에 java 넣으면 오류남 Finish\n오른쪽하단에 생성 중인\npom.xml #롬복 지정해주기 #https://mvnrepository.com/\n숫자 클릭\n코드 복사\npom.xml에서 \u0026lt;dependencies\u0026gt; 아래에 설치\n톰캣 설정 #new \u0026gt; other \u0026gt; server(검색해서 찾기)\n톰캣 9 선택\n경로 선택에서 bin 폴더 선택 Download and install\nfinish\n기타 설정 # servlet-context.xml 에서 # 패키지 파일명 servlet-context.xml 이렇게 패키지 파일명과 같아야 한다..\nservlet-context.xml에서 포워드 설정 된 부분 Run #초기에 프로젝트명 \u0026gt; run \u0026gt; run as 하면 내부에서 열림\n웹브라우저 설정 다시 해보면 웹드라우저에서 열린다.\n주소창에 \u0026rsquo;ex1\u0026rsquo;\u0026lt; 패키지명이 나온다. 롬복 사용하기 # @Data #Data = Getter + Setter + toString\n생성자 # @NoArgsConstructor : 디폴트 생성자\n@AllArgsConstructor : 모든 멤버를 파라미터를 받는 생성자\n@RequiredArgsConstructor : 필요한 인자만 생성자로 주입 필요한 인자에 @Nonnull 붙여준다.\n사용할 수 있는 생성자 확인해보기 DI(Dependency Injection) : 의존성 주입 #스프링의 대표적인 기능\n클래스에서 클래스 주입하기 # 직접 세팅 Myshop 설정 public MyShop(String sangpum) { super(); this.sangpum = sangpum; } private String sangpum; private int price; private String color; public String getSangpum() { return sangpum; } public void setSangpum(String sangpum) { this.sangpum = sangpum; } public int getPrice() { return price; } public void setPrice(int price) { this.price = price; } public String getColor() { return color; } public void setColor(String color) { this.color = color; } Person 설정 @Getter public class Person { private String name; private String addr; private MyShop myShop; public Person(String name) { this.name = name;\t} public void setAddr(String addr) { this.addr = addr; } public void setMyShop(MyShop myShop) { this.myShop = myShop; } public void wirteProcee() { System.out.println(\u0026#34;이름 : \u0026#34; + name); System.out.println(\u0026#34;주소 : \u0026#34; + addr); System.out.println(\u0026#34;쇼핑정보\u0026#34;); System.out.println(myShop.getSangpum() + \u0026#34;상품\u0026#34;); System.out.println(myShop.getPrice()+ \u0026#34;가격\u0026#34;); System.out.println(myShop.getColor() + \u0026#34;컬러\u0026#34;); } xml 파일 설정 \u0026lt;!-- Myshop--\u0026gt; \u0026lt;bean id=\u0026#34;myshop\u0026#34; class = \u0026#34;day1108.test3.MyShop\u0026#34;\u0026gt; \u0026lt;!-- 생성자를 통한 주입 1--\u0026gt; \u0026lt;constructor-arg value=\u0026#34;레이스 블라우스\u0026#34;/\u0026gt; \u0026lt;!-- 생성자를 통한 주입 2--\u0026gt; \u0026lt;constructor-arg\u0026gt; \u0026lt;value\u0026gt;레이스 블라우스\u0026lt;/value\u0026gt; \u0026lt;/constructor-arg\u0026gt; \u0026lt;!--setter를 통한 주입--\u0026gt; \u0026lt;property name =\u0026#34;color\u0026#34; value = \u0026#34;orange\u0026#34;/\u0026gt; \u0026lt;property name =\u0026#34;price\u0026#34; value = \u0026#34;45000\u0026#34;/\u0026gt; \u0026lt;/bean\u0026gt; \u0026lt;!--Psrson--\u0026gt; \u0026lt;bean id =\u0026#34;person\u0026#34; class = \u0026#34;day1108.test3.Person\u0026#34;\u0026gt; \u0026lt;constructor-arg value = \u0026#34;캔디\u0026#34;/\u0026gt; \u0026lt;property name=\u0026#34;addr\u0026#34;\u0026gt; \u0026lt;value\u0026gt;서울시 강남구 역삼동 비트캠프 빌딩\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; \u0026lt;!-- 레퍼런스 주입 --\u0026gt; \u0026lt;property name=\u0026#34;myShop\u0026#34; ref=\u0026#34;myshop\u0026#34;/\u0026gt; \u0026lt;/bean\u0026gt; 복습 #Student #@Setter @Getter public class Student { private String name; private String blood; private int age; } \u0026lt;bean id =\u0026#34;stu\u0026#34; class =\u0026#34;day1108.test4.Student\u0026#34;\u0026gt; \u0026lt;property name=\u0026#34;name\u0026#34; value = \u0026#34;강호동\u0026#34;\u0026gt;\u0026lt;/property\u0026gt; \u0026lt;property name=\u0026#34;age\u0026#34; value = \u0026#34;34\u0026#34;\u0026gt;\u0026lt;/property\u0026gt; \u0026lt;property name=\u0026#34;blood\u0026#34; value = \u0026#34;AB\u0026#34;\u0026gt;\u0026lt;/property\u0026gt; \u0026lt;/bean\u0026gt; Sawon #@AllArgsConstructor @Getter public class Sawon { private String name; private String city; private List\u0026lt;String\u0026gt; hobby; } \u0026lt;bean id=\u0026#34;sawon\u0026#34; class = \u0026#34;day1108.test4.Sawon\u0026#34;\u0026gt; \u0026lt;constructor-arg value=\u0026#34;이영자\u0026#34;/\u0026gt; \u0026lt;constructor-arg value=\u0026#34;서울\u0026#34;/\u0026gt; \u0026lt;constructor-arg\u0026gt; \u0026lt;list\u0026gt; \u0026lt;value\u0026gt;낚시\u0026lt;/value\u0026gt; \u0026lt;value\u0026gt;게임\u0026lt;/value\u0026gt; \u0026lt;value\u0026gt;여행\u0026lt;/value\u0026gt; \u0026lt;/list\u0026gt; \u0026lt;/constructor-arg\u0026gt; \u0026lt;/bean\u0026gt; Bitcamp #@Setter public class Bitcamp { private Student stu; private Sawon sawon; public void infoProcess() { System.out.println(\u0026#34;*** 학생 정보 ***\u0026#34;); System.out.println(\u0026#34;이름 : \u0026#34; + stu.getName()); System.out.println(\u0026#34;이름 : \u0026#34; + stu.getBlood()); System.out.println(\u0026#34;이름 : \u0026#34; + stu.getAge()); System.out.println(); System.out.println(\u0026#34;*** 사원 정보 ***\u0026#34;); System.out.println(\u0026#34;사원명 : \u0026#34; + sawon.getName()); System.out.println(\u0026#34;지역 : \u0026#34; + sawon.getCity()); System.out.println(\u0026#34;취미 : \u0026#34;); List\u0026lt;String\u0026gt; hooby = sawon.getHobby(); hooby.stream().forEach(System.out::println); } \u0026lt;bean id=\u0026#34;bit\u0026#34; class=\u0026#34;day1108.test4.Bitcamp\u0026#34;\u0026gt; \u0026lt;property name=\u0026#34;sawon\u0026#34; ref=\u0026#34;sawon\u0026#34;/\u0026gt; \u0026lt;!--ref에 id 연결--\u0026gt; \u0026lt;property name=\u0026#34;stu\u0026#34; ref=\u0026#34;stu\u0026#34;/\u0026gt;\t\u0026lt;!--ref에 id 연결--\u0026gt; \u0026lt;/bean\u0026gt; main #\tpublic static void main(String[] args) { ApplicationContext context = new ClassPathXmlApplicationContext(\u0026#34;appcontext1.xml\u0026#34;); Bitcamp bitcamp = (Bitcamp)context.getBean(\u0026#34;bit\u0026#34;); bitcamp.infoProcess();\t} 결과 #*** 학생 정보 *** 이름 : 강호동 이름 : AB 이름 : 34 *** 사원 정보 *** 사원명 : 이영자 지역 : 서울 취미 : 낚시 게임 여행 ","date":"2023-11-08","permalink":"/devl/spring/001/","section":"Developer Course","summary":"이클립스 lombok 설치 # 롬복 실행 Specify location 추가 설정","title":"Spring #1 기초 - 세팅 \u0026 DI"},{"content":"","date":null,"permalink":"/categories/database/","section":"Categories","summary":"","title":"Database"},{"content":"","date":null,"permalink":"/tags/study/","section":"Tags","summary":"","title":"Study"},{"content":"","date":null,"permalink":"/devl/study/","section":"Developer Course","summary":"","title":"Study"},{"content":" 데이터 무결성(Data Integrity) : 데이터 값이 정확한 상태 RDBMS #관계형 데이터베이스.\n스키마 # 데이터의 구조와 구성을 정의\n데이터베이스 테이블, 열, 관계, 제약조건 등의 정보가 포함\n논리적 스키마 :\n데이터베이스의 전체적인 구조를 정의 테이블, 열 , 테이블 간의 관계 등을 포함 DMBS의 사용자가 데이터에 접근할 수 있는 방식을 결정 물리적 스키마 :\n데이터를 실제로 어떻게 저장하고 처리하는지 정의 데이터 파일, 인덱스 , 저장 위치 및 성능 향상을 위한 구체적인 구조를 다룸. 테이블 구조 #키의 종류 # 슈퍼키 (Super Key) : 유일성을 만족하는 키 복합키 (Composite Key) : 2개 이상의 속성을 사용한 키 후보키 (Candidate Key) : 유일성과 최소성을 만족하는 키 기본키 (Primary Key) : 후보키에서 선택된 키. NULL 값 불가, 기본키 속성끼리 중복 불가 대체키 (Alternate Key) : 후보 키 중에 기본 외의 것 외래키 (Foreign Key) : 다른 테이블 간의 기본키를 참조하는 속성. 테이블들 간의 관계를 나타냄 제약 조건 # 제약 조건 : 데이터를 작성 할 때 조건에 맞지 않는 데이터를 입력시키지 않기 위한 구조. 제약을 둠으로써 데이터의 무결성을 가질 수 있음. 제약명 설명 PRIMARY KEY 제약 컬럼 값은 반드시 존재해야하며 유일해야함 UNIQUE, NOTNULL 제약조건 결합 UNIQUE 제약 중복값 금지, 해당 컬럼은 유일한 값을 가짐 NOT NULL 제약 NULL 값 금지 CHECK 제약 해당 컬럼에 입력할 수 있는 값의 범위나 조건 지정 FOREIGN KEY 제약 다른 테이블의 기본 키 또는 고유 키를 참조하는 제약 DEFAULT 제약 해당 필드의 디폴트 값을 설정할 수 있게 해주는 제약 참조 https://kr98gyeongim.tistory.com/98\n트랜잭션 # 유사한 시스템에서 데이터베이스 상호작용의 단위 (또는 논리적 작업 단위) 유사한 시스템 : 트랜잭션이 성공과 실패가 분명하고, 상호 독립적이며, 일관되고 믿을 수 있는 시스템 트랜잭션 ACID 특성 # Atomicity(원자성)\n사전적 의미 : 더이상 쪼갤 수 없음 트랜잭션이 데이터베이스에 모두 반영되거나, 전혀 반영되지 않아야하는 것. 중간단계에서 실패되는 일이 없음 Consistency(정합성)\n정합성 : 정언명제의 판단, 논리적 연관에 의해 성립됨. 모순 혹은 오류 없음을 의미. 전제 및 결론, 논증이 모두 참이므로 반드시 참. 경험의 유무, 관점의 파이에 종속되지 않음. 데이터 정합성 : 어떤 데이터들이 값이 서로 일치함. 트랜잭션 처리 전과 처리 후 데이터의 모순이 없는 상태 작업의 처리 결과가 항상 일관성이 있어야 함 은행에서는 계좌 잔고가 항상 정확하고 일관된 상태여야 합니다. 이것은 한 거래가 다른 거래에 영향을 미치지 않고, 계좌 잔고가 항상 올바르게 유지되는 것을 보장하는 것을 의미\nIsolation(독립성)\n트랜잭션 수행 시 다른 트랜잭션의 연산 작업이 끼어들지 못하도록 보장하는 것. 트랜잭션 밖의 어떤 연산도 중간 단계의 데이터를 볼 수 없음. Durability(지속성)\n성공적으로 수행된 트랜잭션은 영원히 반영되어야 함 모든 트랜잭션은 로그로 남음. 정규화 #이상 #테이블에서 일부 속성들의 종속으로 인해 데이터 중복이 발생하고, 이 중복으로 인해 테이블 조작 시 문제가 발생하는 현상을 의미\n삽입 이상 : 테이블에 데이터를 삽입할 때 의도와는 관계없이 원하지 않은 값들로 인해 삽입할 수 없게 되는 현상\n삭제 이상 : 테이블에서 한 튜플을 삭제할 때 의도와는 상관없는 값들도 함께 삭제되는, 즉 연쇄삭제가 발생하는 현상\n갱신 이상 : 테이블에서 튜플에 있는 속성 값을 갱신할 때 일부 튜플의 정보만 갱신되어 정보에 불일치성이 생기는 현상 정규화 # 제 1정규형 : 도메인이 원자값만으로 되어 있는 정규형.\n제 2정규형 : 테이블이 제 1 정규형이고 기본키가 아닌 모든 속성이 기본키에 대해 완전 함수적 종속을 만족하는 정규형.\n함수형 종속? 데이터의 의미를 표현하는 것으로, 제약 조건이 되는 동시에 데이터베이스에서 항상 유지돼야 할 조건\n","date":"2023-11-02","permalink":"/devl/study/010/","section":"Developer Course","summary":"데이터 무결성(Data Integrity) : 데이터 값이 정확한 상태 RDBMS #관계형 데이터베이스.","title":"프로젝트를 위한 개념 - Database"},{"content":"관리자 비밀번호 확인 # Server \u0026gt; 서버 관리 및 설정 변경 기존에 만들었던 pem파일 불러오기 비밀번호 확인 \u0026gt; 복사해서 저장해놓기 cmd # yes \u0026gt; 방금 전 비밀번호 넣기\npasswd \u0026gt; root 비밀번호 변경하기\nMysql # Cloud DB for MySQL에서 작업 DB 서버 생성 # % : 원격으로 접속할 때 접근 무조건 허용함 최종 정보 퍼블릭 도메인 발급 # 퍼블릭 도메인이 미할당 되어있음 DB관리 옵션 에서 \u0026gt; 퍼블릭 도메인 \u0026gt; 예 이렇게 변경된다.\nACG 추가 설정 # cloud-mysql ACG 설정하기 접속 ## 1) 업데이트 :~# apt-get update # 2) MYSQL 설치 :~# apt-get install mysql-client 설치 전 update를 해준다. mysql 설치 # 접속하는 방법 :~# mysql -h db-jbnp5-kr.vpc-pub-cdb.ntruss.com -u study -p -h: 호스트 주소. 퍼블릭 도메인 입력 로컬계정에서 테스트 # DB 업로드하기 D:\\naver0829\u0026gt;mysqldump -u root -p bit701\u0026gt;mysqlrootdb.sql D:\\naver0829\u0026gt;mysql -h db-jbnp5-kr.vpc-pub-cdb.ntruss.com -u study -p studydb \u0026lt; mysqlrootdb.sql mysql\u0026gt; use studydb Database changed mysql\u0026gt; show tables; +-------------------+ | Tables_in_studydb | +-------------------+ | answersboard | | myshop | | simpleboard | | student | | test | +-------------------+ 5 rows in set (0.01 sec) ","date":"2023-10-31","permalink":"/devl/ncp/b002/","section":"Developer Course","summary":"관리자 비밀번호 확인 # Server \u0026gt; 서버 관리 및 설정 변경 기존에 만들었던 pem파일 불러오기 비밀번호 확인 \u0026gt; 복사해서 저장해놓기 cmd # yes \u0026gt; 방금 전 비밀번호 넣기","title":"ncp #2 기본 설정"},{"content":"","date":null,"permalink":"/draft/","section":"Drafts","summary":"","title":"Drafts"},{"content":" 혹시 뭔가 안될 때 참고용 사이트 즐겨찾기 설정 #Service \u0026gt; 검색 \u0026gt; 즐겨찾기 설정\nVPC (Virtual Private Cloud) 퍼블릭 클라우드 상에서 제공되는 고객 전용 사설 네트워크 공간 ACG 보안 : 퍼블릭 클라우드상에서도 엄격하게 적용됨. 제한있음 (3-4개 정도?) Cloud DB for MySQL 데이터베이스 서비스를 쉽고 간편하게 구축하고 관리 Server 리눅스 서버 생성용 vpc #1. vpc 생성 # vpc Management vpc이름에 공백 불허\n생성 \u0026gt; 상태 [생성 중] \u0026gt; (기다리면) 상태 [운영 중]으로 변경됨\n2. Subnet 생성 # subnet Management 3. Server 생성 # ACG 생성 ACG Inbound 설정 ACG Outbound 설정 Inbound 설정과 똑같이 설정 VCP \u0026gt; Network ACL \u0026gt; ACL Rule 웹으로 들어오는 방화벽 설정 기존 콘솔화면 ubuntu 20 선택 서버 세부 설정 eth0 은 별도 설정없이 [+추가]하기 반드시 공인IP에서 새로운 공인 IP할당 나머지는 그대로 인증키 설정 이름은 임의로 설정해도 됨. 생성 및 저장해서 파일을 잘 보관해 놓을 것 (또 만들면 서버부터 다 다시 만들어야함.) 네트워크 접근 설정 최종 확인 ","date":"2023-10-30","permalink":"/devl/ncp/b001/","section":"Developer Course","summary":"혹시 뭔가 안될 때 참고용 사이트 즐겨찾기 설정 #Service \u0026gt; 검색 \u0026gt; 즐겨찾기 설정","title":"ncp #1 기본 설정"},{"content":"","date":null,"permalink":"/categories/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4%EA%B0%9C%EB%B0%9C/","section":"Categories","summary":"","title":"소프트웨어개발"},{"content":"라이브러리와 프레임워크의 차이 # 프레임워크 애플리케이션 개발 시 필수적인 코드, 알고리즘, DB 커넥션 등을 위한 뼈대 설계와 구현을 재사용이 가능한 클래스와 인터페이스의 집합 JAVA - SPRING / PYTHON - DJANGO 등 라이브러리 개발 할 때 프로그램이 사용하는 비휘발성 자원 모임 구성 데이터, 문서, 도움말, 메시지 틀, 미리 작성된 코드, 함수 , 클래스 ,값, 자료형 사양 등등 포함. 재사용이 가능한 기능을 미리 구현 -\u0026gt; 필요한 곳에서 호출 ex) Junit, Lombok ex) Spring 프레임워크의 내부 라이브러리 : Spring Boot, Spring JDBC, Spring MVC 등 프레임워크와 라이브러리의 차이 비유\n프레임워크 : 모델하우스 라이브러리 : 이케아에서 산 재료로 가구를 조립 제어역전? 제어흐름?\n프레임워크\n프레임워크는 전체적인 흐름을 쥐고 있음 제어의 역전의 개념이 적용돼있음 프레임워크에 제어의 흐름을 넘겨 개발자가 작성하는 코드에서 신경써야 할 부분을 줄임 애플리케이션의 코드는 프레임워크가 짜놓은 틀 안에서 수동적으로 동작. 라이브러리\n개발자가 전체적인 흐름을 만듦. 개발자가 필요할 때 마다 능동적으로 라이브러리를 호출하여 사용. 참조\nhttps://code-lab1.tistory.com/284 https://velog.io/@whitecloud94/%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC-vs-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC GIT # 분산형 버전 관리 시스템 버전 관리 : 특정 시점의 버전을 다시 꺼내올 수 있는 시스템. VCS(Version Control System : 버전 관리 시스템) # 소스관리 또는 소스코드 관리 백업하여 분실의 위험에서 보호 개정 전후 내용을 파악 -\u0026gt; 추후 오류에 대비 소스코드의 변경사항 추적 Branch로 프로젝트에 영향을 최소화하면서 새로운 부분을 개발하기 위함 Branch # 가지 또는 분기점을 의미. 작업할 때에 현재 상태를 복사하여 Branch에서 작업을 한 후 완전하다 싶을 때 Marge를 함. 파일을 복사하는 것이 아닌 스냅샷 형태로 관리하기 때문에 부담없이 이용 가능 Pull Request # 코드 변경 사항을 다른사람들에게 보여주고 리뷰를 받기위한 절차 원격 저장소에 풀 리퀘스트를 생성 리뷰어들이 승인하면 머지 가능. 풀 리퀘스트를 통해 변경 사항을 기본 브랜치로 병합. Merge # 풀 리퀘스트의 일부. 풀 리퀘스트가 승인되고 변경 사항이 병합될 때 발생. 코드 변경을 기본 브랜치로 실제로 병합하는 작업 다른 Branch의 내용을 현재 Branch로 가져와 합치는 작업 main(master/production) 브랜치와 dev(development) 브랜치를 분리하는 이유 # 코드의 안정성 유지 main 브랜치는 프로덕션 코드가 있어 안정성이 높아야함. 새로운 기능이나 변경사항이 main에 직접 병합되는 것을 방지 개발단계와 프로덕션 단계를 분리 dev 브랜치는 개발 중인 기능 및 변경사항을 통합하고 테스트 하는 곳으로 사용 병합 충돌을 관리 코드 리뷰와 협업을 용이하게 하기 위해 dev 브랜치는 다른 개발자 및 리뷰어들이 변경사항을 검토 및 피드백을 하는 공간으로 사용 릴리스 관리를 지원하기 위해 안정성을 유지하고 테스트를 통과한 변경사항만이 main 브랜치로 머지됨. Commit Message # 커밋메세지의 7가지 규칙\n제목과 본문을 한 줄 띄워 분리하기 추후 git log --oneline, git shortlog을 사용했을 때 제목과 내용을 구분 시켜줌 제목은 50글자 이내로 제한 제목의 첫 글자는 대문자로 작성 제목 끝에는 . 금지 제목은 명령조로 깃의 빌트인 컨벤션을 그대로 따른다는 것을 의미 본문은 영문 기준 72자마다 줄 바꾸기 어떻게 보다는 무엇을, 왜에 맞춰 작성하기 좋은 커밋 메세지 영단어\nFIX\nFix A : A를 수정합니다. Fix A in B : B의 A를 수정합니다. (가장 많이 사용되는 패턴) Fix A which B, Fix A that B : B절인 A를 수정합니다. 무엇을 수정한 것인지 보다 상세하게 설명해 줄 때 사용 Fix A to B, Fix A to be B : B를 위해 A를 수정합니다. 왜 수정하는지를 추가로 설명 Fix A so that B : A를 수정해서 B가 되었습니다. Fix A where B : B처럼 발생하는 A를 수정했습니다. Fix A when B : B일 때 발생하는 A를 수정했습니다. ADD : 코드나 테스트, 예제, 문서 등의 추가가 있을 때 사용\nAdd A : A를 추가합니다. Add A for B : B를 위해 A를 추가했습니다. Add A to B : B에 A를 추가했습니다. REMOVE (Clean 또는 Eliminate를 사용하기도 함)\nRemove A : A를 삭제합니다. Remove A from B : B에서 A를 삭제합니다. USE : 특별시 무언가를 사용해 구현을 하는 경우\nUse A : A를 사용합니다. Use A for B : B에 A를 사용합니다. Use A to B : B가 되도록 A를 사용합니다. Use A in B : B에서 A를 사용합니다. Use A instead of B : B 대신 A를 사용합니다. REFACTOR : 전면 수정이 있을 때\nSIMPLIFY : 복잡한 코드를 단순화 할 때\nUPDATE : 개정이나 버전 업데이트가 있을 경우\nfix와 달리 잘못된 것을 바로잡는 것이 아닐 때 사용. 원래도 정상이었지만 수정, 추가, 보완은 한다는 의미. 주로 문서나 리소스, 라이브러리 등에 사용 Update A to B : A를 B로 업데이트 합니다. IMPROVE\n향상이 있을 때 사용 호환성, 테스트 커버리지, 성능, 검증 기능, 접근성 등 MAKE : 주로 기존 동작의 변경을 명시\nMake A B : A를 B하게 만듭니다. IMPLEMENT\nAdd에 비해 더 큰 단위 코드에 사용. 모듈이나 클래스 등. 구현체를 완성시켰을 때 사용 Implement A : A를 구현합니다. Implement A to B : B를 위해 A를 구현합니다. REVISE : Update와 비슷하나 문서의 개정이 있을 때 주로 사용\nCORRECT : 주로 문법의 오류나 타입의 변경, 이름 변경 등에 사용\nENSURE : 무엇이 확실하게 보장받는 다는 것을 의미.\nEnsure A : A가 확실히 보장되도록 수정했습니다. PREVENT : 특정한 처리를 못하게 막음.\nPrevent A : A하지 못하게 막습니다. Prevent A from B : A를 B하지 못하게 막습니다. AVOID : 회피를 의미\nAvoid A : A를 회피합니다. Avoid A if B, Avoid A when B : B인 상황에서 A를 회피합니다. MOVE : 코드의 이동이 있을 때 사용\nMove A to B, Move A into B : A를 B로 옮깁니다. RENAME : 이름이 변경되었을 때 사용\nRename A to B : A를 B로 이름 변경합니다. ALLOW : make와 비슷하지만 허용을 표현할 때 사용\nAllow A to B : A가 B를 할 수 있도록 허용합니다. VERIFY : 검증 코드를 넣을 때 주로 사용\nVerify A : A를 검증합니다. SET : 변수 값을 변경하는 등 작은 수정에 주로 ㅅ용\nSet A to B : A를 B로 설정합니다. PASS : 파라미터를 넘기는 처리에 주로 사용\nPass A to B : A를 B로 넘깁니다. 커밋메세지 참조\nhttps://blog.ull.im/engineering/2019/03/10/logs-on-git.html https://meetup.nhncloud.com/posts/106 RESTful API #프로토콜 및 아키텍처 스타일 # HTTP 기반, HTTP 메소드를 사용하여 상태 전이를 나타님 HTTP메소드 : GET, POST, PUT, DELETE 등 REST : 독립적인 프로토콜, 웹 아키텍쳐 스타일 URI 설계 및 지원 # 리소스가 URI(Uniform Resource Identifier)를 통해 고유하게 식별됨. 리소스 : 웹에서 하나의 웹페이지, 이미지, 텍스트 문서, 데이터베이스 레코드 등 각각의 리소스는 고유한 URI를 가짐 -\u0026gt; URI로 해당 리소스에 접근하거나 조작 가능 URI의 경로는 리소스의 계층적이 구조 HTTP 메소드를 사용하여 리소스와 상호작용 상태 저장 및 상태 전이 # REST는 상태 저장을 강조. 클라이언트와 서버 간의 상태 전이는 HTTP 메소드를 통해 이루어짐. 특징 및 제약 사향 # REST는 일련의 제약사항을 가짐 클라이언트 - 서버, 상태 없음, 계층화, 인터페이스 일관성, 코드 온 디맨드 등의 특징을 강조 참조 https://mannhowie.com/rest-api\nAPI Endpoint # API가 서버에서 리소스에 접근할 수 있도록 하는 URL 애플리케이션이 API에 데이터를 가져오기 (request)를 보낸다고 했을 때 request를 받는 지점. 위 요청(호출)을 받은 디지털 노드(위치)를 API Endpoint라고 함 같은 URL이더라도 HTTP 메소드가 다르면 각각 다른 요청을 할 수 있도록 구별해 줌. 참조 https://velog.io/@kho5420/Web-API-%EA%B7%B8%EB%A6%AC%EA%B3%A0-EndPoint\nPostman 사용법 #React / Spring 프로젝트 생성해보기 #(기본 코드가 제공되니 가능하면 실행까지 해보길 권장)\n포트 번호 (기본값) # React - localhost : 3000 Spring - localhost : 8080 ","date":"2023-10-30","permalink":"/devl/study/009/","section":"Developer Course","summary":"라이브러리와 프레임워크의 차이 # 프레임워크 애플리케이션 개발 시 필수적인 코드, 알고리즘, DB 커넥션 등을 위한 뼈대 설계와 구현을 재사용이 가능한 클래스와 인터페이스의 집합 JAVA - SPRING / PYTHON - DJANGO 등 라이브러리 개발 할 때 프로그램이 사용하는 비휘발성 자원 모임 구성 데이터, 문서, 도움말, 메시지 틀, 미리 작성된 코드, 함수 , 클래스 ,값, 자료형 사양 등등 포함.","title":"프로젝트를 위한 개념 - 협업툴 이해"},{"content":" 코드 리팩토링 예제 원본 코드 public class PrintPrimes { public static void main(String[] args) { final int M = 1000; final int RR = 50; final int CC = 4; final int WW = 10; final int ORDMAX = 30; int P[] = new int[M+1]; int PAGENUMBER; int PAGEOFFSET; int ROWOFFSET; int C; int J; int K; boolean JPRIME; int ORD; int SQUARE; int N; int MULT[] = new int[ORDMAX + 1]; J = 1; K = 1; P[1] = 2; ORD = 2; SQUARE = 9; while (K \u0026lt; M) { do { J = J + 2; if (J == SQUARE) { ORD = ORD + 1; SQUARE = P[ORD] * P[ORD]; MULT[ORD -1] = J; } N = 2; JPRIME = true; while (N \u0026lt; ORD \u0026amp;\u0026amp; JPRIME) { while (MULT[N] \u0026lt; J) MULT[N] = MULT[N] + P[N] + P[N]; if (MULT[N] == J) JPRIME = false; N = N + 1; } } while (!JPRIME); K = K + 1; P[K] = J; } { PAGENUMBER = 1; PAGEOFFSET = 1; while (PAGEOFFSET \u0026lt;= M) { System.out.println(\u0026#34;The First \u0026#34; + M + \u0026#34; Prime Numbers --- Page \u0026#34; + PAGENUMBER); System.out.println(\u0026#34;\u0026#34;); for (ROWOFFSET = PAGEOFFSET; ROWOFFSET \u0026lt; PAGEOFFSET + RR; ROWOFFSET++) { for (C = 0; C \u0026lt; CC; C++) if (ROWOFFSET + C * RR \u0026lt;= M) System.out.format(\u0026#34;%10d\u0026#34;, P[ROWOFFSET + C * RR]); System.out.println(\u0026#34;\u0026#34;); } System.out.println(\u0026#34;\\f\u0026#34;); PAGENUMBER = PAGENUMBER + 1; PAGEOFFSET = PAGEOFFSET + RR * CC; } } } } 리팩토링 package literatePrimes; public class PrimePrinter { public static void main(Strimg[] args){ final int NUMBER_OF_PRIMES = 1000; int[] primes = PrimeGenerator.generate(NUMBER_OF_PRIMES); final int ROWS_PER_PAGE = 50; final int COLUMNS_PER_PAGE = 4; RowColumnPagePrinter tablePrinter = new RowColumnPagePrinter(ROWS_PER_PAGE, COLUMNS_PER_PAGE, \u0026#34;The First \u0026#34; + NUMBER_OF_PRIMES + \u0026#34; Prime Numbers\u0026#34;); tablePrinter.print(primes); } } package literatePrimes; import java.io.PrintStream; public class RowColumnPagePrinter { private int rowsPerPage; private int columnsPerPage; private int numbersPerPage; private String pageHeader; private PrintStream printStream; public RowColumnPagePrinter(int rowsPerPage, int columnsPerPage, String pageHeader) { this.rowsPerPAge = rowsPerPage; this.columnsPerPage = columnsPerPage; this.pageHeader = pageHeader; numberPerPage = rowsPerPage * columnsPerPage; printStream = System.out; } public void print(int data[]) { int pageNumber = 1; for (int firstIndexOnPage = 0; firstIndexOnPage \u0026lt; data.length; firstINdexOnPage += numbersPerPage) { int lastIndexOnPage = Math.min(firstIndexOnPage + numbersPerPage -1, data.length -1); printPageHeader(pageHeader, pageNumber); printPage(firstIndexOnPage, lastIndexOnPage, data); printStream.println(\u0026#34;\\f\u0026#34;); pageNumber++; } } private void printPage(int firstIndexOnPage, int lastIndexOnPage, int[] data) { int firstIndexOfLastRowPage = firstIndexOnPage + rowsPerPage - 1; for (int firstIndexInRow = firstIndexOnPage; firstIndexInRow \u0026lt;= firstIndexOfLastRowOnPage; firstIndexInRow++) { printRow(firstIndexInRow, lastIndexOnPage, data); printStream.println(\u0026#34;\u0026#34;); } } private void printRow(int firstIndexInRow, int lastIndexOnPage, int[] data) { for (int column = 0; column \u0026lt; columnsPerPage; column++) { int index = firstIndexInRow + column * rowsPerPage; if(index \u0026lt;= lastIndexOnPage) printStream.format(\u0026#34;%10d\u0026#34;,data[index]); } } private void printPageHeader(String pageHeader, int pageNumber) { printStream.println(pageHeader + \u0026#34; --- Page \u0026#34; + pageNumber); printStream.println(\u0026#34;\u0026#34;); } public void setOutput(PrintSteam printStream){ this.printStream = printStream; } } package literatePrimes; import java.util.ArrayList; public class PrimeGenerator { private static int[] primes; private static ArrayList\u0026lt;Integer\u0026gt; multiplesOfPrimeFactors; protected static int[] generate(int n) { primes = new int[n]; multiplesOfPrimeFactors = new ArrayList\u0026lt;Integer\u0026gt;(); set2AsFirstPrime(); checkOddNumbersForSubsequentPrimes(); return primes; } private static void set2AsFirstPrime() { primes[0] = 2; multiplesOfPrimeFactores.add(2); } private static void checkOddNumbersForSubsequentPrimes() { int primeIndex = 1; for (int candidate = 3; primeIndex \u0026lt; primes.length; cnadidate += 2) { if (isPrime(candidate)) primes[primeIndex++] = cadidate; } } private static boolean isPrime(int candidate) { if (isLeastRelevanMultipleOfNextLargerPrimeFactor(candidate)) { multiplesOfPrimeFac } return isNotMultipleOfAnyPreviousPrimeFactor(candidate); } private static boolean isLeastRelevanMultipleOfNextLargerPrimeFactor(int candidate) { int nextLargerPrimeFactor = primes[multiplesOfPrimeFactors.size()]; int leastRelevantMultiple = nextLatgerPrimeFactor * nextLargerPrimeFactor; return cadidate == leastRelevanMultiple; } private static boolean isNotMultipleOfAnuPreviousPrimeFactor(int candidate) { for (int n = 1; n \u0026lt; multiplesOfPrimeFactors.size(); n++) { if(isMultipleOfNthPrimeFactor(candidate, n)) return false; } return true; } private static boolean isMultipleOfNthPrimeFactor(int cadidate, int n) { return candidate == smallestOddNthMultipleNotLessThanCadidate(cadidate, n); } private static int smallestOddNthMultipleNotLessThanCadidate(int candidate, int n) { int multiple = multiplesOfPrimeFactors.get(n); while (multiple \u0026lt; candidate) multiple += 2 * primes[n]; multiplesOfPrimeFactors.set(n, multiple); return multiple; } } ","date":"2023-10-28","permalink":"/devl/typing/004/","section":"Developer Course","summary":"코드 리팩토링 예제","title":"Day 04"},{"content":"","date":null,"permalink":"/categories/%EC%BD%94%EB%94%A9%ED%95%84%EC%82%AC/","section":"Categories","summary":"","title":"코딩필사"},{"content":"","date":null,"permalink":"/devl/typing/","section":"Developer Course","summary":"","title":"코딩필사"},{"content":"","date":null,"permalink":"/categories/linux/","section":"Categories","summary":"","title":"Linux"},{"content":"","date":null,"permalink":"/devl/linux/","section":"Developer Course","summary":"","title":"Linux"},{"content":"접속 시 루트 권한으로 바로 접속 # # PS2 : 프롬프트 상태를 묻는 것. 보조 프롬프트 root@aiur:~/d8# echo $PS2 # ↑ 파란부분 주 프롬프트 명령어를 찾는 디렉토리 #root@aiur:~/d8# bbbb bbbb: 명령을 찾을 수 없습니다 #패스 묻기 root@aiur:~/d8# echo $PATH /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin # ↑명령을 찾는 각각의 폴더들. 명령을 치면 위 폴더에서 명령어를 찾아봄 다시\n# 1) 현재 디렉토리에 root@aiur:~/d8# ls my1.sh root@aiur:~/d8# my1.sh my1.sh: 명령을 찾을 수 없습니다 # 2) 명령을 찾는 디렉토리 확인 root@aiur:~/d8# echo $PS1 \\[\\e]0;\\u@\\h: \\w\\a\\]${debian_chroot:+($debian_chroot)}\\u@\\h:\\w\\$ # 현재 경로가 없음 # 3) 현재경로를 패스에 추가 root@aiur:~/d8# PATH=$PATH:. root@aiur:~/d8# echo $PATH /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin:. root@aiur:~/d8# my1.sh -bash: ./my1.sh: 허가 거부 root@aiur:~/d8# l 합계 16K -rw------- 1 root root 12K 10월 27 10:22 .my1.sh.swp -rw-r--r-- 1 root root 103 10월 27 10:22 my1.sh root@aiur:~/d8# bash my1.sh Shell Script Start user : root host : aiur PS1 : #실행 권한 추가하기 root@aiur:~/d8# chmod +x my1.sh # -x는 권한을 뺏는 명령어 root@aiur:~/d8# my1.sh Shell Script Start user : root host : aiur PS1 : my3.sh 문서 편집해서 명령처리 ## my3.sh 편집모드 1 #!/bin/bash 2 if [ ! -d /down2 ] # -d(디렉토리) down2 폴더가 없으면 아래를 실행해라 3 then 4 mkdir /down2 5 fi 6 cd /down2 7 8 ftp -np \u0026#34;ftp.kaist.ac.kr\u0026#34; \u0026lt;\u0026lt; E 9 user \u0026#34;ftp\u0026#34; 10 cd \u0026#34;/apache/httpd\u0026#34; 11 get \u0026#34;httpd-2.4.58.tar.gz\u0026#34; 12 by 13 E # 실행하기 root@aiur:~/d8# chmod +x my3.sh root@aiur:~/d8# my3. # 다운 확인하기 root@aiur:~/down# ls /down2/ httpd-2.4.58.tar.gz cmd #c:\\dd\u0026gt;copy con my.bat mkdir c:/dd/dd100 calc mspaint notepad 1개 파일이 복사되었습니다. #ctrl + c # 디렉토리 경로 들어가서 my.bat 실행 root@aiur:~/d8# seq 3 1 2 3 root@aiur:~/d8# seq 5 7 5 6 7 root@ root@aiur:~/d8# seq 2 2 10 2 4 6 8 10 root@aiur:~/d8# seq 5 5 100 | column 5 15 25 35 45 55 65 75 85 95 10 20 30 40 50 60 70 80 90 100 root@aiur:~/d8# seq 5 5 100 | paste - - - 5 10 15 20 25 30 35 40 45 50 55 60 65 70 75 80 85 90 95 100 # -b 빌트인 명령어 root@aiur:~/d8# compgen -b | paste - - - - . : [ alias bg bind break builtin caller cd command compgen complete compopt continue declare dirs disown echo enable eval exec exit export false fc fg getopts hash help history jobs kill let local logout mapfile popd printf pushd pwd read readarray readonly return set shift shopt source suspend test times trap true type typeset ulimit umask unalias unset wait 사용자 50명 만들기 # autouseradd.sh 파일 편집 1 #자동으로 유저 50명 만들기 2 3 #!/bin/bash 4 5 for i in `seq 50` 6 do 7 useradd m$i 8 passwd m$i \u0026lt;\u0026lt; END 9 1 # 패스워드 입력하는 부분 10 1 # 패스워드 입력하는 부분 11 END 12 done root@aiur:~/d8# ls autouseradd.sh httpd-2.4.58.tar.gz my1.sh my2.sh my3.sh root@aiur:~/d8# chmod +x autouseradd.sh root@aiur:~/d8# ./autouseradd.sh 새 암호: 새 암호 다시 입력: passwd: 암호를 성공적으로 업데이트했습니다 새 암호: 새 암호 다시 입력: passwd: 암호를 성공적으로 업데이트했습니다 새 암호: 새 암호 다시 입력: passwd: 암호를 성공적으로 업데이트했습니다 ... # 결과확인 root@aiur:~/d8# ls /home j m11 m15 m19 m22 m26 m3 m33 m37 m40 m44 m48 m6 wa lost+found m12 m16 m2 m23 m27 m30 m34 m38 m41 m45 m49 m7 wa2 m1 m13 m17 m20 m24 m28 m31 m35 m39 m42 m46 m5 m8 m10 m14 m18 m21 m25 m29 m32 m36 m4 m43 m47 m50 m9 root@aiur:~/d8# nl /etc/passwd ... 44 m1❌1003:1003::/home/m1:/bin/bash 45 m2❌1004:1004::/home/m2:/bin/bash 46 m3❌1005:1005::/home/m3:/bin/bash 47 m4❌1006:1006::/home/m4:/bin/bash 48 m5❌1007:1007::/home/m5:/bin/bash 49 m6❌1008:1008::/home/m6:/bin/bash 방금 만든 유저 모두 삭제 # userautodel.sh 파일 편집 1 #자동으로 유저 50 삭제하기 2 3 #!/bin/bash 4 5 for i in `seq 50` 6 do 7 userdel -r m$i \u0026lt;\u0026lt; END 8 9 END 10 done root@aiur:~/d8# chmod +x userautodel.sh root@aiur:~/d8# ./userautodel.sh # 결과 확인 root@aiur:~/d8# ls /home j lost+found wa wa2 시스템 전체에서 찾기 #wa2@aiur:~$ find / -name *.c wa2@aiur:~$ find /var -type 2 \u0026gt;/dev/null 표준 입출력 # wa2@aiur:~$ cal 1\u0026gt; a1 wa2@aiur:~$ cal 2\u0026gt; a1 10월 2023 일 월 화 수 목 금 토 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 stdin 0 stdout 1 stderr 2\nwa2@aiur:~$ sddkfh 2\u0026gt; a3 wa2@aiur:~$ nl a3 1 sddkfh: 명령을 찾을 수 없습니다 wa2@aiur:~$ sddkfh 2\u0026gt;\u0026amp;1 a3 sddkfh: 명령을 찾을 수 없습니다 wa2@aiur:~$ sddkfh 2\u0026gt;\u0026amp;1 a4 sddkfh: 명령을 찾을 수 없습니다 wa2@aiur:~$ nl a4 nl: a4: 그런 파일이나 디렉터리가 없습니다 wa2@aiur:~$ sddkfh 1\u0026gt;\u0026amp;2 a5 sddkfh: 명령을 찾을 수 없습니다 wa2@aiur:~$ nl a5 nl: a5: 그런 파일이나 디렉터리가 없습니다 wa2@aiur:~$ asdldfkj 2\u0026gt;a7 wa2@aiur:~$ asdldfkj 2\u0026gt;/dev/null #에러를 쓰레기통으로 직행 wa2@aiur:~$ nl a7 1 asdldfkj: 명령을 찾을 수 없습니다 1 #!/bin/bash 2 if [ 40 -eq 30 ] 3 then 4 echo \u0026#34;equal \u0026#34; 5 else 6 echo \u0026#34;Not equal \u0026#34; 7 fi 8 9 if [ \u0026#34;kkk\u0026#34; == \u0026#34;kkk\u0026#34; ] 10 then 11 echo \u0026#34;같음\u0026#34; 12 else 13 echo \u0026#34;같지 않음\u0026#34; 14 fi 15 16 17 if [ -d /etc ] #디렉토리인지 확인, -f 파일인지 확인 18 then 19 echo \u0026#34;디렉토리입니다.\u0026#34; 20 else 21 echo \u0026#34;디렉토리가 아닙니다.\u0026#34; 22 fi root@aiur:~/d8# k.sh Not equal 같음 디렉토리입니다. trap #root@aiur:~/d8# trap \u0026#39;echo \u0026#34;오늘은 날씨가 좋다\u0026#34; \u0026gt;./tt8\u0026#39; INT #인터럽터를 했을 때! (컨트롤 + c) root@aiur:~/d8# ls autouseradd.sh bb.c my1.sh my3.sh y1 y3 y5 bb k.sh my2.sh userautodel.sh y2 y4 root@aiur:~/d8# ^C #인터럽터를 실행함 root@aiur:~/d8# ls autouseradd.sh bb.c my1.sh my3.sh userautodel.sh y2 y4 bb k.sh my2.sh tt8 y1 y3 y5 # tt8이 생김 root@aiur:~/d8# ff() \u0026gt; { \u0026gt; echo \u0026#34;난 함수다...\u0026#34; \u0026gt; } root@aiur:~/d8# ff 난 함수다... 변수 확장 #root@aiur:~/d8# g=\u0026#34;google\u0026#34; root@aiur:~/d8# echo $g google root@aiur:~/d8# echo \u0026#39;$g\u0026#39; $g root@aiur:~/d8# echo \u0026#34;$g\u0026#34; google root@aiur:~/d8# ls 색 없이 출력하기 #root@aiur:~/d8# \\ls 정규표현식 #root@aiur:~# nl p3 1 22 2 33 3 55 root@aiur:~# sed -n \u0026#39;/^$/p\u0026#39; p3 # 공백만 출력해라 root@aiur:~# sed -n \u0026#39;/22/p\u0026#39; p3 # 22만 출력해라 22 root@aiur:~# sed -n \u0026#39;/root/p\u0026#39; p #/root/p \u0026lt; 프린트의 p root❌0:0:root:/root:/bin/bash -i 원본에서 지우기 #root@aiur:~# grep Indexes apache2.conf # Options Indexes FollowSymLinks root@aiur:~# sed -i \u0026#39;/Indexes/d\u0026#39; apache2.conf root@aiur:~# grep Indexes apache2.conf root@aiur:~# vi apache2.conf #확인하면 Indexes 지워져 있음. 아파치 php 엔진 켜기 (일반 유저도 php 코딩 가능하게) #root@bit:/etc/apache2/mods-enabled# vi php8.1.conf 23 php_admin_flag engine On #원래 Off를 On으로 바꿔줌 ","date":"2023-10-27","permalink":"/devl/linux/010/","section":"Developer Course","summary":"접속 시 루트 권한으로 바로 접속 # # PS2 : 프롬프트 상태를 묻는 것.","title":"linux 기초 Day08"},{"content":"리눅스 \u0026amp; php #root@aiur:~# cd /var/www/html root@aiur:/var/www/html# mv index.html bb.html root@aiur:/var/www/html# mkdir d1 d2 root@aiur:/var/www/html# echo \u0026#34;hello\u0026#34; \u0026gt; h.txt root@aiur:/var/www/html# echo \u0026#34;서울시\u0026#34; \u0026gt; s.txt root@aiur:/var/www/html# echo \u0026#34;seoul\u0026#34; \u0026gt; d1/s1.txt root@aiur:/var/www/html# echo \u0026#34;pusan\u0026#34; \u0026gt; d1/p1.txt root@aiur:/var/www/html# echo \u0026#34;No pain No gain\u0026#34; \u0026gt; d1/index.html d1 폴더에 들어가면 바로 인덱스 파일을 읽어들임. apache2.conf 내용 #1 #root@aiur:/etc/apache2# vi apache2.conf ---- 80 DefaultRuntimeDir ${APACHE_RUN_DIR} ---- # 위 내용은 아래 경우를 설정한 내용 root@aiur:~# echo \u0026#34;$p_살아요\u0026#34; 살아요 root@aiur:~# echo \u0026#34;${p}살아요\u0026#34; pusan살아요 root@aiur:/etc/apache2# nl ports. 1 # If you just change the port or add more ports here, you will likely also 2 # have to change the VirtualHost statement in 3 # /etc/apache2/sites-enabled/000-default.conf 4 Listen 80 # 포트번호 5 \u0026lt;IfModule ssl_module\u0026gt; 6 Listen 443 # https 7 \u0026lt;/IfModule\u0026gt; 8 \u0026lt;IfModule mod_gnutls.c\u0026gt; 9 Listen 443 10 \u0026lt;/IfModule\u0026gt; 11 # vim: syntax=apache ts=4 sw=4 sts=4 sr noet apache2.conf 내용 #2 #root@aiur:/etc/apache2# vi apache2.conf 165 \u0026lt;Directory /usr/share\u0026gt; 166 AllowOverride None 167 Require all granted 168 \u0026lt;/Directory\u0026gt; # 심볼릭링크를 허용해준다. 허용해주기 싫으면 이 내용을 지우면 됨 170 \u0026lt;Directory /var/www/\u0026gt; 171 Options Indexes FollowSymLinks # ↑ Indexes를 삭제하면 index파일이 없어서 목록처럼 뜨는 페이지가 나오지 않음. 172 AllowOverride None 173 Require all granted 174 \u0026lt;/Directory\u0026gt; 심볼릭링크 걸어보기 root@aiur:/var/www/html# ls aa.php b.php bb.html d1 d2 h.txt old.html s.txt root@aiur:/var/www/html# ln -s /etc ee root@aiur:/var/www/html# l 합계 40K -rw-r--r-- 1 root root 302 10월 25 17:55 aa.php -rw-r--r-- 1 root root 53 10월 25 17:20 b.php -rw-r--r-- 1 root root 39 10월 26 10:19 bb.html drwxr-xr-x 2 root root 4.0K 10월 26 10:22 d1/ drwxr-xr-x 2 root root 4.0K 10월 26 10:19 d2/ lrwxrwxrwx 1 root root 4 10월 26 10:53 ee -\u0026gt; /etc/ -rw-r--r-- 1 root root 6 10월 26 10:19 h.txt -rw-r--r-- 1 root root 11K 10월 23 14:21 old.html -rw-r--r-- 1 root root 10 10월 26 10:20 s.txt root@aiur:/var/www/html# file ee ee: symbolic link to /etc apache2.conf 내용 #3 # %로 시작하는건 모두 변수 아래 내용들이 로그파일로 저장 212 LogFormat \u0026#34;%v:%p %h %l %u %t \\\u0026#34;%r\\\u0026#34; %\u0026gt;s %O \\\u0026#34;%{Referer}i\\\u0026#34; \\\u0026#34;%{User-Agent}i\\ \u0026#34;\u0026#34; vhost_combined 213 LogFormat \u0026#34;%h %l %u %t \\\u0026#34;%r\\\u0026#34; %\u0026gt;s %O \\\u0026#34;%{Referer}i\\\u0026#34; \\\u0026#34;%{User-Agent}i\\\u0026#34;\u0026#34; com bined 214 LogFormat \u0026#34;%h %l %u %t \\\u0026#34;%r\\\u0026#34; %\u0026gt;s %O\u0026#34; common 215 LogFormat \u0026#34;%{Referer}i -\u0026gt; %U\u0026#34; referer 216 LogFormat \u0026#34;%{User-agent}i\u0026#34; agent root@aiur:/etc/apache2# nl magic # 액세스 로그기록 root@aiur:/var/log/apache2# nl access.log # 로그 기록 초기화 root@aiur:/var/log/apache2# 0\u0026gt;access.log # 경로이 이동 root@aiur:/etc/apache2/sites-enabled# ls 000-default.conf root@aiur:/etc/apache2/sites-enabled# l 합계 0 lrwxrwxrwx 1 root root 35 10월 23 14:21 000-default.conf -\u0026gt; ../sites-available/000-default.conf root@aiur:/etc/apache2/sites-enabled# nl 000-default.conf ---- # html 파일이 어디에 있는지 설정하는 부분 11 DocumentRoot /var/www/html # 에러파일 로그 17 ErrorLog ${APACHE_LOG_DIR}/error.log 18 CustomLog ${APACHE_LOG_DIR}/access.log combined #파일 로그 형식이 컴바인 ---- # 컴파인 변경하기 root@aiur:/etc/apache2# vi apache2.conf --- 213 #LogFormat \u0026#34;%h %l %u %t \\\u0026#34;%r\\\u0026#34; %\u0026gt;s %O \\\u0026#34;%{Referer}i\\\u0026#34; \\\u0026#34;%{User-Agent}i\\\u0026#34;\u0026#34; combined 214 LogFormat \u0026#34;%t : 언제왔니\u0026#34; combined --- # 다시 로그 띄워보기 root@aiur:/var/log/apache2# nl access.log # 내가 편집한 내용을 변경됨. 홈에 bbc 경로 추가하기 #bbc@aiur:~$ mkdir public_html bbc@aiur:~$ cat \u0026gt; public_html/index.html \u0026lt;meta charset=\u0026#39;utf-8\u0026#39;\u0026gt; 안녕하세요. BBC 입니다. root@aiur:/etc/apache2/mods-available# nl userdir.conf 1 \u0026lt;IfModule mod_userdir.c\u0026gt; 2 UserDir public_html 3 UserDir disabled root 4 \u0026lt;Directory /home/*/public_html\u0026gt; 5 AllowOverride FileInfo AuthConfig Limit Indexes 6 Options MultiViews Indexes SymLinksIfOwnerMatch IncludesNoExec 7 Require method GET POST OPTIONS 8 \u0026lt;/Directory\u0026gt; 9 \u0026lt;/IfModule\u0026gt; 10 # vim: syntax=apache ts=4 sw=4 sts=4 sr noet root@aiur:/etc/apache2/mods-available# cd ../mods-enabled/ ###### 중요 !!!! root@aiur:/etc/apache2/mods-enabled# ln -s ../mods-available/userdir.conf root@aiur:/etc/apache2/mods-enabled# ln -s ../mods-available/userdir.load root@aiur:/etc/apache2/mods-enabled# ls access_compat.load authz_core.load deflate.load mime.load php8.1.load status.load alias.conf authz_host.load dir.conf mpm_prefork.conf reqtimeout.conf userdir.conf # 이 파일 alias.load authz_user.load dir.load mpm_prefork.load reqtimeout.load userdir.load # 이 파일 auth_basic.load autoindex.conf env.load negotiation.conf setenvif.conf authn_core.load autoindex.load filter.load negotiation.load setenvif.load authn_file.load deflate.conf mime.conf php8.1.conf status.conf # bbc 에서 홈디렉터리 권한 변경 bbc@aiur:~$ chmod 755 ~ root@aiur:/etc/apache2/mods-enabled# nl alias.conf 1 \u0026lt;IfModule alias_module\u0026gt; 2 # Aliases: Add here as many aliases as you need (with no limit). The format is 3 # Alias fakename realname 4 # 5 # Note that if you include a trailing / on fakename then the server will 6 # require it to be present in the URL. So \u0026#34;/icons\u0026#34; isn\u0026#39;t aliased in this 7 # example, only \u0026#34;/icons/\u0026#34;. If the fakename is slash-terminated, then the 8 # realname must also be slash terminated, and if the fakename omits the 9 # trailing slash, the realname must also omit it. 10 # 11 # We include the /icons/ alias for FancyIndexed directory listings. If 12 # you do not use FancyIndexing, you may comment this out. 13 Alias /icons/ \u0026#34;/usr/share/apache2/icons/\u0026#34; 14 \u0026lt;Directory \u0026#34;/usr/share/apache2/icons\u0026#34;\u0026gt; 15 Options FollowSymlinks 16 AllowOverride None 17 Require all granted 18 \u0026lt;/Directory\u0026gt; 19 \u0026lt;/IfModule\u0026gt; root@aiur:/etc/apache2/mods-enabled# ls /usr/share/apache2/icons a.gif box1.gif dvi.png image2.gif odf6odm.png p.png ps.gif tex.png a.png box1.png f.gif image2.png odf6odp-20x22.png patch.gif ps.png text.gif alert.black.gif box2.gif f.png image3.gif odf6odp.png patch.png quill.gif text.png alert.black.png box2.png folder.gif image3.png odf6ods-20x22.png pdf.gif quill.png transfer.gif alert.red.gif broken.gif folder.open.gif index.gif odf6ods.png pdf.png right.gif transfer.png alert.red.png broken.png folder.open.png index.png odf6odt-20x22.png pie0.gif right.png ubuntu-logo.png apache_pb.gif burst.gif folder.png layout.gif odf6odt.png pie0.png screw1.gif unknown.gif apache_pb.png burst.png folder.sec.gif layout.png odf6otc-20x22.png pie1.gif screw1.png unknown.png apache_pb.svg c.gif folder.sec.png left.gif odf6otc.png pie1.png screw2.gif up.gif apache_pb2.gif c.png forward.gif left.png odf6otf-20x22.png pie2.gif screw2.png up.png apache2 중요 경로 # 설정 파일 위치 : /etc/apache2/mods-enabled/ 로그 파일 위치 : /var/log/apache2/ 디폴트 파일 위치 : /var/www/html/ mysql 주요 에러 3가지 #ERROR 2002 (HY000): Can\u0026#39;t connect to local MySQL server through socket \u0026#39;/var/run/mysqld/mysqld.sock\u0026#39; (2) ERROR 1045 (28000): Access denied for user \u0026#39;mysun\u0026#39;@\u0026#39;localhost\u0026#39; (using password: NO) ERROR 1045 (28000): Access denied for user \u0026#39;mysun\u0026#39;@\u0026#39;localhost\u0026#39; (using password: YES) MAIL 서버 # 메일 서버는 두가지 기능 보내기 내 PC -\u0026gt; 메일 서버 메일을 보낼 때 사용하는 프로토콜 SMTP 네임서버 root@aiur:~# vi /etc/host ----- # 내용 추가하기 3 127.0.1.1 korea.com 4 127.0.1.1 seoul.kr ----- # dovecot 설치 : 메일을 받아서 처리하는 것 root@aiur:~# ai dovecot-imapd root@aiur:~# mail No mail for root root@aiur:/etc/mail# ls Makefile aliases local-host-names sendmail.cf service.switch-nodns tls access aliases.db m4 sendmail.conf smrsh trusted-users access.db databases peers sendmail.mc submit.cf address.resolve helpfile sasl service.switch submit.mc ftp #ftp ftp.kaist.ac.kr Name : ftp pw : (엔터) ftp\u0026gt; cd apache/httpd ftp\u0026gt; get httpd-2.4.58.tar.gz 화면 텍스트를 파일로 저장하기 #root@aiur:/etc/mail# scripts Last-1 ","date":"2023-10-26","permalink":"/devl/linux/009/","section":"Developer Course","summary":"리눅스 \u0026amp; php #root@aiur:~# cd /var/www/html root@aiur:/var/www/html# mv index.","title":"linux 기초 Day07"},{"content":" Mysql에서 txt 파일 내보내기 47 echo \u0026#34;\u0026lt;meta charset=\u0026#39;utf-8\u0026#39;\u0026gt;\u0026#34; \u0026gt; index.html 48 mysql -u root -p aiurDB -e \u0026#34;select * from student\u0026#34; \u0026gt;\u0026gt; index.html 49 ls 50 mount -t vboxsf win /yes 51 cd /yes 52 ls 53 mysql -u root -p aiurDB -e \u0026#34;select * from student\u0026#34; \u0026gt; stu.txt 네트워크 #도메인과 호스트 네임의 구분 # 도메인 등록한다? 네이버 에서 등록을 할때는 \u0026rsquo;naver.com\u0026rsquo; 만 등록함 -\u0026gt; 이것이 도메인\n호스트네임 : 네이버의 호스트네임은 네이버 관리자가 붙일 수 있음.\n호스트네임 도메인 www. naver.com cafe. naver.com blog. naver.com kin. naver.com www. sarang.net linux. sarang.net 이제 안쓰는 사이트 database. sarang.net 현재도 사용됨 docs.new 구글 사이트에서 sheet.new 구글사이트에서 LAN (local aira network) # ex) 네이버 안에 많은 컴퓨터들 (동네1) LAN : www/mail/cafe/kin/blog\u0026hellip;. 내부통신 : 랜 안에 있는 것들끼리 통신하는 것 ex) 구글 안에 많은 컴퓨터들 (동네2) LAN : www/mail/\u0026hellip;. !!컴퓨터와 컴퓨터가 통신하는 개념이 아니라 동네와 동네가 통신하는 개념\n네이버 메일과 ↔ 구글 메일이 통신? 어딘가를 거쳐서 가야함 자기네 동네를 벗어나서 다른 동네를 가려면 반드시 어디를 거쳐야함. -\u0026gt; 게이트웨이 GateWay # 집 공유기\n회사 -\u0026gt; router(스위치보다 더 똑똑?함), 스위치\nrouter : 키보드 없는 작은 컴퓨터 -\u0026gt; 리눅스 \u0026lsquo;www\u0026rsquo; -\u0026gt; 원래는 ip주소, www라는 이름과 ip라는 두개의 이름을 가짐\nNet mask (서브넷 마스크) # LAN의 크기 (동네 크기) C:\\Users\\wxy89\u0026gt;ping google.com Ping google.com [142.250.206.206] 32바이트 데이터 사용: 142.250.206.206의 응답: 바이트=32 시간=36ms TTL=57 142.250.206.206의 응답: 바이트=32 시간=35ms TTL=57 142.250.206.206의 응답: 바이트=32 시간=35ms TTL=57 142.250.206.206의 응답: 바이트=32 시간=35ms TTL=57 root@aiur:~# ping -c3 google.com PING google.com (142.250.76.142) 56(84) bytes of data. 64 bytes from kix07s06-in-f14.1e100.net (142.250.76.142): icmp_seq=1 ttl=56 time=36.1 ms 64 bytes from kix07s06-in-f14.1e100.net (142.250.76.142): icmp_seq=2 ttl=56 time=36.8 ms 64 bytes from kix07s06-in-f14.1e100.net (142.250.76.142): icmp_seq=3 ttl=56 time=36.7 ms --- google.com ping statistics --- 3 packets transmitted, 3 received, 0% packet loss, time 2003ms rtt min/avg/max/mdev = 36.061/36.535/36.800/0.336 ms packet #데이터가 통신되는 단위.\n도메인 정보 확인하는 사이트 # whois.co.kr \u0026gt; 도메인 \u0026gt; 도메인 검색 \u0026gt; naver.com 검색해보기 ip #4개의 개념을 꼭 알아 둘 것.\nip-addr subNetmask gateway DNS 유동ip ↔ 고정ip # 유동ip\n컴퓨터에 접속할 때 마다 ip가 바뀜 현재 강의실에서 쓰는 ip 집에서 쓰는 ip 고정ip\n한 ip당 고정적으로 주는 것. 비용이 비쌈 도서관 좌석 비유를 기억할 것.\n사설ip ↔ 공인ip # 사설ip 우리 동네에서 쓸 수 있는 것 국제적으로 약속이 되어 있음. 클래스 A: 10.0.0.0~10.255.255.255 클래스 B: 172.16.0.0~172.31.255.255 클래스 C: 192.168.0.0~192.168.255.255 (사설 ip) 공인ip 참조 https://nordvpn.com/ko/blog/public-ip-and-private-ip/\nipconfig # IPv4 : 내 ip 서브넷 마스크 : LAN 크기 ipconfig /all #C:\\Users\\wxy89\u0026gt;ipconfig /all 랜카드의 물리적인 고유 값\n더 내려서 DNS 값도 확인이 가능하다.\n네트워크 주소 : 대표 ip (동네 이장)\n리눅스에서 네트워크 확인 #root@aiur:~# ip addr 1: lo: \u0026lt;LOOPBACK,UP,LOWER_UP\u0026gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000 # ↑ lo : LOOPBACK 물리적 장치 아니라 논리적 소프트웨어적 개념. 자기 자신을 나타낼 때. link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever 2: enp0s3: \u0026lt;BROADCAST,MULTICAST,UP,LOWER_UP\u0026gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000 link/ether 08:00:27:a3:67:3f brd ff:ff:ff:ff:ff:ff # ↑ 랜카드 고유 번호 # ↑ 브로드캐스트 inet 10.0.2.15/24 metric 100 brd 10.0.2.255 scope global dynamic enp0s3 valid_lft 79244sec preferred_lft 79244sec inet6 fe80::a00:27ff:fea3:673f/64 scope link valid_lft forever preferred_lft forever nameserver 변경 root@aiur:~# nl /etc/resolv.conf root@aiur:~# nslookup \u0026gt; naver.com ;; communications error to 127.0.0.53#53: timed out Server: 127.0.0.53 Address: 127.0.0.53#53 Non-authoritative answer: Name: naver.com Address: 223.130.200.107 Name: naver.com Address: 223.130.200.104 Name: naver.com Address: 223.130.195.95 Name: naver.com root@aiur:~# cd /etc/netplan root@aiur:/etc/netplan# vi /etc/resolv.conf 21 #nameserver 127.0.0.1 22 #nameserver 127.0.0.53 23 24 nameserver 168.126.63.1 25 options edns0 trust-ad 26 search . 포트 #데이터가 지나다니는 길\n지난번 정리 외 추가로 정리\ntelnet : 23 smtp : 25 pop3 : 110 imap : 143 ssh : 22 nodejs : 3000 DNS : 53 root@aiur:~/d6# cp /etc/services s root@aiur:~/d6# grep http s # Updated from https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.xhtml . http 80/tcp www # WorldWideWeb HTTP https 443/tcp # http protocol over TLS/SSL https 443/udp # HTTP/3 http-alt 8080/tcp webcache # WWW caching service root@aiur:~/d6# grep http s root@aiur:~/d6# grep https s root@aiur:~/d6# grep pop3 s #DNS 검색은 domain으로 root@aiur:~/d6# grep domain s domain 53/tcp # Domain Name Server 아이피 주소는 두가지로 분류 됨. network host ip 클래스 #(정처기에서 너무너무 중요함)\nA클래스\n서브넷팅 : 아이피를 나누는 과정\n연산 # 논리 연산 : and ,or ,\u0026amp;\u0026amp; ,||, !\nbit 연산자 : \u0026amp;, |, ~, ^ , \u0026laquo;(쉬프트 연산) , \u0026raquo; (쉬프트연산)\n쉬프트 연산\n100 \u0026gt; 2 : 100을 우측으로 2칸 이동해라 100 \u0026lt; 2 : 100을 좌측으로 2칸 이동해라 속도면에서 비트연산자가 빠른 이유.\n456 * 100 = 45600 : 456을 100번 더하는 작업 456 \u0026laquo; 2 = 45600 : 100을 좌츠긍로 2칸이동 . 남은 빈칸을 0으로 채움 ^ (=XOR) #서로 반대되는 것이 참\n00 00 01 11 ------- 01 11 둘다 다르므로 참 이진법 #\u0026amp; 연산의 원리는 한쪽이 1이면 다른 한 쪽의 값을 가짐 15 \u0026amp; 6 ? 6\n7 111 15 1111 31 1 1111 63 127 255 1111 1111 0과 \u0026amp; 연산 -\u0026gt; 무조건 0 1로 \u0026amp; 연산 -\u0026gt; 비교한 값을 그대로 뽑아내겠다는 것 내부망 외부망 #root@aiur:~/d6# ip addr 1: lo: \u0026lt;LOOPBACK,UP,LOWER_UP\u0026gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo # ^ A클래스 ^ 8: 1의 갯수. valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever 2: enp0s3: \u0026lt;BROADCAST,MULTICAST,UP,LOWER_UP\u0026gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000 link/ether 08:00:27:a3:67:3f brd ff:ff:ff:ff:ff:ff inet 10.0.2.15/24 metric 100 brd 10.0.2.255 scope global dynamic enp0s3 # ^ 24: 1의 갯수가 24개 valid_lft 76942sec preferred_lft 76942sec inet6 fe80::a00:27ff:fea3:673f/64 scope link valid_lft forever preferred_lft forever root@aiur:~/d6# 목적지 주소와 넷마스크를 \u0026amp;(앤드) 연산 -\u0026gt; 그 결과와 네트워크 주소를 비교해서 -\u0026gt; 같으면 내부망 -\u0026gt; 다르면 외부망 -\u0026gt; 다르면 게이트웨이로 빠져나감 200.100.30.193 255.255.30.128\n아이피를 쪼갰을 때 C클랙스 \u0026mdash;/\u0026mdash;/\u0026mdash;/255\n0 -\u0026gt; 네트워크 ~ 127 -\u0026gt; 브로드 캐스트 --------- 128 -\u0026gt; 네트워크 ~ 244 -\u0026gt; 브로드 캐스트 이 상태에서 \u0026amp; 연산 200.100.30.193 255.255.30.128 ---------------- 200.100.30.128 \u0026gt; 결과 포트 확인 # 내포트 확인 root@aiur:~# nmap localhost Starting Nmap 7.80 ( https://nmap.org ) at 2023-10-25 15:20 KST Nmap scan report for localhost (127.0.0.1) Host is up (0.0000030s latency). Not shown: 994 closed ports PORT STATE SERVICE 22/tcp open ssh 25/tcp open smtp 80/tcp open http 587/tcp open submission 3306/tcp open mysql 8080/tcp open http-proxy # 네이버 root@aiur:~# nmap naver.com Starting Nmap 7.80 ( https://nmap.org ) at 2023-10-25 15:21 KST Nmap scan report for naver.com (223.130.200.104) Host is up (0.0018s latency). Other addresses for naver.com (not scanned): 223.130.195.200 223.130.195.95 223.130.200.107 Not shown: 998 filtered ports PORT STATE SERVICE 80/tcp open http 443/tcp open https # 구글 root@aiur:~# nmap google.com Starting Nmap 7.80 ( https://nmap.org ) at 2023-10-25 15:22 KST Nmap scan report for google.com (142.250.206.206) Host is up (0.0076s latency). Other addresses for google.com (not scanned): 2404:6800:400a:80a::200e rDNS record for 142.250.206.206: kix07s07-in-f14.1e100.net Not shown: 998 filtered ports PORT STATE SERVICE 80/tcp open http 443/tcp open https Nmap done: 1 IP address (1 host up) scanned in 4.95 seconds root@aiur:~# ai bind9 root@aiur:~# vi /etc/resolv.conf root@aiur:~# aq bind WARNING: apt does not have a stable CLI interface. Use with caution in scripts. bind9-dnsutils/jammy-updates,jammy-security,now 1:9.18.12-0ubuntu0.22.04.3 amd64 [설치됨,자동] bind9-host/jammy-updates,jammy-security,now 1:9.18.12-0ubuntu0.22.04.3 amd64 [설치됨,자동] bind9-libs/jammy-updates,jammy-security,now 1:9.18.12-0ubuntu0.22.04.3 amd64 [설치됨,자동] bind9-utils/jammy-updates,jammy-security,now 1:9.18.12-0ubuntu0.22.04.3 amd64 [설치됨,자동] bind9/jammy-updates,jammy-security,now 1:9.18.12-0ubuntu0.22.04.3 amd64 [설치됨] root@aiur:~# pq bind bind 3575 1 0 15:30 ? 00:00:00 /usr/sbin/named -u bind root 3743 3204 0 15:33 pts/1 00:00:00 grep --color=auto bind root@aiur:~# 후이즈에서 도메인을 구매했다고 가정해보자 # 연습 domain : it.kr (을 가졌다고 가정)\n100.50.20.10 : ns.it.kr\n100.50.20.20 : www.it.kr\n100.50.20.30 : ftp.it.kr\n100.50.20.40 : mail.it.kr\n# 응답 마이 서버를 내 ip로 전환 root@aiur:~# vi /etc/resolv.conf ---- 22 nameserver 127.0.0.1 ---- root@aiur:~# nslookup # 이제 내 서버에서 나한테 알려줌. \u0026gt; google.com Server: 127.0.0.1 Address: 127.0.0.1#53 Non-authoritative answer: Name: google.com Address: 172.217.25.174 Name: google.com Address: 2404:6800:400a:80a::200e root@aiur:~# cd /etc/bind/ root@aiur:/etc/bind# ls bind.keys db.127 db.empty named.conf named.conf.local rndc.key db.0 db.255 db.local named.conf.default-zones named.conf.options zones.rfc1918 # ^ 복사해서 다음 명령어에 붙이기 root@aiur:/etc/bind# nl named.conf.default-zones 1 // prime the server with knowledge of the root servers 2 zone \u0026#34;.\u0026#34; { # ↑ 이 점 (=루트도메인)에 대한 정보는 이 ↓ 아래 경로의 파일이 가지고 있음 3 type hint; 4 file \u0026#34;/usr/share/dns/root.hints\u0026#34;; 5 }; 6 // be authoritative for the localhost forward and reverse zones, and for 7 // broadcast zones as per RFC 1912 8 zone \u0026#34;localhost\u0026#34; { # ↑ 이 localhost에 대한 정보는 이 # ↓ 아래 경로의 파일이 가지고 있음 9 type master; 10 file \u0026#34;/etc/bind/db.local\u0026#34;; 11 }; 12 zone \u0026#34;127.in-addr.arpa\u0026#34; { 13 type master; 14 file \u0026#34;/etc/bind/db.127\u0026#34;; 15 }; 16 zone \u0026#34;0.in-addr.arpa\u0026#34; { 17 type master; 18 file \u0026#34;/etc/bind/db.0\u0026#34;; 19 }; 20 zone \u0026#34;255.in-addr.arpa\u0026#34; { 21 type master; 22 file \u0026#34;/etc/bind/db.255\u0026#34;; 23 }; 루트 도메인 # root@aiur:~# nl /usr/share/dns/root.hints 1 ; This file holds the information on root name servers needed to 2 ; initialize cache of Internet domain name servers 3 ; (e.g. reference this file in the \u0026#34;cache . \u0026lt;file\u0026gt;\u0026#34; 4 ; configuration file of BIND domain name servers). 5 ; 6 ; This file is made available by InterNIC 7 ; under anonymous FTP as 8 ; file /domain/named.cache 9 ; on server FTP.INTERNIC.NET 10 ; -OR- RS.INTERNIC.NET 11 ; 12 ; last update: January 11, 2021 13 ; related version of root zone: 2021011101 14 ; 15 ; FORMERLY NS.INTERNIC.NET 16 ; 17 . 3600000 NS A.ROOT-SERVERS.NET. 18 A.ROOT-SERVERS.NET. 3600000 A 198.41.0.4 19 A.ROOT-SERVERS.NET. 3600000 AAAA 2001:503:ba3e::2:30 20 ; 21 ; FORMERLY NS1.ISI.EDU 22 ; 23 . 3600000 NS B.ROOT-SERVERS.NET. 24 B.ROOT-SERVERS.NET. 3600000 A 199.9.14.201 25 B.ROOT-SERVERS.NET. 3600000 AAAA 2001:500:200::b 26 ; 27 ; FORMERLY C.PSI.NET 28 ; 29 . 3600000 NS C.ROOT-SERVERS.NET. 30 C.ROOT-SERVERS.NET. 3600000 A 192.33.4.12 31 C.ROOT-SERVERS.NET. 3600000 AAAA 2001:500:2::c 32 ; 33 ; FORMERLY TERP.UMD.EDU 34 ; 35 . 3600000 NS D.ROOT-SERVERS.NET. 36 D.ROOT-SERVERS.NET. 3600000 A 199.7.91.13 37 D.ROOT-SERVERS.NET. 3600000 AAAA 2001:500:2d::d 38 ; 39 ; FORMERLY NS.NASA.GOV 40 ; 41 . 3600000 NS E.ROOT-SERVERS.NET. 42 E.ROOT-SERVERS.NET. 3600000 A 192.203.230.10 43 E.ROOT-SERVERS.NET. 3600000 AAAA 2001:500:a8::e 44 ; 45 ; FORMERLY NS.ISC.ORG 46 ; 47 . 3600000 NS F.ROOT-SERVERS.NET. 48 F.ROOT-SERVERS.NET. 3600000 A 192.5.5.241 49 F.ROOT-SERVERS.NET. 3600000 AAAA 2001:500:2f::f 50 ; 51 ; FORMERLY NS.NIC.DDN.MIL 52 ; 53 . 3600000 NS G.ROOT-SERVERS.NET. 54 G.ROOT-SERVERS.NET. 3600000 A 192.112.36.4 55 G.ROOT-SERVERS.NET. 3600000 AAAA 2001:500:12::d0d 56 ; 57 ; FORMERLY AOS.ARL.ARMY.MIL 58 ; 59 . 3600000 NS H.ROOT-SERVERS.NET. 60 H.ROOT-SERVERS.NET. 3600000 A 198.97.190.53 61 H.ROOT-SERVERS.NET. 3600000 AAAA 2001:500:1::53 62 ; 63 ; FORMERLY NIC.NORDU.NET 64 ; 65 . 3600000 NS I.ROOT-SERVERS.NET. 66 I.ROOT-SERVERS.NET. 3600000 A 192.36.148.17 67 I.ROOT-SERVERS.NET. 3600000 AAAA 2001:7fe::53 68 ; 69 ; OPERATED BY VERISIGN, INC. 70 ; 71 . 3600000 NS J.ROOT-SERVERS.NET. 72 J.ROOT-SERVERS.NET. 3600000 A 192.58.128.30 73 J.ROOT-SERVERS.NET. 3600000 AAAA 2001:503:c27::2:30 74 ; 75 ; OPERATED BY RIPE NCC 76 ; 77 . 3600000 NS K.ROOT-SERVERS.NET. 78 K.ROOT-SERVERS.NET. 3600000 A 193.0.14.129 79 K.ROOT-SERVERS.NET. 3600000 AAAA 2001:7fd::1 80 ; 81 ; OPERATED BY ICANN 82 ; 83 . 3600000 NS L.ROOT-SERVERS.NET. 84 L.ROOT-SERVERS.NET. 3600000 A 199.7.83.42 85 L.ROOT-SERVERS.NET. 3600000 AAAA 2001:500:9f::42 86 ; 87 ; OPERATED BY WIDE 88 ; 89 . 3600000 NS M.ROOT-SERVERS.NET. 90 M.ROOT-SERVERS.NET. 3600000 A 202.12.27.33 91 M.ROOT-SERVERS.NET. 3600000 AAAA 2001:dc3::35 92 ; End of file # ^ 이 알파벳 루트 도메인을 나타냄 A~M 루트 도메인이 저장돼 있는 위치 # 백업서버들이 돌아가고 있음. A ~ M 복제해서 보관 역방향 조회 # 역방향 조회 : ip를 물어보면 도메인을 알려줌 root@aiur:~# nslookup \u0026gt; google.com ;; communications error to 127.0.0.1#53: timed out Server: 127.0.0.1 Address: 127.0.0.1#53 Non-authoritative answer: Name: google.com Address: 172.217.25.174 Name: google.com Address: 2404:6800:400a:80a::200e \u0026gt; 172.217.25.174 # 거꾸로 물어보는 것 ip를 물어보면 도메인이 나옴 ;; communications error to 127.0.0.1#53: timed out 174.25.217.172.in-addr.arpa name = syd09s13-in-f14.1e100.net. # 이렇게 name 결과가 나옴. 174.25.217.172.in-addr.arpa name = syd09s13-in-f174.1e100.net. 174.25.217.172.in-addr.arpa name = kix06s19-in-f14.1e100.net. 174.25.217.172.in-addr.arpa name = sin01s16-in-f14.1e100.net. Authoritative answers can be found from: dns와 관련된 파일들 (155p) #root@aiur:/etc/bind# nl named.conf 1 // This is the primary configuration file for the BIND DNS server named. 2 // 3 // Please read /usr/share/doc/bind9/README.Debian.gz for information on the 4 // structure of BIND configuration files in Debian, *BEFORE* you customize 5 // this configuration file. 6 // 7 // If you are just adding zones, please do that in /etc/bind/named.conf.local 8 include \u0026#34;/etc/bind/named.conf.options\u0026#34;; ### 이 파일 편집 9 include \u0026#34;/etc/bind/named.conf.local\u0026#34;; 10 include \u0026#34;/etc/bind/named.conf.default-zones\u0026#34;; root@aiur:/etc/bind# vi /etc/bind/named.conf.options # 편집 파일 내용 수정 ---- 1 options { 2 directory \u0026#34;/var/cache/bind\u0026#34;; 3 4 dnssec-validation no; 5 allow-query { any; }; 6 listen-on-v6 { any; }; 7 recursion yes; 8 9 }; ~ ---- vi /etc/bind/named.conf.default-zones # 편집 파일에 아래내용 추가 ----- 30 ;; append 31 32 zone \u0026#34;it.kr\u0026#34; { 33 type master; 34 file \u0026#34;/etc/bind/it.zone\u0026#34;; 35 }; 36 37 zone \u0026#34;20.50.100.in-addr-arpa\u0026#34; { 38 type master; 39 file \u0026#34;/etc/bind/it.rev\u0026#34;; 40 }; ----- root@aiur:/etc/bind# cp db.0 it.zone root@aiur:/etc/bind# vi it.zone root@aiur:/etc/bind# vi it.zone 1 $TTL 604800 2 @ IN SOA ns.it.kr. master.it.kr. ( 3 2 ; Serial 4 604800 ; Refresh 5 86400 ; Retry 6 2419200 ; Expire 7 604800 ) ; Negative Cache TTL 8 9 @ IN NS ns.it.kr. 10 11 IN A 100.50.20.10 12 ns IN A 100.50.20.10 13 www IN A 100.50.20.20 14 ftp IN A 100.50.20.30 15 mail IN A 100.50.20.40 16 my IN CNAME www 17 @ IN MX 10 mail.it.kr. root@aiur:/etc/bind# vi it.rev 1 $TTL 604800 2 @ IN SOA ns.it.kr. master.it.kr. ( 3 2 ; Serial 4 604800 ; Refresh 5 86400 ; Retry 6 2419200 ; Expire 7 604800 ) ; Negative Cache TTL 8 ; 9 @ IN NS ns.it.kr. 10 @ IN A 100.50.20.10 11 12 10 IN PTR it.kr. 13 10 IN PTR ns.it.kr. 14 20 IN PTR www.it.kr. 15 30 IN PTR ftp.it.kr. 16 40 IN PTR mail.it.kr. 부팅시 프로그램 자동으로 켜져있게 하기 ## 프로그램 부팅 시 자동 켜키 root@aiur:~# systemctl enable mysql # 프로그램 끄기 root@aiur:~# systemctl disable mysql ","date":"2023-10-25","permalink":"/devl/linux/008/","section":"Developer Course","summary":"Mysql에서 txt 파일 내보내기 47 echo \u0026#34;\u0026lt;meta charset=\u0026#39;utf-8\u0026#39;\u0026gt;\u0026#34; \u0026gt; index.","title":"linux 기초 Day06"},{"content":" 포트 : 데이터들이 지나다니는 길\nputty() -\u0026gt; port(22번)(SSH) -\u0026gt; 리눅스 (SSH서버 구동 중인 상태)\nSSH : 보안을 해서 넘겨줌\n$ : 일반사용\n# : 슈퍼 관리자 (hyper User) == root\n리눅스 (리눅스 계정과 mysql계정은 별개)\nmysql DB (mysqlDB) DB DB 웹서버 메일서버 브라우저(웹서비스를 받기 위한 클라이언트 프로그램) -\u0026gt; 웹서버\n웹서버 : 아파치 복습 # 포트 번호 톰캣 : 8080 http : 80 https : 443 ftp : 21 smtp : 25 mysql : 3306 매뉴얼 보기 #root@aiur:~# man --help root@aiur:~# mysql --help # 페이지 이동 shift + PageUp(PageDown) root@aiur:~# apt root@aiur:~# mysql --help 유저 정보 #root@aiur:~# useradd -D # -D : default GROUP=100 HOME=/home INACTIVE=-1 EXPIRE= SHELL=/bin/bash SKEL=/etc/skel CREATE_MAIL_SPOOL=no root@aiur:~# # shell 변경 root@aiur:~# useradd -D -s /bin/bash user 생성 시 /home 아래에 생성됨. root@aiur:~# uname Linux # 커널버전 확인 root@aiur:~# uname -r 5.15.0-87-generic 명령어가 어디에 있는지 찾을 때 ## 1) root@aiur:~# whereis mysql mysql: /usr/bin/mysql /usr/lib/mysql /etc/mysql /usr/share/mysql /usr/share/man/man1/mysql.1.gz # 2) root@aiur:~# which mysql /usr/bin/mysql # 3) 1)결과나 2)결과를 가지고 파일 확인 root@aiur:~# file mysql: /usr/bin/mysql /usr/lib/mysql /etc/mysql /usr/share/mysql /usr/share/man/man1/mysql.1.gz 목록보기 # l\nls\nll\n속성\nls -cf : 파일명만 보여줌 ls -l : 길게보여준다. ls -al : 숨겨져있는 파일까지 다 보임 (a: all) 권한 (permision) - 115p ## 타임+권한 #하드링크 #소유주/소유그룹 -rw-r--r-- 1 root root 193 10월 24 10:08 a1 #파일은 하얀색 drwxr-xr-x 2 root root 4.0K 10월 24 10:08 d1/ #디렉토리 파란색 drwxr-xr-x : 권한은 3개씩 끊어서 보면됨 -\u0026gt; d/rwx/r-x/r-x #user 권한 #group 권한 # other 권한 d rwx r-x r-x r(=4) : 읽기 권한 w(=2) : 생성, 수정 및 삭제 권한 x(=1) : 실행 권한 #user 권한 #group 권한 # other 권한 d rwx r-x r-- #(r+w+x) 7 #(r+x) 5 #(r) 4 디렉토리의 실행(x)권한? 디렉토리로 진입 할 수 있는 권한 권한 변경 # permision(권한) 변경 : chmod = change mode user 변경 : chown group 변경 : chgrp -rw-r--r-- 1 root root 193 10월 24 10:08 a1 drwxr-xr-x 2 root root 4.0K 10월 24 10:08 d1/ root@aiur:~/d5# chmod 123 a1 root@aiur:~/d5# chmod 442 d1 root@aiur:~/d5# chown h1 a1 root@aiur:~/d5# chgrp BIT d1 root@aiur:~/d5# l 합계 8.0K ---x-w--wx 1 h1 root 193 10월 24 10:08 a1* dr--r---w- 2 root BIT 4.0K 10월 24 10:08 d1/ root@aiur:~/d5# chown h d1 # 동시에 여러개 바꾸기 root@aiur:~/d5# chown h:BIT a1 root@aiur:~/d5# chmod 752 a1 root@aiur:~/d5# chmod 614 d1 root@aiur:~/d5# l 합계 8.0K -rwxr-x-w- 1 h BIT 193 10월 24 10:08 a1* drw---xr-- 2 h BIT 4.0K 10월 24 10:08 d1/ Group과 권한 # root@aiur:~/d5# mkdir ./y{1..5} root@aiur:~/d5# ll drwxr-xr-x 2 root root 4096 10월 24 10:55 y1/ drwxr-xr-x 2 root root 4096 10월 24 10:55 y2/ drwxr-xr-x 2 root root 4096 10월 24 10:55 y3/ drwxr-xr-x 2 root root 4096 10월 24 10:55 y4/ drwxr-xr-x 2 root root 4096 10월 24 10:55 y5/ root@aiur:~/d5# chmod 700 /y1 root@aiur:~/d5# chmod 701 /y2 root@aiur:~/d5# chmod 705 /y3 root@aiur:~/d5# chmod 707 /y4 root@aiur:~/d5# chmod 1707 /y5 # 각 디렉토리에 파일 복사해서 권한 확인하기 y1~y5 root@aiur:~/d5# cp /etc/b* /y1 cp: -r을 지정하지 않음. \u0026#39;/etc/bash_completion.d\u0026#39; 디렉터리 생략 cp: -r을 지정하지 않음. \u0026#39;/etc/binfmt.d\u0026#39; 디렉터리 생략 cp: -r을 지정하지 않음. \u0026#39;/etc/byobu\u0026#39; 디렉터리 생략 ... # 반복 root@aiur:~/d5# cp /etc/b* /y5 cp: -r을 지정하지 않음. \u0026#39;/etc/bash_completion.d\u0026#39; 디렉터리 생략 cp: -r을 지정하지 않음. \u0026#39;/etc/binfmt.d\u0026#39; 디렉터리 생략 cp: -r을 지정하지 않음. \u0026#39;/etc/byobu\u0026#39; 디렉터리 생략 # 현재 권한 확인 drwx------ 2 root root 4.0K 10월 24 10:56 y1/ drwx-----x 2 root root 4.0K 10월 24 10:56 y2/ drwx---r-x 2 root root 4.0K 10월 24 10:56 y3/ drwx---rwx 2 root root 4.0K 10월 24 10:57 y4/ drwx---rwt 2 root root 4.0K 10월 24 10:57 y5/ # ^ rwt 스티키비트 (다른 사람이 만든거 수정 불가) Stiky bit (스티키비트)119p\n(rwt 권한) 앞에 1을 붙여서 4자리 권한 tmp 폴더가 이 권한 속성을 가지고 있음 다른 사람이 만든거 수정 불가 (주인과 관리자만 지울 수 있다) h계정으로 접속\n# 그룹 상태 확인 h@aiur:~$ groups h #자기자신 그룹에만 소속돼 있음 # y1의 권한 h@aiur:~$ cd /y1 -bash: cd: /y1: 허가 거부 # y2의 권한 h@aiur:~$ cd /y2 h@aiur:/y2$ ls ls: \u0026#39;.\u0026#39; 디렉터리를 열 수 없습니다: 허가 거부 # y3의 권한 h@aiur:/y2$ cd /y3 h@aiur:/y3$ ls bash.bashrc bash_completion bindresvport.blacklist h@aiur:/y3$ l bash.bashrc bash_completion bindresvport.blacklist h@aiur:/y3$ ls -l 합계 12 -rw-r--r-- 1 root root 2319 10월 24 10:56 bash.bashrc -rw-r--r-- 1 root root 45 10월 24 10:56 bash_completion -rw-r--r-- 1 root root 367 10월 24 10:56 bindresvport.blacklist h@aiur:/y3$ rm -rf bash.bashrc rm: \u0026#39;bash.bashrc\u0026#39;을(를) 제거할 수 없습니다: 허가 거부 # y4의 권한 h@aiur:/y4$ ls bash.bashrc bash_completion bindresvport.blacklist h@aiur:/y4$ rm -rf bash.bashrc h@aiur:/y4$ ls bash_completion bindresvport.blacklist # y5의 권한 h@aiur:/y5$ ls bash.bashrc bash_completion bindresvport.blacklist h@aiur:/y5$ rm -rf bash.bashrc rm: \u0026#39;bash.bashrc\u0026#39;을(를) 제거할 수 없습니다: 명령을 허용하지 않음 h@aiur:/y5$ cd /y4 h@aiur:/y4$ cal \u0026gt; k100 h@aiur:/y4$ who \u0026gt; k200 h@aiur:/y4$ mkdir d300 h@aiur:/y4$ cd /y5 h@aiur:/y5$ cal \u0026gt; k100 h@aiur:/y5$ who \u0026gt; k200 h@aiur:/y5$ mkdir d300 h1계정으로 접속 # h1계정에서 h가 만든 파일 h1@aiur:/y4$ ls bash_completion bindresvport.blacklist d300 k100 k200 h1@aiur:/y4$ ls -l 합계 20 -rw-r--r-- 1 root root 45 10월 24 10:57 bash_completion -rw-r--r-- 1 root root 367 10월 24 10:57 bindresvport.blacklist drwxrwxr-x 2 h h 4096 10월 24 11:05 d300 -rw-rw-r-- 1 h h 193 10월 24 11:04 k100 -rw-rw-r-- 1 h h 150 10월 24 11:04 k200 h1@aiur:/y4$ rm -rf * h1@aiur:/y4$ ls -l 합계 0 h1@aiur:/y4$ # 스티키비트 권한을 가진 디렉토리의 경우 삭제 시도할 경우 h1@aiur:/y5$ ls -l 합계 24 -rw-r--r-- 1 root root 2319 10월 24 10:57 bash.bashrc -rw-r--r-- 1 root root 45 10월 24 10:57 bash_completion -rw-r--r-- 1 root root 367 10월 24 10:57 bindresvport.blacklist drwxrwxr-x 2 h h 4096 10월 24 11:05 d300 -rw-rw-r-- 1 h h 193 10월 24 11:05 k100 -rw-rw-r-- 1 h h 150 10월 24 11:05 k200 h1@aiur:/y5$ rm -rf * rm: \u0026#39;bash.bashrc\u0026#39;을(를) 제거할 수 없습니다: 명령을 허용하지 않음 rm: \u0026#39;bash_completion\u0026#39;을(를) 제거할 수 없습니다: 명령을 허용하지 않음 rm: \u0026#39;bindresvport.blacklist\u0026#39;을(를) 제거할 수 없습니다: 명령을 허용하지 않음 rm: \u0026#39;d300\u0026#39;을(를) 제거할 수 없습니다: 명령을 허용하지 않음 rm: \u0026#39;k200\u0026#39;을(를) 제거 다시 root # /y4 권한 변경 root@aiur:~/d5# chmod 1777 /y4 # 출력 root@aiur:~/d5# l / drwxrwxrwt 2 root root 4.0K 10월 24 11:06 y4/ umask (118p) # root umask 디폴트 : 022 user umask 디폴트 : 0002 root@aiur:~/d5# umask 0022 root@aiur:~/d5# umask 123 root@aiur:~/d5# umask 0123 root@aiur:~/d5# umask 672 root@aiur:~/d5# umask 0672 root@aiur:~/d5# umask 980 -bash: umask: 980: 8진수이(가) 범위를 벗어남 # 디폴트값으로 다시 변경 root@aiur:~/d5# umask 022 root@aiur:~/d5# 7 7 7 - 0 2 2 - umask 값 - ------ 7 5 5 - dir 권한 - 1 1 1 -------- 6 4 4 - file #umask 값 변경 root@aiur:~/d5# umask 415 root@aiur:~/d5# mkdir d3 root@aiur:~/d5# who \u0026gt; a3 root@aiur:~/d5# l 합계 24K -rwxr-x-w- 1 h BIT 193 10월 24 10:08 a1* -rw-r--r-- 1 root root 200 10월 24 11:14 a2 --w-rw--w- 1 root root 200 10월 24 11:17 a3 drw---xr-- 2 h BIT 4.0K 10월 24 10:08 d1/ drwxr-xr-x 2 root root 4.0K 10월 24 11:14 d2/ d-wxrw--w- 2 root root 4.0K 10월 24 11:17 d3/ #권한 3-6-2 7 7 7 - 4 1 5 - umask 값 - ------ 3 6 2 - dir 권한 - 1 0 0 -------- 2 6 2 - file 실행 권한 #root@aiur:~/d5# l 합계 20K -rw-r--r-- 1 root root 205 10월 24 11:28 h.c -rwxr-xr-x 1 root root 16K 10월 24 11:29 hh* root@aiur:~/d5# l 합계 24K -rw-r--r-- 1 root root 4.0K 10월 24 11:34 .h.c.swp -rw-r--r-- 1 root root 205 10월 24 11:28 h.c -rwxr-xr-x 1 root root 16K 10월 24 11:29 hh* root@aiur:~/d5# chomd 444 hh 명령어 \u0026#39;chomd\u0026#39; 을(를) 찾을 수 없습니다. 다음 명령어로 시도하시겠습니까: deb chmodcoreutils의 명령어 \u0026#39; (8.32-4.1ubuntu1)\u0026#39; Try: apt install \u0026lt;deb name\u0026gt; root@aiur:~/d5# chmod 444 hh root@aiur:~/d5# ll 합계 40 drwxr-xr-x 2 root root 4096 10월 24 11:34 ./ drwx------ 7 root root 4096 10월 24 11:28 ../ -rw-r--r-- 1 root root 12288 10월 24 11:34 .h.c.swp -rw-r--r-- 1 root root 205 10월 24 11:28 h.c -r--r--r-- 1 root root 16000 10월 24 11:29 hh root@aiur:~/d5# chmod 755 h.c root@aiur:~/d5# l 합계 32K -rw-r--r-- 1 root root 12K 10월 24 11:34 .h.c.swp -rwxr-xr-x 1 root root 205 10월 24 11:28 h.c* -r--r--r-- 1 root root 16K 10월 24 11:29 hh root@aiur:~/d5# hh -bash: ./hh: 허가 거부 #date 위치 찾기 root@aiur:~/d5# whereis date date: /usr/bin/date /usr/share/man/man1/date.1.gz #해당 위치 파일 목록 보기 root@aiur:~/d5# ll /usr/bin/date /usr/share/man/man1/date.1.gz -rwxr-xr-x 1 root root 104960 2월 8 2022 /usr/bin/date* -rw-r--r-- 1 root root 2681 2월 8 2022 /usr/share/man/man1/date.1.gz #파일 root@aiur:~/d5# file /usr/bin/date /usr/bin/date: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=bc344fc6aeef168b90a9bcd0b531b8e9a978158d, for GNU/Linux 3.2.0, stripped #실행권한 뺏기 root@aiur:~/d5# chmod 666 /usr/bin/date root@aiur:~/d5# date -bash: /usr/bin/date: 허가 거부 # 출력안됨 #원복 root@aiur:~/d5# chmod 755 /usr/bin/date root@aiur:~/d5# date #출력됨 SHELL 및 HOME 수정 # #ksh 쉘 설치 root@aiur:~# ai ksh root@aiur:~# nl /etc/shells 1 # /etc/shells: valid login shells 2 /bin/sh 3 /bin/bash 4 /usr/bin/bash 5 /bin/rbash 6 /usr/bin/rbash 7 /usr/bin/sh 8 /bin/dash 9 /usr/bin/dash 10 /usr/bin/tmux 11 /usr/bin/screen 12 /bin/ksh93 13 /usr/bin/ksh93 14 /bin/rksh93 15 /usr/bin/rksh93 #홈경로 및 shell 수정 root@aiur:~# useradd -D -b /apt root@aiur:~# useradd -D -s /bin/ksh93 root@aiur:~# nl /etc/default/useradd 8 SHELL=/bin/ksh93 ... 37 GROUP=100 38 HOME=/apt 39 INACTIVE=-1 40 EXPIRE= 41 SKEL=/etc/skel 42 CREATE_MAIL_SPOOL=no ... #파일 직접수정 (8, 39 행 수정) root@aiur:~# vi /etc/default/useradd #수정된 내용 확인 root@aiur:~# useradd -D GROUP=100 HOME=/home INACTIVE=-1 EXPIRE= SHELL=/bin/bash SKEL=/etc/skel CREATE_MAIL_SPOOL=no 암호 #root@aiur:~# t3 /etc/passwd h❌1006:1006::/home/h:/bin/bash h1❌1007:1008::/home/h1:/bin/bash _D❌1008:1010::/home/_D:/bin/bash root@aiur:~# l /etc/passwd -rw-r--r-- 1 root root 2.4K 10월 24 12:08 /etc/passwd root@aiur:~# passwd h #자릿수 상관없이 됨 # h계정 접속 h의 암호를 바꿉니다. 현재 암호: 새 암호: 새 암호 다시 입력: 더 긴 비밀번호를 선택해 주세요. #유저는 본인 비밀번호 변경일지라도 8자리 이상으로 해야만 됨 root@aiur:~# t3 /etc/passwd h❌1006:1006::/home/h:/bin/bash h1❌1007:1008::/home/h1:/bin/bash _D❌1008:1010::/home/_D:/bin/bash # ^ \u0026#39;x\u0026#39; root@aiur:~# l /etc/passwd -rw-r--r-- 1 root root 2.4K 10월 24 12:08 /etc/passwd root@aiur:~# l /usr/bin/passwd -rwsr-xr-x 1 root root 59K 11월 24 2022 /usr/bin/passwd* # ^ \u0026#39;s\u0026#39; : setUserID root@aiur:~# l /etc/passwd -rw-r--r-- 1 root root 2.4K 10월 24 12:08 /etc/passwd setUserID (rws) # rws : 원래 수정권한이 루트에게만 있는데 이 명령을 실행하는 순간 루트 권한을 가짐 보안과 관련됨. rws 로 설정하는 방법 #root@aiur:~# ll /usr/bin/date -rwxr-xr-x 1 root root 104960 2월 8 2022 /usr/bin/date* # 데이트 명령어를 실행 할 때 root 권한으로 실행 root@aiur:~# chmod 4755 /usr/bin/date root@aiur:~# ll /usr/bin/date -rwsr-xr-x 1 root root 104960 2월 8 2022 /usr/bin/date* root@aiur:~# chmod 2755 /usr/bin/date root@aiur:~# ll /usr/bin/date -rwxr-sr-x 1 root root 104960 2월 8 2022 /usr/bin/date* 4000번대 권한을 가진 파일 검색 #root@aiur:~# find / -perm -4000 -exec ls -l {} \\; ... -rwsr-xr-x 1 root root 72072 11월 24 2022 /usr/bin/gpasswd -rwsr-xr-x 1 root root 30872 2월 26 2022 /usr/bin/pkexec -rwsr-xr-x 1 root root 47480 2월 21 2022 /usr/bin/mount ... 속성 권한 #파일을 못건드리게 하고 싶을 때\n파일 잠금 (121p) ##파일 잠금 상태 확인 명령 root@aiur:~/d5# lsattr --------------e------- ./a1 ... #파일을 잠금 root@aiur:~/d5# chattr +i a1 root@aiur:~/d5# lsattr # ↓ 잠궜다라고 표현 ----i---------e------- ./a1 ... #파일 편집 시도해보기 root@aiur:~/d5# vi a1 #읽기 전용으로 실행됨 # 잠금해제 root@aiur:~/d5# chattr -i a1 root@aiur:~/d5# lsattr --------------e------- ./a1 ... # 덮어쓰기 권한 잠금 root@aiur:~/d5# set -o noclobber root@aiur:~/d5# date \u0026gt; a2 -bash: a2: 이미 있는 파일을 덮어쓸 수 없음 set -o noclobber : 옵션 추가 set +o noclobber : 옵션 해제 그룹만들어서 해보기 (위 y5의 권한으로 ) #root@aiur:~/d5# chgrp KING /y5 root@aiur:~/d5# chmod 770 /y5 ","date":"2023-10-24","permalink":"/devl/linux/006/","section":"Developer Course","summary":"포트 : 데이터들이 지나다니는 길","title":"linux 기초 Day05 #1"},{"content":"LOG #로그 파일들이 모인 곳 #root@aiur:~# cd /var/log root@aiur:/var/log# dmesg | grep pci # 아이피 root@aiur:/var/log# ip addr # 랜카드 정보 (인식했는지) root@aiur:/var/log# dmesg | grep enp0 # 로그인 정보 root@aiur:/var/log# last # 각 계정의 마지막 로그인 접속한 기록 root@aiur:/var/log# lastlog # 메일 관련된 로그 root@aiur:/var/log# nl mail.log # 히스토리 로그 root@aiur:/var/log/apt# nl history.log # 아파치 로그 root@aiur:/var/log# cd apache2/ root@aiur:/var/log/apache2# l 합계 4.0K -rw-r----- 1 root adm 0 10월 23 14:21 access.log -rw-r----- 1 root adm 1.1K 10월 23 20:55 error.log -rw-r----- 1 root adm 0 10월 23 14:21 other_vhosts_access.log cat \u0026lt; a3 : 입력 리다이렉션 (cat a3와 동일한 명령)\n터미널 #내 터미널 보기 #root@aiur:~/d5# tty /dev/pts/3 모든 터미널 보기 #root@aiur:~/d5# who #터미널 j pts/2 2023-10-24 12:11 (10.0.2.2) j pts/3 2023-10-24 12:11 (10.0.2.2) h pts/4 2023-10-24 12:18 (10.0.2.2) 터미널 : 끝단에 있는 것, 중복될 수 없음 다른 터미널로 명령 하기 ## h 계정 h@aiur:~$ tty /dev/pts/4 ------------ # root 계정 root@aiur:~/d5# echo \u0026#34;점심 뭐 먹었니이이?\u0026#34; \u0026gt; /dev/pts/4 ------------ # h 계정 h@aiur:~$ 점심 뭐 먹었니이이? atd 예약작업 #at 설치 # atq == at -l root@aiur:~/d5# ai at at 매뉴얼 #root@aiur:~/d5# man at 예약 작업 등록 ## 1) root@aiur:~/d5# at now + 1min warning: commands will be executed using /bin/sh at Tue Oct 24 14:42:00 2023 at\u0026gt; echo \u0026#34;오늘은 그냥 그러려니 했다. \u0026gt; /dev/pts/4 at\u0026gt; \u0026lt;EOT\u0026gt; # 2) root@aiur:~/d5# at now + 3 min warning: commands will be executed using /bin/sh at Tue Oct 24 14:46:00 2023 at\u0026gt; echo \u0026#34;hhahahahah\u0026#34; 예약 작업 목록 확인 및 삭제 ##예약된 작업 목록 확인 root@aiur:~/d5# at -l 6 Tue Oct 24 14:46:00 2023 a root 4 Sun Dec 31 23:55:00 2023 a root # 예약된 작업 삭제 root@aiur:~/d5# atrm 4 root@aiur:~/d5# at -l 6 Tue Oct 24 14:46:00 2023 a root crond 반복작업 #초단위 없음. 최소가 분단위\n파일 경로 (별이 5개) #root@aiur:~/d5# nl /etc/crontab 1 # /etc/crontab: system-wide crontab 2 # Unlike any other crontab you don\u0026#39;t have to run the `crontab\u0026#39; 3 # command to install the new version when you edit this file 4 # and files in /etc/cron.d. These files also have username fields, 5 # that none of the other crontabs do. 6 SHELL=/bin/sh 7 # You can also override PATH, but by default, newer versions inherit it from the environment 8 #PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin 9 # Example of job definition: 10 # .---------------- minute (0 - 59) 11 # | .------------- hour (0 - 23) 12 # | | .---------- day of month (1 - 31) 13 # | | | .------- month (1 - 12) OR jan,feb,mar,apr ... 14 # | | | | .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat 15 # | | | | | 16 # * * * * * user-name command to be executed 17 17 * * * * root cd / \u0026amp;\u0026amp; run-parts --report /etc/cron.hourly 18 25 6 * * * root test -x /usr/sbin/anacron || ( cd / \u0026amp;\u0026amp; run-parts --report /etc/cron.daily ) 19 47 6 * * 7 root test -x /usr/sbin/anacron || ( cd / \u0026amp;\u0026amp; run-parts --report /etc/cron.weekly ) # ^ ^ ^ 매주 일요일 6시 47분마다 작업 반복 20 52 6 1 * * root test -x /usr/sbin/anacron || ( cd / \u0026amp;\u0026amp; run-parts --report /etc/cron.monthly ) 21 # ^ ^ ^ 매월 1일 6시 52분마다 작업 반복 요일을 표현할 때는 0 or 7 은 일요일 root@aiur:~/d5# crontab -e no crontab for root - using an empty one Select an editor. To change later, run \u0026#39;select-editor\u0026#39;. 1. /bin/nano \u0026lt;---- easiest 2. /usr/bin/vim.basic 3. /usr/bin/vim.tiny 4. /bin/ed 에디터 변경하기 #export EDITOR=vi root@aiur:~/d5# crontab -r root@aiur:~/d5# crontab -l no crontab for root root@aiur:~/d5# pq sendmail root 1233 1 0 09:26 ? 00:00:00 sendmail: MTA: accepting connections root 4197 3014 0 15:21 pts/3 00:00:00 grep --color=auto sendmail 파일 생성해서 이메일로 보내기 #j10@alinux:~$ crontab -e no crontab for j10 - using an empty one Select an editor. To change later, run \u0026#39;select-editor\u0026#39;. 1. /bin/nano \u0026lt;---- easiest 2. /usr/bin/vim.basic 3. /usr/bin/vim.tiny 4. /bin/ed Choose 1-4 [1]: 2 ---- # 편집파일에 아래 내용 입력 후 저장 (2분마다 보내기) */2 * * * * echo \u0026#34;My life for aiur!!\u0026#34; | mail -s \u0026#34;프로토스\u0026#34; ssomal_@naver.com ---- crontab: installing new crontab j10@alinux:~$ crontab -l */2 * * * * echo \u0026#34;My life for aiur!!\u0026#34; | mail -s \u0026#34;프로토스\u0026#34; ssomal_@naver.com j10@alinux:~$ j10@alinux:~$ crontab -e ---- # 편집파일에 아래 내용 입력 후 저장 (3분마다 보내기) */3 * * * * date \u0026gt;\u0026gt; ~/myDate ---- crontab: installing new crontab j10@alinux:~$ crontab -l */2 * * * * echo \u0026#34;My life for aiur!!\u0026#34; | mail -s \u0026#34;프로토스\u0026#34; ssomal_@naver.com */3 * * * * date \u0026gt;\u0026gt; ~/myDate # 결과확인 j10@alinux:~$ nl myDate 1 2023. 10. 24. (화) 15:36:01 KST 2 2023. 10. 24. (화) 15:39:01 KST 3 2023. 10. 24. (화) 15:42:01 KST 4 2023. 10. 24. (화) 15:45:01 KST 개발 환경 #소스 파일 목적 파일 실행파일 a.c =\u0026gt; a.o =\u0026gt; a.exe DLL(윈도우) == so (리눅스) # DLL : dynamic Link Library so : shared object ls가 실행되기 위해서 #root@aiur:~/d5/d50# ldd /usr/bin/ls # ls 실행을 위해서는 아래 다섯개의 파일이 필요하다 linux-vdso.so.1 (0x00007fffa7724000) libselinux.so.1 =\u0026gt; /lib/x86_64-linux-gnu/libselinux.so.1 (0x00007f2278a70000) # ^ 이런 파일이 필요 libc.so.6 =\u0026gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007f2278848000) libpcre2-8.so.0 =\u0026gt; /lib/x86_64-linux-gnu/libpcre2-8.so.0 (0x00007f22787b1000) # ^ 이런 파일이 필요 /lib64/ld-linux-x86-64.so.2 (0x00007f2278aca000) 압축 #복습\n# 파일 다운 root@aiur:~/d5/d50# wget https://sqlite.org/2023/sqlite-autoconf-3430200.tar.gz # 압축 풀기 root@aiur:~/d5/d50# tar xfz sqlite-autoconf-3430200.tar.gz # 목록 환인 root@aiur:~/d5/d50# ls libc.a sqlite-autoconf-3430200 sqlite-autoconf-3430200.tar.gz # 용량 확인 root@aiur:~/d5/d50# du -sh sqlite-autoconf-3430200 13M sqlite-autoconf-3430200 13M 합계 root@aiur:~/d5/d50# cd sqlite-autoconf-3430200/ root@aiur:~/d5/d50/sqlite-autoconf-3430200# ./configure --prefix=/bb root@aiur:~/d5/d50/sqlite-autoconf-3430200# make \u0026amp;\u0026amp; make install 프로그램 삭제 #root@aiur:~# apt -y remove sqlite3 source compile - 소스코드를 다운받은 후 수동으로 설치\n압축 푼다 tar\n컴파일 환경 설정 configure\n컴파일 make\n파일 복사 make install\n/usr/local 설치 위치 생략시 기본 위치\n(윈도의 program-files와 같은 곳)\n윈도우와는 다르게 리눅스는 설치된 디렉토리만 삭제하면 끝!\n윈도우처럼 레지스트리를 등록하는 것이 아니기 때문에.\n","date":"2023-10-24","permalink":"/devl/linux/007/","section":"Developer Course","summary":"LOG #로그 파일들이 모인 곳 #root@aiur:~# cd /var/log root@aiur:/var/log# dmesg | grep pci # 아이피 root@aiur:/var/log# ip addr # 랜카드 정보 (인식했는지) root@aiur:/var/log# dmesg | grep enp0 # 로그인 정보 root@aiur:/var/log# last # 각 계정의 마지막 로그인 접속한 기록 root@aiur:/var/log# lastlog # 메일 관련된 로그 root@aiur:/var/log# nl mail.","title":"linux 기초 Day05 #2"},{"content":" 오늘도 갈피를 잡지 못하고 있는 테스트 관련 코드다.. 코드 참조 : CleanCode 197p-198p\n@Test public void turnInCoolerAndBlowerIfTooHot() throws Exception { tooHot(); assertEquales(\u0026#34;hBChl\u0026#34;, hw.getState()); } @Test public void turnInHeaterAndBlowerIfTooCold() throws Exception { tooCold(); assertEquals(\u0026#34;HBchl\u0026#34;, hw.getState()); @Test public void turnOnHiTempAlarmAtThreshold() throws Exception { wayTooHot(); assertEquals(\u0026#34;hBCHl\u0026#34;, hw.getState()); @Test public void turnOnLoTempAlarmAtThreshold() throws Exception { wayTooCold(); assertEquals(\u0026#34;HBchL\u0026#34;,hw.getState()); public void testGetPageHierarchyAsXml() throws Exception { makePages(\u0026#34;PageOne\u0026#34;, \u0026#34;PageOne.ChildOne\u0026#34;,\u0026#34;PageTwo\u0026#34;); submitRequest(\u0026#34;root\u0026#34;,\u0026#34;type:pages\u0026#34;); assertResponseIsXML(); assertResponseContains( \u0026#34;\u0026lt;name\u0026gt;PageOne\u0026lt;/name\u0026gt;\u0026#34;, \u0026#34;\u0026lt;name\u0026gt;PageTwo\u0026lt;/name\u0026gt;\u0026#34;, \u0026#34;\u0026lt;name\u0026gt;ChildOne\u0026lt;/name\u0026gt;\u0026#34; ); } public void testSymbolicLinkAreNotInXmlPageHierarchy() thorws Exception { WikiPage page = makePage(\u0026#34;PageOne)\u0026#34;; makePages(\u0026#34;PageOne.ChildOne\u0026#34;, \u0026#34;PageTwo\u0026#34;); addLinkTo(page, \u0026#34;PageTwo\u0026#34;, \u0026#34;SymPage\u0026#34;); submitRequest(\u0026#34;root\u0026#34;, \u0026#34;type:pages\u0026#34;); assertResponseIsXML(); assertResponseContains( \u0026#34;\u0026lt;name\u0026gt;PageOne\u0026lt;/name\u0026gt;\u0026#34;, \u0026#34;\u0026lt;name\u0026gt;PageTwo\u0026lt;/name\u0026gt;\u0026#34;, \u0026#34;\u0026lt;name\u0026gt;ChildOne\u0026lt;/name\u0026gt;\u0026#34; ); } public void testGetDataAsXml() throws Exception { makePageWithContent(\u0026#34;TestPageOne\u0026#34;, \u0026#34;test page\u0026#34;); submitRequest(\u0026#34;TestPageOne\u0026#34;, \u0026#34;type:data\u0026#34;); assertResponseIsXML(); assertResponseContains(\u0026#34;test page\u0026#34;, \u0026#34;\u0026lt;Text\u0026#34;); } ","date":"2023-10-23","permalink":"/devl/typing/003/","section":"Developer Course","summary":"오늘도 갈피를 잡지 못하고 있는 테스트 관련 코드다.","title":"Day 03"},{"content":" OS Network DB /root : 단독 주택 개념\n/j : 사용자 (아파트 주민 개념)\n/bin : 바이너리\n/src : 소스의 약자\n/include : 임포트 할 때\n/var : 가변적인 디렉토리\n메일이나 웹문서가 여기를 거쳐 /j 등으로 넘겨줌 /etc : 각종 설정파일\n/dev : 장치파일 모은 디렉토리\n/lost+found : 우리가 쓰는게 아닌, 시스템이 복구하기 위한\n/proc : 프로세스 약자.\n/usr : 프로그램 설치하게되면 여기서 복사하게됨\n/tmp :임시 디렉토리\n/sbin : = superbin\n리눅스 접속할 때는 리눅스 계정 필요.\n시스템 권한을 가지려면 루트 권한을 가져야함\n여기서 루트 권한으로 주려면 sodo -i 선언\n리눅스에서 mysql 접속시 계정 필요 - account (계정 - 아이디, 패스워드)\nmysql 안에도 root 권한이 있고 이 권한은 리눅스 root가 더 상위 권한을 가짐.\nmysql 사용 권한이 없을 경우 아래 내용이 필요함\n접속할 IP 사용할 데이터베이스 DB아이디 mysql - ID, PW 지금은 클라우드 시대라 서버를 직접 두는 경우가 없음 대신 클라우드는 비용이 비쌈. sqlite3 (167p) #프로그램 정보 보기 #root@aiur:~# apt show sqlite3 sqlite3에서만 쓰는 명령어 #. 을 붙이고 명령어를 써야함.\nroot@aiur:~# sqlite3 SQLite version 3.37.2 2022-01-06 13:25:41 Enter \u0026#34;.help\u0026#34; for usage hints. Connected to a transient in-memory database. Use \u0026#34;.open FILENAME\u0026#34; to reopen on a persistent database. sqlite\u0026gt; .help .archive ... Manage SQL archives .auth ON|OFF Show authorizer callbacks .backup ?DB? FILE Backup DB (default \u0026#34;main\u0026#34;) to FILE .bail on|off Stop after hitting an error. Default OFF .binary on|off Turn binary output on or off. Default OFF .cd DIRECTORY Change the working directory to DIRECTORY .changes on|off Show number of rows changed by SQL .check GLOB Fail if output since .testcase does not match ... sqlite\u0026gt; .show echo: off eqp: off explain: auto headers: off mode: list nullvalue: \u0026#34;\u0026#34; output: stdout colseparator: \u0026#34;|\u0026#34; rowseparator: \u0026#34;\\n\u0026#34; stats: off width: filename: :memory: 쿼리문에는 세미콜론 붙여야함 명령어에는 안붙임\nsqlite\u0026gt; .head on sqlite\u0026gt; .mo co sqlite\u0026gt; .open myDB sqlite\u0026gt; .table sqlite\u0026gt; create table Member( ...\u0026gt; name char(20), ...\u0026gt; bus int); sqlite\u0026gt; .table Member sqlite\u0026gt; insert into Member values(\u0026#39;김나나\u0026#39;,900); sqlite\u0026gt; select * from Member; name bus ---- --- 김나나 900 sqlite\u0026gt; .import member Member # 다시 해보고 결과값 적기 프로그램 수동 설치 #설치 디렉토리 생성 및 이동 + wget 설치 #root@aiur:~# mkdir /down root@aiur:~# cd /down root@aiur:/down# ai wget #설치하기 소스코드 다운 # https://sqlite.org/ 접속 소스코드 링크 주소를! 복사 : https://sqlite.org/2023/sqlite-autoconf-3430200.tar.gz 수동 설치하기 #윈도우에서 설치할 때 : 셋업 or 인스톨 -\u0026gt; 자동으로 어디에 설치되는지 모름\n수동은 \u0026gt; 소스컴파일 *.c를 다운받아서 configure : 컴파일 환경설정 ./configure --prefix=/디렉토리명 : 디렉토리 지정 make : 컴파일 make install : 복사 아래 과정은 gcc가 설치돼 있는 상태에서 진행해야 함.\n# 1) down 폴더에 링크 넣고 root@aiur:/down# wget https://sqlite.org/2023/sqlite-autoconf-3430200.tar.gz # 2) 현재 폴더에 압축풀기 root@aiur:/down# tar xfz sqlite-autoconf-3430200.tar.gz # 3) ls 확인 root@aiur:/down# ls sqlite-autoconf-3430200 sqlite-autoconf-3430200.tar.gz # 4) 하위 폴더 이동 root@aiur:/down# cd sqlite-autoconf-3430200/ # 5) 폴더 내용 확인 root@aiur:/down/sqlite-autoconf-3430200# ls INSTALL README.txt config.sub ltmain.sh sqlite3.h tea Makefile.am Replace.cs configure missing sqlite3.pc.in Makefile.fallback aclocal.m4 configure.ac shell.c sqlite3.rc Makefile.in compile depcomp sqlite3.1 sqlite3ext.h Makefile.msc config.guess install-sh sqlite3.c sqlite3rc.h # 6) qq 라는 하위 폴더 만들고 설치 경로로 지정. -\u0026gt; 설치함 root@aiur:/down/sqlite-autoconf-3430200# ./configure --prefix=/qq # 7) 다시 폴더 내용 확인해보기 root@aiur:/down/sqlite-autoconf-3430200# ls INSTALL README.txt config.status libtool sqlite3.h tea Makefile Replace.cs config.sub ltmain.sh sqlite3.pc Makefile.am aclocal.m4 configure missing sqlite3.pc.in Makefile.fallback compile configure.ac shell.c sqlite3.rc Makefile.in config.guess depcomp sqlite3.1 sqlite3ext.h Makefile.msc config.log install-sh sqlite3.c sqlite3rc.h # 8) make \u0026amp;\u0026amp; make install # 만약 make가 없다고 나올경우 make 설치 (apt install make) root@aiur:/down/sqlite-autoconf-3430200# make \u0026amp;\u0026amp; make install # 약 5분 동안 컴파일 및 복사가 진행됨. # 9) 설치된 폴더 내용 확인 root@aiur:/down/sqlite-autoconf-3430200# cd /qq root@aiur:/qq# ls bin include lib share root@aiur:/qq# cd bin root@aiur:/qq/bin# ls sqlite3 # 10) bin 폴더에서 직접 파일 실행시켜보기 root@aiur:/qq/bin# ./sqlite3 SQLite version 3.43.2 2023-10-10 12:14:04 Enter \u0026#34;.help\u0026#34; for usage hints. Connected to a transient in-memory database. Use \u0026#34;.open FILENAME\u0026#34; to reopen on a persistent database. sqlite\u0026gt; # 실행 완료 # 확장자가 c인 파일 찾아서 보기 root@aiur:/qq/bin# cd /down root@aiur:/down# find . -name *.c ./sqlite-autoconf-3430200/sqlite3.c ./sqlite-autoconf-3430200/shell.c ./sqlite-autoconf-3430200/tea/generic/tclsqlite3.c ./sqlite-autoconf-3430200/tea/win/nmakehlp.c # 실행해보기 (약 23만의 줄의 내용이 나온다) root@aiur:/down# nl sqlite-autoconf-3430200/sqlite3.c 설치 도중 오류 났을 경우 다시 처음부터 하기 #: cd /down : rm -rf * # 수동철시 1)부터 다시 시작 : wget https://sqlite.org/2023/sqlite-autoconf-3430200.tar.gz 압축 (61p) #윈도우에서는 마우스로 딸깍 하면 알아서 되지만\n압축을 할 때 내부적으로 일어나는 일\n폴더를 하나를 묶음 묶은 것을 압축 압축을 풀 때는 반대로 진행됨.`\ntar - type 아카이브\nroot@aiur:/down# cp /etc/services k root@aiur:/down# alias lh=\u0026#39;ls -Alh\u0026#39; root@aiur:/down# lh # 용량 확인 합계 3.1M -rw-r--r-- 1 root root 13K 10월 23 11:13 k drwxrwxr-x 5 j j 4.0K 10월 23 10:47 sqlite-autoconf-3430200 -rw-r--r-- 1 root root 3.1M 10월 18 07:48 sqlite-autoconf-3430200.tar.gz root@aiur:/down# nl k # 압축하기 root@aiur:/down# gzip k # 내용 확인 root@aiur:/down# lh 합계 3.1M -rw-r--r-- 1 root root 5.3K 10월 23 11:13 k.gz drwxrwxr-x 5 j j 4.0K 10월 23 10:47 sqlite-autoconf-3430200 -rw-r--r-- 1 root root 3.1M 10월 18 07:48 sqlite-autoconf-3430200.tar.gz # 압축풀기 root@aiur:/down# gunzip k 179 gzip k 180 ls 181 lh 182 bunzip2 k.bz2 183 gunzip k 184 bzip2 k 185 lh 186 bunzip2 k.bz2 187 xz k 188 lh 189 unxz k.xz 190 h 191 ls 192 lh 193 gunzip sqlite-autoconf-3430200 194 lh 195 gunzip sqlite-autoconf-3430200.tar.gz 196 lh 197 file k 198 file sqlite-autoconf-3430200.tar 199 tar xf sqlite-autoconf-3430200.tar 200 ls 201 ls sqlite-autoconf-3430200 202 dy -sh sqlite-autoconf-3430200 203 du -sh sqlite-autoconf-3430200 204 tar cf b.tar sqlite-autoconf-3430200 # sqlite-autoconf-3430200 디렉토리를 y2.tar.gz로 압축 root@aiur:/down# tar cfz y2.tar.gz sqlite-autoconf-3430200 root@aiur:/down# ls top #root@aiur:/down# top #작업관리자 창 top - 11:31:38 up 1:33, 4 users, load average: 0.05, 0.07, 0.08 작 업: 127 총계, 2 실행, 125 대기, 0 멈춤, 0 좀비 %Cpu: 0.3 us, 0.2 sy, 0.0 ni, 99.3 id, 0.2 wa, 0.0 hi, 0.0 si, 0.0 st MiB 메모리 : 1963.8 total, 468.4 free, 754.2 used, 741.2 buff/cache MiB 스 왑: 2048.0 total, 2047.5 free, 0.5 used. 1062.6 avail 메모리 # 좀비 : 나쁜 것. 구천을 떠도는 그런 프로세스? # load average: 0.37, 0.14, 0.11 (숫자가 작을수록 속도가 빠른 것) 리눅스 프로그램 #sleep # root@aiur:/down# jobs root@aiur:/down# sleep 50 \u0026amp; [1] 6118 root@aiur:/down# kill %1 #1번 job 실행 중단 실행, 종료, 상태 # root@aiur:/down# service mysql start root@aiur:/down# service mysql restart root@aiur:/down# service mysql stop root@aiur:/down# service mysql status # 프로그램이 종료돼 있을 때 실행하면 오류남 root@aiur:/down# mysql ERROR 2002 (HY000): Can\u0026#39;t connect to local MySQL server through socket \u0026#39;/var/run/mysqld/mysqld.sock\u0026#39; (2) 현재 리눅스 시스템 정보 확인 #root@aiur:/down# arch #아키텍쳐의 약자 x86_64 # cpu정보 root@aiur:/down# nl /proc/cpuinfo # 메모리정보 root@aiur:/down# nl /proc/meminfo # 인터럽터순서 root@aiur:/down# nl /proc/interrupts #첫번째로는 타임 어쩌고가 나옴. 인터럽터 : cpu는 일을 계속 하고 있는데 cpu 주변 여러장치 (키보드, 마이크 ,랜카드모니터,)가 일을 하려면 cpu에 자원을 요청해야하는데. 이 우선순위 순서가 인터럽터. 커널 #root@aiur:/down# uname Linux # 커널 버전 확인 root@aiur:/down# uname -r 5.15.0-87-generic # 디스크 정보 root@aiur:/down# df # df(disk free) 파일 시스템 형식 크기 사용 가용 사용% 마운트위치 tmpfs tmpfs 197M 1.1M 196M 1% /run /dev/sda4 ext4 15G 4.3G 9.7G 31% / tmpfs tmpfs 982M 0 982M 0% /dev/shm tmpfs tmpfs 5.0M 0 5.0M 0% /run/lock /dev/sda2 ext4 974M 129M 778M 15% /boot /dev/sda6 ext4 3.9G 24K 3.7G 1% /data /dev/sda5 ext4 2.9G 80K 2.8G 1% /home tmpfs tmpfs 197M 4.0K 197M 1% /run/user/1000 # vmlinuz 파일 확인 root@aiur:/boot# file vmlinuz vmlinuz: symbolic link to vmlinuz-5.15.0-87-generic #심볼릭링크로 가리키고 있음 # 심볼릭링크가 가리키고 있는 파일 확인 root@aiur:/boot# file vmlinuz-5.15.0-87-generic vmlinuz-5.15.0-87-generic: Linux kernel x86 boot executable bzImage, version 5.15.0-87-generic (buildd@lcy02-amd64-011) #97-Ubuntu SMP Mon Oct 2 21:09:21 UTC 2023, RO-rootFS, swap_dev 0XB, Normal VGA # 설명 : 리눅스 커널이고, x86에서 실행되며 bzImage(큰이미지) 그리고 버전 정보 컴퓨터가 부팅이 되는 과정 (100p) # 파워 스위치 rom(우리는 읽기만 가능) 바이어스 실행 부트 매니저 파일 시스템 마운트 (df) 커널을 찾아서 시스템을 초기화 하드디스크의 커널(운영체제를 찾음; 단단히 압축되어 있는 이미지 형태임.)을 끄집어 올려 메모리에 가져옴. 커널을 못가지고 오면 부팅이 안됨 프로세스를 트리형태로 보기 #root@aiur:/boot# pstree -pn systemd(1)─┬─systemd-journal(370) ├─multipathd(413)─┬─{multipathd}(417) │ ├─{multipathd}(418) │ ├─{multipathd}(419) │ ├─{multipathd}(420) │ ├─{multipathd}(421) │ └─{multipathd}(422) ├─systemd-udevd(425) ├─systemd-timesyn(598)───{systemd-timesyn}(608) ├─systemd-network(639) ├─systemd-resolve(641) ├─cron(653) ├─dbus-daemon(654) ├─irqbalance(661)───{irqbalance}(691) ├─networkd-dispat(664) ├─polkitd(665)─┬─{polkitd}(702) │ └─{polkitd}(730) ├─rsyslogd(666)─┬─{rsyslogd}(712) │ ├─{rsyslogd}(713) │ └─{rsyslogd}(717) ├─snapd(668)─┬─{snapd}(893) │ ├─{snapd}(894) │ ├─{snapd}(895) │ ├─{snapd}(896) │ ├─{snapd}(911) │ ├─{snapd}(912) │ ├─{snapd}(913) │ ├─{snapd}(965) │ ├─{snapd}(981) │ └─{snapd}(1037) ├─systemd-logind(670) ├─udisksd(673)─┬─{udisksd}(690) │ ├─{udisksd}(729) ... 마운트 #메모리 정보보기 #root@aiur:/boot# free 총계 사용 여분 공유 버퍼/캐시 가용 메모리: 2010980 399536 848276 1384 763168 1459612 스 왑: 2097148 524 2096624 root@aiur:/boot# runlevel N 5 root@aiur:/boot# who -r 런레벨 5 2023-10-23 09:58 파일시스템 #파일을 읽고 쓰는 방법\nNTFS : 윈도우에서 씀 ext4 : 리녹스에서 기본적으로 사용하는 파일 시스템 마운트 #윈도우에서는 필요없는 개념이었음.\nroot@aiur:/boot# lsblk NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINTS loop0 7:0 0 63.5M 1 loop /snap/core20/2015 loop1 7:1 0 111.9M 1 loop /snap/lxd/24322 loop2 7:2 0 53.3M 1 loop /snap/snapd/19457 loop3 7:3 0 63.4M 1 loop /snap/core20/1974 sda 8:0 0 25G 0 disk ├─sda1 8:1 0 1M 0 part ├─sda2 8:2 0 1G 0 part /boot #우분트 설치 할 때 만들었던 파티션 ├─sda3 8:3 0 2G 0 part [SWAP] #우분트 설치 할 때 만들었던 파티션 ├─sda4 8:4 0 15G 0 part / #우분트 설치 할 때 만들었던 파티션 ├─sda5 8:5 0 3G 0 part /home #우분트 설치 할 때 만들었던 파티션 └─sda6 8:6 0 4G 0 part /data #우분트 설치 할 때 만들었던 파티션 sr0 11:0 1 1024M 0 rom root@aiur:/boot# mount # mount 실행 후 root@aiur:/boot# df 파일 시스템 형식 크기 사용 가용 사용% 마운트위치 tmpfs tmpfs 197M 1.1M 196M 1% /run /dev/sda4 ext4 15G 4.3G 9.7G 31% / tmpfs tmpfs 982M 0 982M 0% /dev/shm tmpfs tmpfs 5.0M 0 5.0M 0% /run/lock /dev/sda2 ext4 974M 129M 778M 15% /boot /dev/sda6 ext4 3.9G 24K 3.7G 1% /data /dev/sda5 ext4 2.9G 80K 2.8G 1% /home tmpfs tmpfs 197M 4.0K 197M 1% /run/user/1000 root@aiur:/boot# cd /data root@aiur:/data# du . 20K . 20K 합계 root@aiur:/data# cp -r /etc . root@aiur:/data# du . 7.6M . 7.6M 합계 # 파일 추가해보기 root@aiur:/data# cal \u0026gt; c3 root@aiur:/data# who \u0026gt; w3 root@aiur:/data# ls c3 etc lost+found w3 # 에러 내보기 root@aiur:/data# umount /data umount: /data: target is busy. root@aiur:/data# cd root@aiur:~# df 파일 시스템 형식 크기 사용 가용 사용% 마운트위치 tmpfs tmpfs 197M 1.1M 196M 1% /run /dev/sda4 ext4 15G 4.3G 9.7G 31% / tmpfs tmpfs 982M 0 982M 0% /dev/shm tmpfs tmpfs 5.0M 0 5.0M 0% /run/lock /dev/sda2 ext4 974M 129M 778M 15% /boot /dev/sda6 ext4 3.9G 7.6M 3.7G 1% /data /dev/sda5 ext4 2.9G 80K 2.8G 1% /home tmpfs tmpfs 197M 4.0K 197M 1% /run/user/1000 # umount root@aiur:~# umount /data root@aiur:~# df #/data가 목록에서 사라짐 파일 시스템 형식 크기 사용 가용 사용% 마운트위치 tmpfs tmpfs 197M 1.1M 196M 1% /run /dev/sda4 ext4 15G 4.3G 9.7G 31% / tmpfs tmpfs 982M 0 982M 0% /dev/shm tmpfs tmpfs 5.0M 0 5.0M 0% /run/lock /dev/sda2 ext4 974M 129M 778M 15% /boot /dev/sda5 ext4 2.9G 80K 2.8G 1% /home tmpfs tmpfs 197M 4.0K 197M 1% /run/user/1000 # 아까 만든 파일에 접근해보자 root@aiur:~# ls /data # 접근불가 아무것도 안나옴. root@aiur:~# ls d4 member memeber myDB snap \u0026#39;~.d4\u0026#39; # 보이지 않아. root@aiur:~# ls /data # 다시 mount root@aiur:~# mount /data root@aiur:~# df 파일 시스템 형식 크기 사용 가용 사용% 마운트위치 tmpfs tmpfs 197M 1.1M 196M 1% /run /dev/sda4 ext4 15G 4.3G 9.7G 31% / tmpfs tmpfs 982M 0 982M 0% /dev/shm tmpfs tmpfs 5.0M 0 5.0M 0% /run/lock /dev/sda2 ext4 974M 129M 778M 15% /boot /dev/sda5 ext4 2.9G 80K 2.8G 1% /home tmpfs tmpfs 197M 4.0K 197M 1% /run/user/1000 /dev/sda6 ext4 3.9G 7.6M 3.7G 1% /data # 접근 됨 root@aiur:~# ls /data c3 etc lost+found w3 복습 # /data 연결 끊어보기 root@aiur:~# umount /data root@aiur:~# lsblk NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINTS loop0 7:0 0 63.5M 1 loop /snap/core20/2015 loop1 7:1 0 111.9M 1 loop /snap/lxd/24322 loop2 7:2 0 53.3M 1 loop /snap/snapd/19457 loop3 7:3 0 63.4M 1 loop /snap/core20/1974 sda 8:0 0 25G 0 disk ├─sda1 8:1 0 1M 0 part ├─sda2 8:2 0 1G 0 part /boot ├─sda3 8:3 0 2G 0 part [SWAP] ├─sda4 8:4 0 15G 0 part / ├─sda5 8:5 0 3G 0 part /home └─sda6 8:6 0 4G 0 part sr0 11:0 1 1024M 0 rom # /data 다시 연결 root@aiur:~# mount /data root@aiur:~# lsblk NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINTS loop0 7:0 0 63.5M 1 loop /snap/core20/2015 loop1 7:1 0 111.9M 1 loop /snap/lxd/24322 loop2 7:2 0 53.3M 1 loop /snap/snapd/19457 loop3 7:3 0 63.4M 1 loop /snap/core20/1974 sda 8:0 0 25G 0 disk ├─sda1 8:1 0 1M 0 part ├─sda2 8:2 0 1G 0 part /boot ├─sda3 8:3 0 2G 0 part [SWAP] ├─sda4 8:4 0 15G 0 part / ├─sda5 8:5 0 3G 0 part /home └─sda6 8:6 0 4G 0 part /data sr0 11:0 1 1024M 0 rom 내가 숨기고 싶은 폴더를 연결고리를 끊을 때 사용해볼 수 있다.\n경로를 바꿔서 mount 하기 #root@aiur:~# umount /data root@aiur:~# mkdir /p5 root@aiur:~# mount -t ext4 /dev/sda6 /p5 root@aiur:~# df 파일 시스템 형식 크기 사용 가용 사용% 마운트위치 tmpfs tmpfs 197M 1.1M 196M 1% /run /dev/sda4 ext4 15G 4.3G 9.7G 31% / tmpfs tmpfs 982M 0 982M 0% /dev/shm tmpfs tmpfs 5.0M 0 5.0M 0% /run/lock /dev/sda2 ext4 974M 129M 778M 15% /boot /dev/sda5 ext4 2.9G 80K 2.8G 1% /home tmpfs tmpfs 197M 4.0K 197M 1% /run/user/1000 /dev/sda6 ext4 3.9G 7.6M 3.7G 1% /p5 # 한번 더 해보기 root@aiur:~# mount -t ext4 /dev/sda6 /data root@aiur:~# ls /data c3 etc lost+found w3 root@aiur:~# ls /p5 c3 etc lost+found w3 root@aiur:~# unmount /data 명령어 \u0026#39;unmount\u0026#39; 을(를) 찾을 수 없습니다. 다음 명령어로 시도하시겠습니까: deb umountmount의 명령어 \u0026#39; (2.37.2-4ubuntu3)\u0026#39; Try: apt install \u0026lt;deb name\u0026gt; root@aiur:~# umount /data root@aiur:~# umount /p5 root@aiur:~# ls /data root@aiur:~# ls /p5 윈도우 폴더를 리눅스에서 접근하기 # 윈도우에서 \u0026lsquo;win\u0026rsquo; 폴더 만들기 (C:\\win) win폴더 안에 text 파일 생성 (mywin.txt) 버츄얼박스 설정 변경 \u0026gt; 공유폴더 클릭\n# 연결한 폴더 생성 root@aiur:~# mkdir /yes root@aiur:~# ls /yes # 아무 폴더 없음 # 윈도우 폴더와 마운트 (yes == win 설정하기) root@aiur:~# mount -t vboxsf win /yes root@aiur:~# df 파일 시스템 형식 크기 사용 가용 사용% 마운트위치 tmpfs tmpfs 197M 1.1M 196M 1% /run /dev/sda4 ext4 15G 4.3G 9.7G 31% / tmpfs tmpfs 982M 0 982M 0% /dev/shm tmpfs tmpfs 5.0M 0 5.0M 0% /run/lock /dev/sda2 ext4 974M 129M 778M 15% /boot /dev/sda5 ext4 2.9G 80K 2.8G 1% /home tmpfs tmpfs 197M 4.0K 197M 1% /run/user/1000 /dev/sda6 ext4 3.9G 7.6M 3.7G 1% /data win vboxsf 232G 142G 91G 62% /yes # 다시 yes 폴더 내용 조회 root@aiur:~# cd /yes root@aiur:/yes# ls mywin.txt #윈도우에서 저장했던 파일이 보임 # 설정한 폴더(win)로 내용 복사 root@aiur:/yes# cp -r /etc /yes # 설정한 폴더(win)에 파일 생성 root@aiur:/yes# echo \u0026#34;여기는 리눅스 윈도 응답하라 오버 \u0026#34; \u0026gt; my1.txt # win 폴더에 파일 생성됨. # 연결 끊기 root@aiur:/# umount /yes root@aiur:/# df # /yes 디렉토리 끊김 파일 시스템 형식 크기 사용 가용 사용% 마운트위치 tmpfs tmpfs 197M 1.1M 196M 1% /run /dev/sda4 ext4 15G 4.3G 9.7G 31% / tmpfs tmpfs 982M 0 982M 0% /dev/shm tmpfs tmpfs 5.0M 0 5.0M 0% /run/lock /dev/sda2 ext4 974M 129M 778M 15% /boot /dev/sda5 ext4 2.9G 80K 2.8G 1% /home tmpfs tmpfs 197M 4.0K 197M 1% /run/user/1000 /dev/sda6 ext4 3.9G 7.6M 3.7G 1% /data 도움말 보기 #root@aiur:~# apt apt 2.4.9 (amd64) 사용법: apt [options] command apt는 패키지에 대해 정보 표시, 검색, 관리 등의 명령어를 제공하는 명령줄 패키지 관리자입니다. apt는 apt-get과 apt-cache와 같이 특화된 APT 도구들과 동등한 기능들을 제공하지만, 기본적으로 상호작용적인 사용을 위해 적합한 옵션을 활성화합니다. 자주 사용되는 명령어: list - 패키지 이름을 기반으로 패키지를 나열합니다 search - 패키지 설명에서 키워드를 검색합니다 show - 패키지의 정보를 표시합니다 install - 패키지를 설치합니다 reinstall - 패키지를 재설치합니다 remove - 패키지를 제거합니다 autoremove - 사용하지 않는 패키지를 자동으로 전부 지웁니다 update - 사용 가능한 패키지의 목록을 업데이트합니다 upgrade - 패키지를 설치/업그레이드해 시스템을 업그레이드합니다 full-upgrade - 패키지를 삭제/설치/업그레이드해 시스템을 업그레이드합니다 edit-sources - 소스 정보 파일을 편집합니다 satisfy - satisfy dependency strings 이용 가능한 명령에 대한 더 많은 정보를 얻고자 한다면 apt(8)를 보십시오. Configuration options and syntax is detailed in apt.conf(5). Information about how to configure sources can be found in sources.list(5). Package and version choices can be expressed via apt_preferences(5). Security details are available in apt-secure(8). 이 APT는 Super Cow Powers로 무장했습니다. # 기타 도움말 root@aiur:~# apt --help root@aiur:~# man apt root@aiur:~# useradd man help # help 화면에서 이동 - 스페이스바 ,b / 종료 : q root@aiur:~# useradd -D GROUP=100 HOME=/home INACTIVE=-1 EXPIRE= SHELL=/bin/sh SKEL=/etc/skel CREATE_MAIL_SPOOL=no #내 홈이 어딘지 root@aiur:~# echo $HOME /root # 내가 사용하는 쉘이 뭔지 root@aiur:~# echo $SHELL /bin/bash # 몇명 접속해 있는지 root@aiur:~# who -q j j 사용자 수=2 # root@aiur:~# alias uq=\u0026#39;ls /home \u0026amp;\u0026amp; tail -5 /etc/passwd\u0026#39; root@aiur:~# uq j lost+found lxd❌999💯:/var/snap/lxd/common/lxd:/bin/false mysql❌114:119:MySQL Server,,,:/nonexistent:/bin/false smmta❌115:121:Mail Transfer Agent,,,:/var/lib/sendmail:/usr/sbin/nologin smmsp❌116:122:Mail Submission Program,,,:/var/lib/sendmail:/usr/sbin/nologin tomcat❌998:998:Apache Tomcat:/var/lib/tomcat:/usr/sbin/nologin ","date":"2023-10-23","permalink":"/devl/linux/004/","section":"Developer Course","summary":"OS Network DB /root : 단독 주택 개념","title":"linux 기초 Day04 #1"},{"content":"새 우분투 #루트 암호 바꾸기 #root@aiur:~# passwd 새 암호: 사용자 추가 #root@aiur:~# useradd -m -d /home/yellow -s /bin/bash yellow root@aiur:~# passwd yellow 새 암호: 새 암호 다시 입력: passwd: 암호를 성공적으로 업데이트했습니다 root (105p) #root@aiur:~# uq j lost+found mysql❌114:119:MySQL Server,,,:/nonexistent:/bin/false smmta❌115:121:Mail Transfer Agent,,,:/var/lib/sendmail:/usr/sbin/nologin smmsp❌116:122:Mail Submission Program,,,:/var/lib/sendmail:/usr/sbin/nologin tomcat❌998:998:Apache Tomcat:/var/lib/tomcat:/usr/sbin/nologin red❌1001:1001::/home/red:/bin/sh red 로 접속 ## 이렇게 만들 경우 홈이 안나옴. # red@aiur:~$ \u0026lt; 이렇게 안나오고 # $ \u0026lt;이렇게 나옴 root@aiur:~# useradd red root@aiur:~# passwd red 새 암호: 새 암호 다시 입력: passwd: 암호를 성공적으로 업데이트했습니다 # red의 홈주소 $ echo $HOME /home/red # red의 쉘 확인 $ echo $SHELL /bin/sh 사용자 지우기 #root@aiur:~# userdel -r red 유저 강퇴 #root@aiur:~# who j pts/0 2023-10-23 14:40 (10.0.2.2) j pts/1 2023-10-23 14:40 (10.0.2.2) yellow pts/2 2023-10-23 14:59 (10.0.2.2) red pts/3 2023-10-23 15:18 (10.0.2.2) root@aiur:~# pq red root 1839 738 0 15:18 ? 00:00:00 sshd: red [priv] red 1842 1 0 15:18 ? 00:00:00 /lib/systemd/systemd --user red 1843 1842 0 15:18 ? 00:00:00 (sd-pam) red 1902 1839 0 15:18 ? 00:00:00 sshd: red@pts/3 red 1903 1902 0 15:18 pts/3 00:00:00 -sh #이거 죽이기 root 1910 1184 0 15:18 pts/1 00:00:00 grep --color=auto red root@aiur:~# kill -9 -1903 root@aiur:~# kill -9 -1903 root@aiur:~# userdel -r red # -r : 메인디렉토리 홈 디렉토리 삭제. userdel: red mail spool (/var/mail/red) not found userdel: red home directory (/home/red) not found 사용자 모드 바꿀 때 #root@aiur:~# uq j lost+found yellow smmta❌115:121:Mail Transfer Agent,,,:/var/lib/sendmail:/usr/sbin/nologin smmsp❌116:122:Mail Submission Program,,,:/var/lib/sendmail:/usr/sbin/nologin tomcat❌998:998:Apache Tomcat:/var/lib/tomcat:/usr/sbin/nologin green❌1002:1002::/home/green/green:/bin/bash yellow❌1003:1003::/home/yellow:/bin/bash root@aiur:~# usermod -c \u0026#34;aaaaa\u0026#34; yellow root@aiur:~# uq j lost+found yellow smmta❌115:121:Mail Transfer Agent,,,:/var/lib/sendmail:/usr/sbin/nologin ... yellow❌1003:1003:aaaaa:/home/yellow:/bin/bash #aaaaa 가 들어감. # 사용자 정보 추가 root@aiur:~# useradd -m -d /home/black -s /bin/bash balck root@aiur:~# passwd 새 암호: 새 암호 다시 입력: passwd: 암호를 성공적으로 업데이트했습니다 # 다른방법으로 사용자 정보 추가 root@aiur:~# adduser white \u0026#39;white\u0026#39; 사용자를 추가 중... 새 그룹 \u0026#39;white\u0026#39; (1001) 추가 ... 새 사용자 \u0026#39;white\u0026#39; (1001) 을(를) 그룹 \u0026#39;white\u0026#39; (으)로 추가 ... \u0026#39;/home/white\u0026#39; 홈 디렉터리를 생성하는 중... \u0026#39;/etc/skel\u0026#39;에서 파일들을 복사하는 중... 새 암호: 새 암호 다시 입력: passwd: 암호를 성공적으로 업데이트했습니다 white의 사용자의 정보를 바꿉니다 새로운 값을 넣거나, 기본값을 원하시면 엔터를 치세요 이름 []: 휘화이트 방 번호 []: 500 직장 전화번호 []: 02-500-9000 집 전화번호 []: 02-2000-5000 기타 []: 규리규리귤귤이 chfn: 이름에 ASCII가 아닌 문자가 들어 있습니다: \u0026#39;트\u0026#39; chfn: \u0026#39;규리규리귤귤이\u0026#39;에 ASCII가 아닌 문자가 들어 있습니다 정보가 올바릅니까? [Y/n] y root@aiur:~# uq black j lost+found white yellow tomcat❌998:998:Apache Tomcat:/var/lib/tomcat:/usr/sbin/nologin green❌1002:1002::/home/green/green:/bin/bash yellow❌1003:1003:aaaaa:/home/yellow:/bin/bash balck❌1004:1004::/home/black:/bin/bash white❌1001:1001:트,500,02-500-9000,02-2000-5000,규리규리귤귤이:/home/white:/bin/bash 유저생성시 자동으로 홈 만들어주기 #root@aiur:~# useradd -D GROUP=100 HOME=/home INACTIVE=-1 EXPIRE= SHELL=/bin/sh SKEL=/etc/skel CREATE_MAIL_SPOOL=no # 1) bash 설정 root@aiur:~# useradd -D -s /bin/bash root@aiur:~# useradd -D GROUP=100 HOME=/home INACTIVE=-1 EXPIRE= SHELL=/bin/bash SKEL=/etc/skel # 2) /etc/login.defs 파일 아래에 \u0026#34;CREATE_HOME yes\u0026#34; 추가하기 root@aiur:~# echo \u0026#34;CREATE_HOME yes\u0026#34; \u0026gt;\u0026gt; /etc/login.defs root@aiur:~# vi /etc/login.defs vi /etc/login.defs 들여보기 #변수 설명과 값.\n161 # PASS_MAX_DAYS Maximum number of days a password may be used. 162 # PASS_MIN_DAYS Minimum number of days allowed between password changes. 163 # PASS_WARN_AGE Number of days warning given before a password expires. 164 # 165 PASS_MAX_DAYS 99999 166 PASS_MIN_DAYS 0 167 PASS_WARN_AGE 7 유저 생성시 기본 세팅 #root@aiur:~# useradd -D GROUP=100 HOME=/home INACTIVE=-1 EXPIRE= SHELL=/bin/bash SKEL=/etc/skel #뼈대 CREATE_MAIL_SPOOL=no root@aiur:~# #root의 skel root@aiur:~# cd /etc/skel/ root@aiur:/etc/skel# ls -Al 합계 12 -rw-r--r-- 1 root root 220 1월 7 2022 .bash_logout -rw-r--r-- 1 root root 3771 1월 7 2022 .bashrc -rw-r--r-- 1 root root 807 1월 7 2022 .profile # pink에서 skel pink@aiur:/etc/skel$ ls -Al 합계 12 -rw-r--r-- 1 root root 220 1월 7 2022 .bash_logout -rw-r--r-- 1 root root 3771 1월 7 2022 .bashrc -rw-r--r-- 1 root root 807 1월 7 2022 .profile # skel 내 파일들이 동일함을 알 수 있다. root 기본설정 폴더에 내용 추가 후 계정 새로 만들기 #root@aiur:/etc/skel# cp ~/.vimrc . root@aiur:/etc/skel# cp ~/.bash_aliases . root@aiur:/etc/skel# cat \u0026gt; ReadMe ********************* 새로운 계정입니다. 잘 사용해봅시다 ********************* root@aiur:/etc/skel# mkdir public_html root@aiur:/etc/skel# useradd purple root@aiur:/etc/skel# passwd purple # purple 에서 확인 # 계정 생성 시 설정 파일이 달라 진 것을 확인 purple@aiur:/etc/skel$ ls ReadMe public_html purple@aiur:/etc/skel$ ll 합계 36 drwxr-xr-x 3 root root 4096 10월 23 15:40 ./ drwxr-xr-x 111 root root 4096 10월 23 15:40 ../ -rw-r--r-- 1 root root 353 10월 23 15:39 .bash_aliases -rw-r--r-- 1 root root 220 1월 7 2022 .bash_logout -rw-r--r-- 1 root root 3771 1월 7 2022 .bashrc -rw-r--r-- 1 root root 807 1월 7 2022 .profile -rw-r--r-- 1 root root 83 10월 23 15:39 .vimrc -rw-r--r-- 1 root root 94 10월 23 15:39 ReadMe drwxr-xr-x 2 root root 4096 10월 23 15:40 public_html/ purple@aiur:/etc/skel$ root id #root@aiur:/etc/skel# nl /etc/passwd 1 root❌0:0:root:/root:/bin/bash # root 아이디는 \u0026#39;0\u0026#39; 2 daemon❌1:1:daemon:/usr/sbin:/usr/sbin/nologin 3 bin❌2:2:bin:/bin:/usr/sbin/nologin 4 sys❌3:3:sys:/dev:/usr/sbin/nologin ... # 루트 아이디 확인 root@aiur:/etc/skel# id uid=0(root) gid=0(root) groups=0(root) # 그룹 root@aiur:/etc/skel# tail -3 /etc/group white❌1001: pink❌1005: purple❌1006: # 쉐도우 root@aiur:/etc/skel# tail -3 /etc/shadow # 쉐도우를 열어보면 암호화되어 출력됨. 해킹하려면 2억년 걸림 white:$y$j9T$fPvowORlU.lDs/0luZca8/$s8VSxiweVUC7bVe2xqT/GN1PcJ.ImKkI5R671hQY7I7:19653:0:99999:7::: pink:$y$j9T$inaB8Jy/S5OnqxZlGa2Qa1$nBljUD0KJ0ZyJsz8DqWDf/6v1S3NLJmyTpG2gUYLSTC:19653:0:99999:7::: purple:$y$j9T$fuO4lJoPiH8VlJQuRty8Y.$qspPk7hOCn30ZVY//6vZTd9QVURgmimIKYd4wU4W.60:19653:0:99999:7::: passwd 와 shadow는 연결되어있음 #root@aiur:/etc/skel# nl /etc/shadow 1 root:$y$j9T$z/XNZBEGdystouzaVEwlB.$i79cHBm2nJAAwWmHWz4vL1uqc1.zAdEffE02Gp/s1y5:19653:0:99999:7::: 2 daemon:*:19579:0:99999:7::: 3 bin:*:19579:0:99999:7::: 4 sys:*:19579:0:99999:7::: 5 sync:*:19579:0:99999:7::: 6 games:*:19579:0:99999:7::: 7 man:*:19579:0:99999:7::: 8 lp:*:19579:0:99999:7::: 9 mail:*:19579:0:99999:7::: 10 news:*:19579:0:99999:7::: ... root@aiur:/etc/skel# nl /etc/passwd 1 root❌0:0:root:/root:/bin/bash 2 daemon❌1:1:daemon:/usr/sbin:/usr/sbin/nologin 3 bin❌2:2:bin:/bin:/usr/sbin/nologin 4 sys❌3:3:sys:/dev:/usr/sbin/nologin 5 sync❌4:65534:sync:/bin:/bin/sync 6 games❌5:60:games:/usr/games:/usr/sbin/nologin 7 man❌6:12👨/var/cache/man:/usr/sbin/nologin 8 lp❌7:7:lp:/var/spool/lpd:/usr/sbin/nologin 9 mail❌8:8:mail:/var/mail:/usr/sbin/nologin 10 news❌9:9:news:/var/spool/news:/usr/sbin/nologin ... chage #root@aiur:/etc/skel# chage Usage: chage [options] LOGIN Options: -d, --lastday LAST_DAY set date of last password change to LAST_DAY -E, --expiredate EXPIRE_DATE set account expiration date to EXPIRE_DATE -h, --help display this help message and exit -i, --iso8601 use YYYY-MM-DD when printing dates -I, --inactive INACTIVE set password inactive after expiration to INACTIVE -l, --list show account aging information -m, --mindays MIN_DAYS set minimum number of days before password change to MIN_DAYS -M, --maxdays MAX_DAYS set maximum number of days before password change to MAX_DAYS -R, --root CHROOT_DIR directory to chroot into -W, --warndays WARN_DAYS set expiration warning days to WARN_DAYS #pink의 chage 목록 보기 root@aiur:/etc/skel# chage -l pink 마지막으로 암호를 바꾼 날 : 10월 23, 2023 암호 만료 : 안함 암호가 비활성화 기간 : 안함 계정 만료 : 안함 암호를 바꿀 수 있는 최소 날 수 : 0 암호를 바꿔야 하는 최대 날 수 : 99999 암호 만료 예고를 하는 날 수 : 7 root@aiur:/etc/skel# # 계정만료 값 바꾸기 root@aiur:/etc/skel# chage -E \u0026#39;2023-12-31\u0026#39; pink root@aiur:/etc/skel# chage -l pink 마지막으로 암호를 바꾼 날 : 10월 23, 2023 암호 만료 : 안함 암호가 비활성화 기간 : 안함 계정 만료 : 12월 31, 2023 암호를 바꿀 수 있는 최소 날 수 : 0 암호를 바꿔야 하는 최대 날 수 : 99999 암호 만료 예고를 하는 날 수 : 7 shadow 에 passwd를 합치기 #root@aiur:/etc/skel# pwunconv root@aiur:/etc/skel# nl /etc/passwd 1 root:$y$j9T$z/XNZBEGdystouzaVEwlB.$i79cHBm2nJAAwWmHWz4vL1uqc1.zAdEffE02Gp/s1y5:0:0:root:/root:/bin/bash 2 daemon:*:1:1:daemon:/usr/sbin:/usr/sbin/nologin 3 bin:*:2:2:bin:/bin:/usr/sbin/nologin 4 sys:*:3:3:sys:/dev:/usr/sbin/nologin 5 sync:*:4:65534:sync:/bin:/bin/sync 6 games:*:5:60:games:/usr/games:/usr/sbin/nologin 7 man:*:6:12👨/var/cache/man:/usr/sbin/nologin 8 lp:*:7:7:lp:/var/spool/lpd:/usr/sbin/nologin 9 mail:*:8:8:mail:/var/mail:/usr/sbin/nologin 10 news:*:9:9:news:/var/spool/news:/usr/sbin/nologin ... root@aiur:/etc/skel# nl /etc/shadow nl: /etc/shadow: 그런 파일이나 디렉터리가 없습니다 root@aiur:/etc/skel# pwunconv root@aiur:/etc/skel# tail -3 /etc/passwd white:$y$j9T$fPvowORlU.lDs/0luZca8/$s8VSxiweVUC7bVe2xqT/GN1PcJ.ImKkI5R671hQY7I7:1001:1001:트,500,02-500-9000,02-2000-5000,규리규리귤귤이:/home/white:/bin/bash pink:$y$j9T$inaB8Jy/S5OnqxZlGa2Qa1$nBljUD0KJ0ZyJsz8DqWDf/6v1S3NLJmyTpG2gUYLSTC:1005:1005::/home/pink:/bin/bash purple:$y$j9T$fuO4lJoPiH8VlJQuRty8Y.$qspPk7hOCn30ZVY//6vZTd9QVURgmimIKYd4wU4W.60:1006:1006::/home/purple:/bin/bash # 해제 root@aiur:/etc/skel# pwconv group # 그룹으로 사용자를 묶은 후 그룹에게 권한을 주는 것 # 기본 소속그룹 - 자기 자신 하나가 나온다. pink@aiur:/etc/skel$ groups pink 그룹 만들기 root@aiur:/etc/skel# groupadd BC root@aiur:/etc/skel# alias t3=\u0026#39;tail -3\u0026#39; root@aiur:/etc/skel# t3 /etc/group pink❌1005: purple❌1006: BC❌1007: # 현재 그룹에 새 유저(b1, b2) 만들기 root@aiur:/etc/skel# useradd -G BC b1 root@aiur:/etc/skel# useradd -G BC b2 root@aiur:/etc/skel# passwd b1 새 암호: 새 암호 다시 입력: passwd: 암호를 성공적으로 업데이트했습니다 root@aiur:/etc/skel# passwd b2 새 암호: 새 암호 다시 입력: passwd: 암호를 성공적으로 업데이트했습니다 root@aiur:/etc/skel# t3 /etc/group BC❌1007:pink,b1,b2 b1❌1008:t3 b2❌1009: b1에서 그룹 상태 확인 b1@aiur:~$ groups b1 BC IT 그룹 권한 실습 #root@aiur:/etc/skel# groupadd IT root@aiur:/etc/skel# useradd -G IT it1 ... root@aiur:/etc/skel# useradd -G IT it5 root@aiur:/etc/skel# passwd it1 새 암호: 새 암호 다시 입력: passwd: 암호를 성공적으로 업데이트했습니다 root@aiur:/etc/skel# passwd it2 ... 새 암호 다시 입력: passwd: 암호를 성공적으로 업데이트했습니다 uq b1 black it2 it4 j pink white b2 it1 it3 it5 lost+found purple yellow it1❌1009:1011::/home/it1:/bin/bash it2❌1010:1012::/home/it2:/bin/bash it3❌1011:1013::/home/it3:/bin/bash it4❌1012:1014::/home/it4:/bin/bash it5❌1013:1015::/home/it5:/bin/bash group 용량 제한 # 네이버는 한 사람이 3개까지 계정 생성 가능\n네이버 각 메일 용량 5G (네이버 홈 )\n네이버 마이박스 계정 총 용량 30G\n구글은 계정마다 15G\n한 사람의 계성생성 제한 없음\npink 테스트 : 용량 제한이 없는 계정 #pink@aiur:~$ quota pink@aiur:~$ du ~ 4 /home/pink/.cache 20 /home/pink pink@aiur:~$ df -h 파일 시스템 크기 사용 가용 사용% 마운트위치 tmpfs 197M 1.1M 196M 1% /run /dev/sda5 15G 4.2G 9.8G 31% / tmpfs 983M 0 983M 0% /dev/shm tmpfs 5.0M 0 5.0M 0% /run/lock /dev/sda6 3.9G 24K 3.7G 1% /data /dev/sda2 974M 129M 778M 15% /boot /dev/sda4 2.9G 408K 2.8G 1% /home # 여기 가용 용량 확인 ... # 임의로 큰 용량 차지하는 파일 생성 fallocate: no filename specified pink@aiur:~$ fallocate -l 3G p2 pink@aiur:~$ df -h 파일 시스템 크기 사용 가용 사용% 마운트위치 tmpfs 197M 1.1M 196M 1% /run /dev/sda5 15G 4.2G 9.8G 31% / tmpfs 983M 0 983M 0% /dev/shm tmpfs 5.0M 0 5.0M 0% /run/lock /dev/sda6 3.9G 24K 3.7G 1% /data /dev/sda2 974M 129M 778M 15% /boot /dev/sda4 2.9G 2.8G 0 100% /home # 이거 확인 ... # 차지하고 있는 용량 확인 pink@aiur:~$ ls -Alh 합계 2.8G # 확인헀으니 지우기 pink@aiur:~$ rm -f p2 사용자 용량 제한 하기 #root@aiur:~# mount | grep /home /dev/sda4 on /home type ext4 (rw,relatime) root@aiur:~# vi /etc/fstab # 아래 내용 편집 - 저장 ------ 15 # /home was on /dev/sda4 during curtin installation # ⬇️아래 \u0026#39;usrquota\u0026#39; 정확한 위치에 추가 16 /dev/disk/by-uuid/b1007428-f1c6-4d22-a56c-bd20ad3d824a /home ext4 defaults,usrquota 0 1 ------ 개별 용량 주기 #root@aiur:~# mount -o remount /home root@aiur:~# mount | grep /home /dev/sda4 on /home type ext4 (rw,relatime,quota,usrquota) root@aiur:~# quotaoff -aug # 오류남 root@aiur:~# quotaon -aug quotaon: cannot find /home/aquota.user on /dev/sda4 [/home] # quotaon -aug 작동하게 하기 root@aiur:~# quotacheck -augm #a quota.user 생김 -\u0026gt; quotaon -aug 명령 가능 root@aiur:~# ls /home aquota.user b2 it1 it3 it5 lost+found purple yellow b1 black it2 it4 j pink white root@aiur:~# quotaon -aug root@aiur:~# edquota -t # 용량 편집하기 root@aiur:~# edquota -u it1 # 편집 파일 ---------- Disk quotas for user it1 (uid 1009): Filesystem blocks soft hard inodes soft\u0026gt; /dev/sda4 32 0 0 # 위 내용에 soft, hard 용량주기 Disk quotas for user it1 (uid 1009): Filesystem blocks soft hard inodes soft\u0026gt; /dev/sda4 32 200000 250000 ---------- # 용량 변경 확인 root@aiur:~# repquota -a *** Report for user quotas on device /dev/sda4 Block grace time: 7days; Inode grace time: 7days Block limits File limits User used soft hard grace used soft hard grace ---------------------------------------------------------------------- root -- 20 0 0 2 0 0 j -- 32 0 0 11 0 0 yellow -- 32 0 0 9 0 0 balck -- 16 0 0 4 0 0 white -- 16 0 0 4 0 0 pink -- 20 0 0 6 0 0 purple -- 40 0 0 11 0 0 b1 -- 36 0 0 10 0 0 b2 -- 32 0 0 8 0 0 it1 -- 32 200000 250000 8 0 0 it2 -- 32 0 0 8 0 0 it3 -- 32 0 0 8 0 0 it4 -- 32 0 0 8 0 0 it5 -- 32 0 0 8 0 0 it1의 쿼터값을 it2~it5에 복사하기 #root@aiur:~# edquota -p it1 it{2..5} root@aiur:~# repquota -a *** Report for user quotas on device /dev/sda4 Block grace time: 7days; Inode grace time: 7days Block limits File limits User used soft hard grace used soft hard grace ---------------------------------------------------------------------- root -- 20 0 0 2 0 0 j -- 32 0 0 11 0 0 yellow -- 32 0 0 9 0 0 balck -- 16 0 0 4 0 0 white -- 16 0 0 4 0 0 pink -- 20 0 0 6 0 0 purple -- 40 0 0 11 0 0 b1 -- 36 0 0 10 0 0 b2 -- 32 0 0 8 0 0 it1 -- 32 200000 250000 8 0 0 it2 -- 32 200000 250000 8 0 0 it3 -- 32 200000 250000 8 0 0 it4 -- 32 200000 250000 8 0 0 it5 -- 32 200000 250000 8 0 0 # 껐다 다시 켜줘야 it1에서 실행됨. root@aiur:~# quotaoff -aug root@aiur:~# quotaon -aug it1에서 용량 테스트 ## quota가 없다고 나올 경우 root에서 quotaoff \u0026gt; quotaon 해주고 다시 실행하기 it1@aiur:~$ quota Disk quotas for user it1 (uid 1009): Filesystem blocks quota limit grace files quota limit grace /dev/sda4 40 200000 250000 11 0 0 250mg로 용량을 지정해서 다시 수정 후 다시 \u0026hellip;\nit1@aiur:~$ quota Disk quotas for user it1 (uid 1009): Filesystem blocks quota limit grace files quota limit grace /dev/sda4 40 20000 25000 11 0 0 it1@aiur:~$ fallocate -l 25M k fallocate: fallocate failed: 디스크 할당량이 초과됨 it1@aiur:~$ quota #블록이 꽉 찬 것을 볼 수 있다. Disk quotas for user it1 (uid 1009): Filesystem blocks quota limit grace files quota limit grace /dev/sda4 25000* 20000 25000 7days 12 0 0 ","date":"2023-10-23","permalink":"/devl/linux/005/","section":"Developer Course","summary":"새 우분투 #루트 암호 바꾸기 #root@aiur:~# passwd 새 암호: 사용자 추가 #root@aiur:~# useradd -m -d /home/yellow -s /bin/bash yellow root@aiur:~# passwd yellow 새 암호: 새 암호 다시 입력: passwd: 암호를 성공적으로 업데이트했습니다 root (105p) #root@aiur:~# uq j lost+found mysql❌114:119:MySQL Server,,,:/nonexistent:/bin/false smmta❌115:121:Mail Transfer Agent,,,:/var/lib/sendmail:/usr/sbin/nologin smmsp❌116:122:Mail Submission Program,,,:/var/lib/sendmail:/usr/sbin/nologin tomcat❌998:998:Apache Tomcat:/var/lib/tomcat:/usr/sbin/nologin red❌1001:1001::/home/red:/bin/sh red 로 접속 ## 이렇게 만들 경우 홈이 안나옴.","title":"linux 기초 Day04 #2"},{"content":"과제하느라 찾을 시간이 없어서 오늘도 책 예제를 참조했다.\n이번 과제에 테스트코드를 사용해봐야하는데 마침 예문 중에 테스트코드에 관한 내용이 있어서 이걸로 결정했다.\n코드 참조 : 모던 자바 인 액션 357p-358p\npublic class BuyStocksSteps { private Map\u0026lt;String, Integer\u0026gt; stockUnitPrices = new HashMap\u0026lt;\u0026gt;(); private Order order = new Order(); @Given(\u0026#34;^the price if a \\\u0026#34;(.*?)\\\u0026#34; stock is (\\\\d+)\\\\$$\u0026#34;) public void setUnitPrice(String stockName, int unitPrice) { stockUnitValues.put(stockName, unitPrice); } @When(\u0026#34;^I buy (\\\\d+) \\\u0026#34;(.*?)\\\u0026#34;$\u0026#34;) public void buyStocks(int quantity, String stockName){ Trade trade = new Trade(); trade.setType(Trade.Type.BUY); Stock stock = new Stock(); stock.setSymbol(stockName); trade.setStock(stock); trade.setPrice(stickUnitPrices.get(stockName)); trade.setQuantity(quantity); order.addTrade(trade); } @Then(\u0026#34;^the order value should be (\\\\d+)\\\\$$\u0026#34;) public void checkOrderValue(int expectedValue) { assertEquals(expectedValue, order.getValue()); } } 여기서 끝이 아니다. 원래 이 예제은 람다식으로 변환하기 위한 사전 예제인데, 책에서는 람다식 변환을 일부만 해서 보여줬다.. 나머지는 직접 작성해보자.\n아래 코드 설명 : 책 설명에 따르면 자바 8이 람다 표현식을 지원하면서 두 개의 인수 메서드를 이용해 어노테이션을 제거하는 다른 문법을 큐컴버로(?) 개발 할 수 있다고 한다.\npublic class BuyStocksSteps implements cucumber.api.java8.En { private Map\u0026lt;String, Integer\u0026gt; stockUnitPrices = new HashMap\u0026lt;\u0026gt;(); private Order order = new Order(); public BuyStocksSteps() { Given(\u0026#34;^the price of a \\\u0026#34;(.*?)\\\u0026#34; stock is (\\\\d+)\\\\$$\u0026#34;, (String stockName, int unitPrice) -\u0026gt; { stockUnitValues.put(stockName, unitPrice); }); //여기까지가 책에 나온 부분. //내용은 모르겠지만 일단 람다식은 알겠으므로 나머지도 같은 방식으로 작성해보겠다. When(\u0026#34;^I buy (\\\\d+) \\\u0026#34;(.*?)\\\u0026#34;$\u0026#34;, (int quantity, String stockName) -\u0026gt; { Trade trade = new Trade(); trade.setType(Trade.Type.BUY); Stock stock = new Stock(); stock.setSymbol(stockName); trade.setStock(stock); trade.setPrice(stockUnitPrices.get(stockName)); trade.setQuantity(quantity); order.addTrade(trade); }); Then(\u0026#34;^the order value should be (\\\\d+)\\\\$$\u0026#34;, (int expectedValue) -\u0026gt; { assertEquals(expectedValue, order.getValue()); }); } } ","date":"2023-10-22","permalink":"/devl/typing/002/","section":"Developer Course","summary":"과제하느라 찾을 시간이 없어서 오늘도 책 예제를 참조했다.","title":"Day 02"},{"content":" 코드 참조 : CleanCode 139p-140p\npublic class WikiPageResponder implements SecureRespinder { protected WikiPage page; protected PageData pageData; protected String pageTitle; protected Request request; protected PageCrawler crawler; public Response makeResponse(FitNesseContext context, Request request) throws Exception { String pageName = getPageNameOrDefault(request, \u0026#34;FrontPage\u0026#34;); loadPage(pageName, context); if (page == null) { return notFoundResponse(context, request); } else { return makePageResponse(context); } } private String getPageNameOrDefault(Request request, String defaultPageName) { String pageName = request.getResource(); if (StringUtil.isBlank(pageName)) pageName = defaultPageName; return pageName; } protected void loadPage(String resource, FitNesseContext context) throws Exception { WikiPagePath path = PathParser.parse(resource); crawler = context.root.getPageCrawler(); crawler.setDeadEndStrategy(new VirtualEnabledPageCrawler()); page = crawler.getPage(context.root, path); if (page != null) { pageData = page.getData(); } } private Response notFoundResponse(FitNesseContext context, Request request) throws Exception { return new NotFoundResponder().makeResponse(context, request); } private SimpleResponse makePageResponse(FitNesseContext context) throws Exception { pageTitle = PathParser.render(crawler.getFullPath(page)); String html = makeHtml(context); SimpleResponse response = new SimpleResponse(); response.setMaxAge(0); response.setContent(html); return response; } //이 부분은 빨간줄을 없애기 위해 임의로 만든 것. private String makeHtml(FitNesseContext context) { String string = \u0026#34;\u0026#34;; return string; } } 좋은 코드를 어디서 찾아야하나 고민을 했는데, 클린코드 책에 나와 있는 예문 중 좋다고 언급된 코드를 써봐야겠다고 생각했다. 그러나..\n제대로 입력됐는지 검증하려니 아래처럼 빨간줄 투성이였다.\n그래서 일단 처음이기도하고 감을 좀 잡아보려고 일단 클래스를 별도로 다 만들어봤다.\n단순 빨간 줄을 없애는 것이 목표였으므로 메서드 반환 타입만 맞게 구현했다.\n모든 빨간 줄 없애기 성공\n느낀 점은 앞으로는 가능하면 모든 클래스가 채워져 있는 코드를 찾아야 할 것 같다.\n결과값을 테스트 해볼 수 없어서 조금 아쉽다.\n","date":"2023-10-21","permalink":"/devl/typing/001/","section":"Developer Course","summary":"코드 참조 : CleanCode 139p-140p","title":"Day 01"},{"content":"","date":null,"permalink":"/categories/javascript/","section":"Categories","summary":"","title":"Javascript"},{"content":"","date":null,"permalink":"/devl/javascript/","section":"Developer Course","summary":"","title":"JavaScript"},{"content":" step2를 하게된 이유\n공휴일 넣어보고 싶은 욕심이 생김 함수를 더 쪼개야 할 것 같았다. 너무 길다. 함수 이름이 맘에 안들어서.. 공휴일 난제\n석가탄신일, 추석, 설날은 음력 기준이라 매년 휴일 날짜가 변동되는 점 검색하다가 음력을 양력으로 변환하는 js 코드를 구했다. 이것을 사용해 볼 것이다. 음력\u0026gt;양력으로 변환 js 코드 출처 대체공휴일 결국 이 부분은 못했다. 나중에 업그레이드하면 다시 포스팅. ","date":"2023-10-21","permalink":"/devl/javascript/010/","section":"Developer Course","summary":"step2를 하게된 이유","title":"달력 만들기 #2"},{"content":"기초맞나? 너무 어려워.\nputty # 오늘의 명령어 속성\nls -l : 길게 리스트를 불러오라는 의미\nnl == cat -b\ncat -n : 비어있는 라인도 행번호 모두 붙임\nvim 편집기 여러가지 종료 방법\nZZ :wq :x nano 편집기 ## nano 편집기 실행 j10@alinux:~/d3$ nano a2 편집이 필요할 경우 vi 또는 nano로 열면 됨 숨김파일 # 파일이름이 \u0026lsquo;.\u0026lsquo;으로 시작하면 숨김파일 이라는 의미 j10@alinux:~/d3$ vi ~/.bash_aliases # bash_aliases 파일은 앞에 \u0026#39;.\u0026#39; 붙어있으므로 숨김파일이다. 설정 저장 후 적용할 때 명령어 # ~/.bash_aliases 파일에서 alias rl='. ~/.profile'으로 단축명령어 지정해서 사용하면 됨. j10@alinux:~/d3$ . ~/.profile # 이 파일을 자동으로 불러오라는 의미 la 와 lA 속성의 차이 # 디렉토리 출력 유무 # -la 속성 사용 했을 때 j10@alinux:~/d3$ ls -la total 32 drwxrwxr-x 2 j10 j10 4096 10월 20 09:55 . drwxr-xr-x 14 j10 j10 20480 10월 20 09:58 .. -rw-rw-r-- 1 j10 j10 1622 10월 20 09:49 a1 -rw-rw-r-- 1 j10 j10 197 10월 20 09:53 a2 # -lA 속성 사용 했을 때 j10@alinux:~/d3$ ls -lA total 8 -rw-rw-r-- 1 j10 j10 1622 10월 20 09:49 a1 -rw-rw-r-- 1 j10 j10 197 10월 20 09:53 a2 프로그램 관련 명령어 # 설치할 수 있는 프로그램 파일 확인하기 #내 컴퓨터에 설치된 패키지 목록 j10@alinux:~/d3$ apt list | nl #라인 수만 알고 싶을 때 j10@alinux:~/d3$ apt list --installed | nl j10@alinux:~/d3$ apt list --installed | wc -l 프로그램이 설치 돼 있는지 확인 apt list --installed | grep 프로그램이름 # apache가 설치돼있는지 확인 j10@alinux:~/d3$ apt list --installed | grep apache # mysql이 설치돼있는지 확인 j10@alinux:~/d3$ apt list --installed | grep mysql # jdk가 설치돼있는지 확인 j10@alinux:~/d3$ apt list --installed | grep jdk 프로그램이 실행되고 있는지 여부 ps 명령어 사용 j10@alinux:~/d3$ ps PID TTY TIME CMD 1988 pts/23 00:00:00 vi 2217 pts/23 00:00:00 vi 2424 pts/23 00:00:00 vi 2431 pts/23 00:00:00 vi 5934 pts/23 00:00:00 ps 65516 pts/23 00:00:00 bash 리눅스와 윈도우의 프로그램 차이 프로그램을 설치하면 관리하는 레지스트리가 있음. 리눅스는 레지스트리라는 개념이 없음 리눅스에서 설치된 프로그램은 다른 프로그램에 영향을 주지 않음 | 파이프의 역할 #j10@alinux:~/d3$ ps -ef | nl nl 명령어뒤에는 반드시 인수가 와야하는데 ps -ef 를 nl 다음으로 보내겠다는 의미 따라 입력해보기 # 문장 -\u0026gt; 열 지정 후 단어를 끊어서 출력하기 paste 위에오는 -으로 열 갯수 조절. 속성 중 -k는 keyword의 약자 속성 중 -c는 command의 약자 j10@alinux:~/d3$ compgen -k | paste - - - - - if then else elif fi case esac for select while until do done in function time { } ! [[ ]] coproc j10@alinux:~/d3$ compgen -k | paste - - - - - - - if then else elif fi case esac for select while until do done in function time { } ! [[ ]] coproc j10@alinux:~/d3$ compgen -c | paste - - - - - - - | nl 내가 사용하는 쉘의 이름 j10@alinux:~/d3$ echo $SHELL /bin/bash # \u0026lt;\u0026lt; 이거임 bash 안에 있는 명령어들. 기본적으로 빌트인 돼 있는 명령어. ., .., [ 도 명령어 j10@alinux:~/d3$ compgen -b | paste - - - - - - - . : [ alias bg bind break builtin caller cd command compgen complete compopt continue declare dirs disown echo enable eval exec exit export false fc fg getopts hash help history jobs kill let local logout mapfile popd printf pushd pwd read readarray readonly return set shift shopt source suspend test times trap true type typeset ulimit umask unalias unset wait 실행 명령어들 보기 j10@alinux:~/d3$ ls /bin 행을 바꿔서 계속 명령문 이어나가기 문장의 끝에 \\를 주면 명령이 실행되지 않고 다음행에서 계속 입력할 수 있다. j10@alinux:~/d3$ cp /etc/passwd p\\ \u0026gt; ; 포트번호 확인 포트번호 확인 가능 (포트번호? 도로번호 같은 거라고 생각하면 됨.) j10@alinux:~/d3$ grep mysql s mysql 3306/tcp mysql 3306/udp mysql-proxy 6446/tcp # MySQL Proxy mysql-proxy 6446/udp 각 포트 번호 http https ftp smtp pop3 imap mysql 80 443 21 25 110 143 3306 라인수 단어수 문자수 출력 j10@alinux:~/d3$ wc s 591 2615 19183 s j10@alinux:~/d3$ wc s -l 591 s j10@alinux:~/d3$ wc s -w 2615 s j10@alinux:~/d3$ wc s -c 19183 s j10@alinux:~/d3$ who | wc -l 33 p파일에서 3번째 키워드를 기준으로 정렬해서 출력한다. j10@alinux:~$ sort -t : -k 3 -n p #파일유형/권한 참조 소유주 용량 -rw-r----- 1 syslog adm 12055 10월 15 06:25 syslog.6.gz -rw-r----- 1 syslog adm 11556 10월 14 06:25 syslog.7.gz -rw------- 1 root root 69312 10월 17 13:50 tallylog 용량 순으로 정렬 sort -k 5 : 키워드 순서로 봤을 때 용량은 5번째 키워드이다. j10@alinux:~$ ls -l /var/log | sort -k 5 -n j10@alinux:~/d3$ grep ftp s -n 27:ftp-data 20/tcp 28:ftp 21/tcp 50:tftp 69/udp 70:sftp 115/tcp 211:ftps-data 989/tcp # FTP over SSL (data) 212:ftps 990/tcp 291:venus-se 2431/udp # udp sftp side effect 295:codasrv-se 2433/udp # udp sftp side effect 302:gsiftp 2811/tcp 303:gsiftp 2811/udp 520:frox 2121/tcp # frox: caching ftp proxy 557:zope-ftp 8021/tcp # zope management by ftp j10@alinux:~/d3$ grep ftp s -c 12 c로 시작하는 파일 조회 ^d : d로 시작하는 것 (d: 디렉토리) $d : d로 끝나는 것 j10@alinux:/dev$ ls | grep \u0026#34;^c\u0026#34; char console core cpu_dma_latency cuse 출력 리다이렉션 # 표준 입력 장치\n입력 : 키보드 출력 : 모니터 redirection : 재지향 하겠다.\n\u0026gt; : 출력 리다이렉션\n# 출력재지향 cal \u0026gt; a3 date \u0026gt; a3 #기존 a3 값을 덮어씌움 # append cal \u0026gt; a3 date \u0026gt;\u0026gt; a3 # 기존 a3에 값을 이어 붙잌 A라는 문자가 나올 때 까지 입력을 받고 a6라는 이름으로 저장을 한다. j10@alinux:~/d3$ cat \u0026lt;\u0026lt; A \u0026gt; a6 \u0026gt; linux \u0026gt; java \u0026gt; oracle \u0026gt; A 문자열 길이 구하기 ## 방법1 j10@alinux:~/d3$ echo ${#s} 5 # 방법2 j10@alinux:~/d3$ echo `expr length $s` 5 연산 #j10@alinux:~/d3$ echo $[2+10] 12 j10@alinux:~/d3$ echo $[2*10] 20 j10@alinux:~/d3$ echo $[2/10] 0 조건에 맞는 값 찾기 # 확장자가 .c인 파일 찾기 j10@alinux:~/d3$ find / -name *.c 2\u0026gt; /dev/null | nl 용량이 30mb 이상 파일 찾기 j10@alinux:~/d3$ find /var -size +30M 2\u0026gt; /dev/null j10@alinux:~/d3$ find /var -size +30M -exec ls -Al {} \\; 2\u0026gt; /dev/null /var : var에서 찾아라 / : 전체 폴더에서 찾아라 ~/ : 내 홈디렉터리 내에서 찾아라 찾은 결과를 명령어 실행 -exec ls -Al를 {} 에 넣어라. 유니코드 출력하기 #echo -e \u0026#39;\\uac00\u0026#39; 우분투로 리눅스 실습 #1. oracle VitualBox 환경 설정 # 실제 리눅스 설치에느 79p같은 설정을 다 해놓고 시작해야함 1) 가상 머신 새로 만들기 # 클릭\n2) 설정 변경 # (광학드라이브 옆에) 동그라미 클릭 \u0026gt; 디스크파일 선택 \u0026gt; 우분투.iso 파일 선택\n네트워크 \u0026gt; 고급 \u0026gt; 포트포워딩 우측 버튼 눌러서 아래 3개 추가 (호스트포크, 게스트포트 모두 입력) 오디오 비활성화 3) 시작 버튼 누르기 # 엑세스 경고 창이 뜨면 액세스 허용 사용가능한 키 : 방향키 탭키 엔터 사용가능\n(언어) 영어 선택 \u0026gt; (업데이트) 디폴트 \u0026gt; (키보드) done \u0026gt; done\n네크워크 : done\u0026gt;(v록시 done \u0026gt;(미러) done\n파티션 나누기 \u0026gt; custom (스페이스바 \u0026gt; 엔터 ) \u0026gt;free space\u0026gt; add gpt파티션\nboot 파티션 swp 파티션\n용량을 적지 않으면 나머지 용량을 다 사용하겠다는 의미\n완료됐으면 done \u0026gt; continue\n순서대로 입력 : j / aiur / j / j / j\n우분투 \u0026gt; 스킵\n추가 설치 \u0026gt; 일단 안하고 done\n설치 중 화면\n설치 중 나오는 옵션 \u0026gt; cancle update reboot 선택 4) 설정 백업 (이미지 백업) # 원본 - 백업 (제일 중요 !) : 메뉴 - 가상 시스템 내보내기 (다음 \u0026gt; 다음 \u0026gt; 완료) 2. 우분투 연동용 putty 설정 추가 # 모든 컴퓨터는 자기자신 ip를 가리킬 때 : 127.0.0.1 기타 폰트 + bell 설정 후 저장.\n3. 우분투 실행 # 리눅스 프로그램을 실행하고 로그인하라고 나오면 putty에서 myLinux 열기. 설치되어있는 프로그램 목록 확인하기 #j@aiur:~$ apt list --installed | wc -l WARNING: apt does not have a stable CLI interface. Use with caution in scripts. 609 프로그램 설치 ##gcc 설치 j@aiur:~$ apt install gcc # 설치권한이 없다고 오류 발생 j@aiur:~$ sudo apt install gcc # 루트 권한으로 설치 명령 루트 권한으로 접속하기 #j@aiur:~$ sudo -i 호스트 네임 변경 ## 현재 호스트 네임 root@aiur:~# hostname aiur # 호스트 네임 변경 root@aiur:~# hostnamectl set-hostname air # 변경된 호스트 네임 root@aiur:~# hostname air 한국 표준 시간으로 출력 설정하기 #root@aiur:~$ date Fri Oct 20 03:40:57 AM UTC 2023 # 서울 기준으로 시간 정보 기본값 설정 root@aiur:~# timedatectl set-timezone Asia/Seoul 디스크 공간 사용량(df = dist free) 정보 보기 #root@aiur:~# df -h Filesystem Size Used Avail Use% Mounted on tmpfs 197M 1.1M 196M 1% /run /dev/sda4 15G 4.1G 9.9G 29% / #윈도우로 따지면 c드라이브 역할 tmpfs 982M 0 982M 0% /dev/shm tmpfs 5.0M 0 5.0M 0% /run/lock /dev/sda6 3.9G 24K 3.7G 1% /data /dev/sda2 974M 129M 778M 15% /boot /dev/sda5 2.9G 52K 2.8G 1% /home tmpfs 197M 4.0K 197M 1% /run/user/1000 하드디스크(파티션) 정보 #root@aiur:~# fdisk -l /dev/sda Disk /dev/sda: 25 GiB, 26843545600 bytes, 52428800 sectors Disk model: VBOX HARDDISK Units: sectors of 1 * 512 = 512 bytes Sector size (logical/physical): 512 bytes / 512 bytes I/O size (minimum/optimal): 512 bytes / 512 bytes Disklabel type: gpt Disk identifier: 7A8430DB-037D-4CEF-B7C0-A552D08CA9A3 Device Start End Sectors Size Type /dev/sda1 2048 4095 2048 1M BIOS boot /dev/sda2 4096 2101247 2097152 1G Linux filesystem /dev/sda3 2101248 6295551 4194304 2G Linux swap /dev/sda4 6295552 37752831 31457280 15G Linux filesystem /dev/sda5 37752832 44044287 6291456 3G Linux filesystem /dev/sda6 44044288 52426751 8382464 4G Linux filesystem 한글 설정하기 #root@aiur:~# ai language-pack-ko #만약 위 명령이 안 될 경우 직접 파일 열어서 수정 #파일 경로 \u0026gt; nl /etc/default/locale 1 LANG=en_US.UTF-8 #vi편집기에서 1 LANG=ko_KR.UTF-8 #입력 후 저장 특정 프로그램이 실행 중인지 확인 (프로세스 조회) #ps -ef | grep mysql root@aiur:~# pq mysql mysql 2233 1 0 14:58 ? 00:00:08 /usr/sbin/mysqld root 2634 2495 0 15:23 pts/1 00:00:00 grep --color=auto mysql #서비스 끄기 root@aiur:~# service mysql stop root@aiur:~# pq mysql root 2647 2495 0 15:25 pts/1 00:00:00 grep --color=auto mysql #서비스 시작 root@aiur:~# service mysql start 프로그램이 꺼져 있을 경우 에러메세지 ERROR 2002 (HY000): Can\u0026#39;t connect to local MySQL server through socket \u0026#39;/var/run/mysqld/mysqld.sock\u0026#39; (2) 또다른 프로그램 시작 방법 # 시작 systemctl start mysql # 재시작 systemctl restart mysql 또다른 프로그램 종료 방법 # killall 명령어 사용 전 root@aiur:~# pq mysql mysql 2903 1 21 15:30 ? 00:00:00 /usr/sbin/mysqld root 2952 2495 0 15:30 pts/1 00:00:00 grep --color=auto mysql root@aiur:~# killall mysqld # killall 명령 사용 후 root@aiur:~# pq mysql root 2956 2495 0 15:30 pts/1 00:00:00 grep --color=auto mysql PID UID i-node\n내 프로세스 번호 확인 ##내 프로세스 보기 root@aiur:~# echo $$ 2495 #자기자신 강퇴해보기 root@aiur:~# kill -9 2495 죽었음 프로세스 간 통신. #// kill -9 에서 이 9는 9) SIGKILL를 말하는 것. // 2번) SIGINT : 시그널 인터럽트 root@aiur:~# kill -l 1) SIGHUP 2) SIGINT 3) SIGQUIT 4) SIGILL 5) SIGTRAP 6) SIGABRT 7) SIGBUS 8) SIGFPE 9) SIGKILL 10) SIGUSR1 11) SIGSEGV 12) SIGUSR2 13) SIGPIPE 14) SIGALRM 15) SIGTERM 16) SIGSTKFLT 17) SIGCHLD 18) SIGCONT 19) SIGSTOP 20) SIGTSTP 21) SIGTTIN 22) SIGTTOU 23) SIGURG 24) SIGXCPU 25) SIGXFSZ 26) SIGVTALRM 27) SIGPROF 28) SIGWINCH 29) SIGIO 30) SIGPWR 31) SIGSYS 34) SIGRTMIN 35) SIGRTMIN+1 36) SIGRTMIN+2 37) SIGRTMIN+3 38) SIGRTMIN+4 39) SIGRTMIN+5 40) SIGRTMIN+6 41) SIGRTMIN+7 42) SIGRTMIN+8 43) SIGRTMIN+9 44) SIGRTMIN+10 45) SIGRTMIN+11 46) SIGRTMIN+12 47) SIGRTMIN+13 48) SIGRTMIN+14 49) SIGRTMIN+15 50) SIGRTMAX-14 51) SIGRTMAX-13 52) SIGRTMAX-12 53) SIGRTMAX-11 54) SIGRTMAX-10 55) SIGRTMAX-9 56) SIGRTMAX-8 57) SIGRTMAX-7 58) SIGRTMAX-6 59) SIGRTMAX-5 60) SIGRTMAX-4 61) SIGRTMAX-3 62) SIGRTMAX-2 63) SIGRTMAX-1 64) SIGRTMAX sleep # 리눅스에서 시간 단위 지정이 없을 경우 디폴트값은 \u0026lsquo;초단위\u0026rsquo; # 50초 동안 입력 중지 root@aiur:~# sleep 50 # sleep 중 탈출하기 ^C # 일시정지 root@aiur:~# sleep 50 ^Z //일시정지 [1]+ 멈춤 sleep 50 # 백그라운드 슬립 설정 : 계속해서 명령을 내릴 수 있다. root@aiur:~# sleep 100 \u0026amp; [1] 3005 # 백그라운드 슬립으로 전환하기 root@aiur:~# sleep 1000 ^Z [1]+ 멈춤 sleep 1000 root@aiur:~# bg #백그라운드로 보내겠다는 명령어 [1]+ sleep 1000 \u0026amp; Deamon : 백그라운드에서 돌아가는 서비스 작업 (백그라운드의 ↔️ 포그라운드) root@aiur:~# pq mysql mysql 3024 1 13 15:47 ? 00:00:00 /usr/sbin/mysqld # \u0026lt; mysqld 에서 \u0026#39;d\u0026#39;는 Deamon의 약자 톰캣 연동 (170~171p 교재)\n새 사용자 만들기 #\u0026gt; useradd -s /bin/bash -m -d /home/tom tom \u0026gt; passwd tom \u0026gt; ls /home/ \u0026gt; tail -3 /etc/passwd 프로그램 실행 중 확인 #root@aiur:/# service mysql statue Usage: /etc/init.d/mysql start|stop|restart|reload|force-reload|status root@aiur:/# service mysql status ● mysql.service - MySQL Community Server Loaded: loaded (/lib/systemd/system/mysql.service; enabled; vendor preset: enabled) Active: active (running) since Fri 2023-10-20 15:47:08 KST; 56min ago Main PID: 3024 (mysqld) Status: \u0026#34;Server is operational\u0026#34; Tasks: 37 (limit: 2220) Memory: 365.2M CPU: 25.574s CGroup: /system.slice/mysql.service └─3024 /usr/sbin/mysqld mysql 사용자 권한주기 #mysql\u0026gt; use mysql Reading table information for completion of table and column names You can turn off this feature to get a quicker startup with -A Database changed mysql\u0026gt; select user, host from user; +------------------+-----------+ | user | host | +------------------+-----------+ | debian-sys-maint | localhost | | mysql.infoschema | localhost | | mysql.session | localhost | | mysql.sys | localhost | | root | localhost | +------------------+-----------+ 5 rows in set (0.00 sec) mysql\u0026gt; alter user root@localhost identified with mysql_native_password by \u0026#39;jj\u0026#39;; Query OK, 0 rows affected (0.01 sec) mysql\u0026gt; create database tomDB; Query OK, 1 row affected (0.02 sec) mysql\u0026gt; create user mytom@localhost identified with mysql_native_password by \u0026#39;1\u0026#39;; Query OK, 0 rows affected (0.02 sec) mysql\u0026gt; grant all privileges on tomDB.* to mytom@localhost; Query OK, 0 rows affected (0.02 sec) mysql\u0026gt; flush privileges; Query OK, 0 rows affected (0.02 sec) -- 중요한 에러 mysql\u0026gt; exit Bye root@aiur:/# mysql ERROR 1045 (28000): Access denied for user \u0026#39;root\u0026#39;@\u0026#39;localhost\u0026#39; (using password: NO) 뭔가 안될 때 해결해 가는 과정 # 서비스르 재시작해본다. 포트 열렸는지 확인한다. (버츄얼박스) ai nmap nmap localhost 브라우저를 껐다 켜본다. 리눅스 접속을 다시 해본다. 재부팅 해본다. 이미지를 새로 가져온다. ","date":"2023-10-20","permalink":"/devl/linux/003/","section":"Developer Course","summary":"기초맞나? 너무 어려워.","title":"linux 기초 Day03"},{"content":"오늘의 명령어 속성 # du -sh : 컴퓨터 용량 확인 li -h : 용량 단위 변환해서 보기 오늘의 단축키 # esc+gg : 편집 모드 처음 행으로\nesc+G : 편집 모드 마지막 행으로\nesc + : + 숫자 + enter: 해당 행번호로 커서 이동\nesc + 숫지+G : 숫자 행번호로 커서 이동\nshift + pageUp : 지나간 화면 올리기\nshift + pageDown : 지나간 화면 올리기\nctrl + e : 화면올리기\nctrl + u : 현재 입력된 명령어 지우기\n커서 좌표 이동 esc 상태에서 할 것 . 숫자가 없을 경우 디폴트 숫자값 1\nj : 아래로 k : 위로 l : 오른쪽으로 h : 왼쪽으로 숫자 + j : 숫자만큼 아래로 숫자 + k : 숫자만큼 위로 숫자 + l : 슷자만큼 오른쪽으로 숫자 + h : 숫자만큼 왼쪽으로 숫자 + dd : 현재 위치에서 해당 숫자 행만큼 잘라내기\n숫자 + yy : 현재 위치에서복사하기 (yank : 홱 잡아당기다)\n숫자 + p : 붙여넣기 * 숫자(회)\nu : undo\nr : redo\n숫자 + dw : 숫자만큼 단어 갯수 -\u0026gt; 잘라내기\n숫자 + yw : 숫자만큼 단어 갯수 -\u0026gt; 복사하기\n숫자 + x : 숫자만큼 문자의 길이 잘라내기\ndelete키 : 해당 행만 한 문자씩 지워짐. 다음 행에 영향을 미치지 않음.\nx+p : 문자 앞뒤 바꾸기 (잘라내기 + 붙여넣기) * 붙여넣을 때\ndd+p : 행 위아래 바꾸기 (행 잘라내기 + 붙여넣기)\n~ : (shift 누른상태에서) 대소문자 바꾸기\nJ : (shift + j) 행 합치기.\ncc : 현재 행 내용 모두 지우기\n숫자 값에서 ctrl + a : 숫자++;\n숫자 값에서 ctrl + x : 숫자\u0026ndash;;\nb : 단어 단위. 이전으로 이동\nshift + 8 : 같은 단어로 이동 (해당 단어에 커서가 위치해야 함)\nshift + k : 도움말 불러오기 (해당 단어에 커서가 위치해야 함)\n자주나는 오류 # 한번 더 학습 #1) 디렉토리를 생설할 권한이 없다. (디렉토리 소유자나 그룹멤버가 아니다) mkdir: cannot create directory ‘/tt’: Permission denied #2) 파일이나 디렉토리가 없다. -bash: cd: /tt: No such file or directory #3) 정보를 보거나 수정할 권한이 없다. (실행 권한이 없음) passwd: You may not view or modify password information for j35. 아이피 #1. ipconfig 속성들 #//네트워크를 확인하는 명령어 \u0026gt; ipconfig /all \u0026gt; ipconfig /all \u0026gt; ipconfig ... 정보 표시 \u0026gt; ipconfig /all ... 자세한 정보 표시 \u0026gt; ipconfig /renew ... 모든 어댑터 갱신 \u0026gt; ipconfig /renew EL* ... EL로 시작되는 이름을 가진 모든 연결 갱신 \u0026gt; ipconfig /release *Con* ... 모든 일치하는 연결 해제 예: \u0026#34;Wired Ethernet Connection 1\u0026#34; or \u0026#34;Wired Ethernet Connection 2\u0026#34; \u0026gt; ipconfig /allcompartments ... 모든 컴파트먼트에 대한 정보 표시 \u0026gt; ipconfig /allcompartments /all ... 모든 컴파트먼트에 대한 자세한 정보 표시 2. ip 정보 얻기 #이더넷 어댑터 이더넷: 연결별 DNS 접미사. . . . : 링크-로컬 IPv6 주소 . . . . : fe80::16:d903:304d:22b%37 IPv4 주소 . . . . . . . . . : 192.168.56.1 서브넷 마스크 . . . . . . . : 255.255.255.0 기본 게이트웨이 . . . . . . : 무선 LAN 어댑터 로컬 영역 연결* 1: 미디어 상태 . . . . . . . . : 미디어 연결 끊김 연결별 DNS 접미사. . . . : 무선 LAN 어댑터 로컬 영역 연결* 10: 미디어 상태 . . . . . . . . : 미디어 연결 끊김 연결별 DNS 접미사. . . . : 무선 LAN 어댑터 Wi-Fi: 연결별 DNS 접미사. . . . : 링크-로컬 IPv6 주소 . . . . : fe80::32fa:bc4c:eeac:dd48%9 IPv4 주소 . . . . . . . . . : 192.168.0.47 서브넷 마스크 . . . . . . . : 255.255.255.0 기본 게이트웨이 . . . . . . : 192.168.0.1 이더넷 어댑터 Bluetooth 네트워크 연결: 미디어 상태 . . . . . . . . : 미디어 연결 끊김 연결별 DNS 접미사. . . . : 아래 네가지는 알아둘 것\nIPv4 주소 (내 ip): 192.168.0.47 게이트웨이 : 192.168.0.1 DNS서버 : 168.126.63.1 서브넷 마스크 : 255.255.255.0 그 외 설명 물리적 주소 : 컴퓨터 네트워크 하드웨어 장치를 구별하는 주소. 게이트웨이 (관문) : 공유기 ip, 외부로 나갈 때 필요함 서브넷 마스크 : ip주소에 대한 네트워크 아이디와 호스트 아이디를 구분하기 위해서 사용됨. 날짜 출력하기 #//날짜 출력 (출력 포맷 지정) $date + %y%m%d //몇일째인지 $date + %j //날짜 관련 도움말 $date --help //원하는 연도 + 달 출력 $cal 12 2024 vim에서 명령어 # vi 편집 모드 진입 $vi 파일명 vim 편집 모드 # esc + : + q! : 저장하지 않고 종료\ni or a or o누르면 입력됨 (대소문자 안가림)\ni: 삽입 선택한 커서 앞에 내용 입려됨\nI: 커서가 있는 행 맨 앞에 내용 입력\na: 추가 선택한 커서 뒤에 내용 입력됨\nA: 추가 선택한 커서 맨 뒤 내용 입력됨\no: 새로운 행을 아래에 생성 후 내용 입력됨\nO: 새로운 행을 위에 생성 후 내용 입력됨\nesc + : + w + enter: 저장\nesc + : + wq + enter: 저장 후 종료\n:이 들어가면 명령어 마지막에 엔터 쳐야함\n:% s/bin/777g :\n:1, 20 s/bin/777 : 1부터 20라인까지 bin을 찾아서 777로 바꿔라\n:40,$ s/bin/777/g : 40라인부터 끝까지 bin을 찾아서 777로 바꾸고 행이동.\ns = subsittute cat = concatenate (catenate) :set nonumber (=se nonu) : 행에 넘버 붙이기\n:set number (=se nu) : 행에 넘버 숨기기\n:set all :\n:10 r! ! cal\n:w 파일이름 (다른 이름으로 저장)\n:1, 20 w 파일이름 (1부터 20라인 까지 다른이름으로 저정)\n:! : vim 편집기에서 잠깐 빠져나감\n실행 중인 상태로 잠깐 나가고 다시 문서편집으로 복귀\n(편집창에서) \u0026gt;ctrl + z : 메인화면으로 나가짐 (메인창에서) \u0026gt; fg : 현재 작업 중인 문서 열기 ctrl + c : vim 편집모드에서 비주얼 모드 진입\n/문자 or ?문자 문자 검색 + n 찾은 검색어 이동\nvim 비주얼 모드 # :vs kk : 수직 창 추가 생석\n:sp kk3 : 수평 창 추가 생성\nctrl + ww : 창 간 이동\n:q! : 여러창이 켜진 상태에서 하나씩 창이 닫힘\nvimtuter : vim 학습 가이드 # 메인 창에서 학습 가이드 열어서 시키는 대로 하기 (25분-30분 소요) vim 기본 설정 파일 (저장해 둘 것) #se nu ai ci si ts=4 sw=4 se ruler title showmatch syntax on hi comment ctermfg=red 매크로 등록 ##1. 선언 \u0026gt; ab K korea #2. 사용 \u0026gt; K #space바 누르면 \u0026#39;korea\u0026#39;출력됨 :!bash 이 상태에서 \u0026rsquo;exit\u0026rsquo; 원래창으로 돌아옴 + press 나오면 엔터\n:se mouse=a : 마우스 강체 호출\n:se mouse=r : 마우스 숨기기\n리눅스의 발전 # ed -\u0026gt; ex -\u0026gt; vi -\u0026gt; vim\n처음에는 화면에 한 줄씩 출력됨 vi부터 화면에 여러줄 출력 가능 해짐. 커널? 단단한 알맹이\n쉘? 조개 껍데기\n커널을 단단히 감싸고 있는 것이 쉘\n멀티 유저시스템이기때문에 home의 개념이 중요함. 내집이 아는 곳에 파일을 못만들지만 tmp에만 가능 시스템을 전체 관리하는 것을 root 우리는 일반사용자 스레드보다 프로세스가 더 큰 개념 : 스레드가 일꾼이면 프로세스가 공장 etc/shells 목록 (+넘버링) #$ nl /etc/shells 1 # /etc/shells: valid login shells 2 /bin/sh 3 /bin/bash 4 /bin/rbash 5 /bin/dash 6 /usr/bin/tmux 7 /usr/bin/screen ps : 프로세스 확인하기 #$ ps PID TTY TIME CMD 16649 pts/5 00:00:00 bash 18559 pts/5 00:00:00 vi 19171 pts/5 00:00:00 vi 19179 pts/5 00:00:00 vi 19197 pts/5 00:00:00 vi 28107 pts/5 00:00:00 ps 트리 형태로 보기 # bash 는 트리를 내려가는 개념. 이 상태에서 exit를 하면 내려간 bash 횟수만큼 exit를 입력해야 최종 로그아웃이 된다. $ pstree systemd─┬─accounts-daemon───2*[{accounts-daemon}] ├─2*[agetty] ├─apache2───5*[apache2] ├─atd ├─chronyd ├─cron ├─dbus-daemon ├─dhclient ├─inetd ├─irqbalance───{irqbalance} ├─java───35*[{java}] ├─lvmetad ├─lxcfs───9*[{lxcfs}] ├─mysqld───34*[{mysqld}] ├─networkd-dispat───{networkd-dispat} ├─noms_nsight───noms_nsight───8*[{noms_nsight}] ├─polkitd───2*[{polkitd}] ├─rsyslogd───3*[{rsyslogd}] ├─sendmail-mta ├─sshd─┬─sshd───bash │ ├─20*[sshd───sshd───bash] │ ├─8*[sshd───sshd───bash───vi] │ ├─sshd───sshd───bash───2*[vi] │ ├─sshd───sshd───bash───man───pager │ ├─sshd───sshd───bash───3*[vi] │ ├─sshd───sshd───bash───bash │ ├─2*[sshd───sshd───bash───6*[vi] │ └─sshd───sshd───bash─┬─pstree #여기! │ └─4*[vi] ├─30*[systemd───(sd-pam)] ├─systemd-journal ├─systemd-logind ├─systemd-network ├─systemd-resolve ├─systemd-udevd ├─unattended-upgr───{unattended-upgr} └─xe-daemon─┬─2*[logger] └─8*[{xe-daemon}] 변수, 함수 선언 및 사용 #변수 선언 및 사용 #$ NUM=100 $ DAN=200 $ town=\u0026#39;역삼동\u0026#39; $ BUS=2340 $ echo $BUS $NUM $DAN $town 2340 100 200 역삼동 $ echo $BUS_타고다닌다 타고다닌다 $ echo ${BUS}_타고다닌다 2340_타고다닌다 $ echo $BUS 타고다닌다 2340 타고다닌다 export를 사용하면 전역 변수처럼 사용가능 #$ export NUM $ export k=900 $ k2=700 $ bash $ echo $k2 $ echo $k 900 함수 선언 및 사용 #1 ##1.선언 $ hello() \u0026gt; { \u0026gt; echo \u0026#34;안녕하세요.이소연입니다.\u0026#34; \u0026gt; } #2.사용 $ hello 안녕하세요.이소연입니다. PS1=’[\\! \\u]\\\\$ ‘ PS1=’[\\! \\t]\\\\$ ‘ PS1=’[\\d \\t]\\\\$ ‘ cd /usr/local PS1=’[\\d \\t \\w]\\\\$ ‘ PS1=’[\\t 편안합니다 \\w]\\\\$ ‘ PS1=’[\\t 편안합니다 \\w]\\n\\$ ‘ 변수 값 변경하기 #$ PS2=\u0026#39; -\u0026gt; 선생님 잘 못되었습니다. 수정해주세요\u0026#39; $ echo $PS2 -\u0026gt; 선생님 잘 못되었습니다. 수정해주세요 alias \u0026gt; 저장된 목록 다 나옴\nls /etc 17 \\ls /etc alise : 기능을 끈 것\n\\ls /etc \u0026ndash;color=auto : 기능을 수동 설정 (리눅스에는 컬러가 없다고 함)\n#!bin/bath 뜻 : 이 파일은 #!bin/bath파일로 해석하시오. read 사용 # read를 선언하면 다음 창에 값을 입력하도록 나온다. 자유롭게 입력한 다음 불러올 때는 $REPLY로 사용 $ read 100 $ echo $REPLY 100 read 사용 + 변수 지정 # k에 입력한 내용을 저장한다. $ read k 400 $ echo $k 400 # 1) k.sh 파일 생성 $ touch k.sh # 2) k.sh 편집 모드 전환 $ vi k.sh #3) k.sh 파일을 bash로 읽기 $ bash k.sh # 4) 그냥 ./k.sh 입력해보기 (오류 : bash: ./k.sh: Permission denied) $ ./k.sh # 5) k.sh 파일의 권한 변경 $ chmod 755 k.sh # 6) 이제 바로 입력해도 실행 가능 $ ./k.sh aa.sh 바로 실행하게 설정하기 (+ 경로 설정) ## 1) 실행해보기 (오류남) $ aa.sh aa.sh: command not found # 2) 목록 출력 (파일은 정상적으로 있다.) $ ls a.c aa.cpp aa.sh gugudan.class gugudan.java j.class j.java k.sh k.sj services t2 t3 # 3) 현재 경로를 주고 실행해보기 (역시 오류남) $ ./aa.sh -bash: ./aa.sh: Permission denied # 4) 파일 목록 열어 권한 확인하기 (aa.sh는 \u0026#39;-rw-rw-r--\u0026#39; 즉 읽기만 가능하다.) $ ls -l total 60 -rw-rw-r-- 1 j10 j10 85 10월 19 14:10 a.c -rw-rw-r-- 1 j10 j10 103 10월 19 14:11 aa.cpp -rw-rw-r-- 1 j10 j10 27 10월 19 15:46 aa.sh ... # 5) 권한 변경해주기 (aa.sh의 권한이 변경된 것을 확인 할 수 있다.) $ chmod +x aa.sh $ ls -l total 60 -rw-rw-r-- 1 j10 j10 85 10월 19 14:10 a.c -rw-rw-r-- 1 j10 j10 103 10월 19 14:11 aa.cpp -rwxrwxr-x 1 j10 j10 27 10월 19 15:46 aa.sh ... # 6) 현재 경로 보기 $ echo $PATH /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin # 7) 현재 경로로 설치하기 $ PATH=$PATH:. # 8) 이제 파일명만으로 실행 됨. $ aa.sh 타입 확인 #$ type . . is a shell builtin $ type bash bash is /bin/bash $ type ls ls is aliased to `ls --color=auto\u0026#39; # 로그인을 하면 읽어감. $cat ~/.profile (참고) 내부 파일 함수는 이렇게 생김. # if running bash if [ -n \u0026#34;$BASH_VERSION\u0026#34; ]; then # include .bashrc if it exists if [ -f \u0026#34;$HOME/.bashrc\u0026#34; ]; then // . \u0026#34;$HOME/.bashrc\u0026#34; //처음 \u0026#39;.\u0026#39;은 명령어 == import fi fi 파일 타입 확인 1 ## 1) 확장자 .exe 파일 확인 $ file a a: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=5e3998742bc7feb2f2fc5640fb18df123259d4ec, not stripped # 2) 확장자 .java 파일 확인 $ file j.java j.java: C source, UTF-8 Unicode text # 3) 확장자 .class 파일 확인 $ file j.class j.class: compiled Java class data, version 55.0 # 4) 확장자 /etc 디렉토리(파일) 확인 ; 디렉토리도 파일이다. $ file /etc /etc: directory lrwxrwxrwx 1 root root 39 9월 28 2020 resolv.conf -\u0026gt; ../run/systemd/resolve/stub-resolv.conf drwxr-xr-x 3 root root 4096 9월 16 20:48 resolvconf/ -rwxr-xr-x 1 root root 268 7월 21 2017 rmt* 위 출력에서 첫번째 열은 파일 타입 + 권한을 나타냄 첫번째 글자 d : 디렉토리 c : 캐릭터 p : 파이프 b : 블럭 l : 심볼릭링크 (아이콘의 바로가기 같은 기능) s : 소켓 (mysql과 관련된 파일) - : 파일 권한 r : 읽기 w : 쓰기 x : 실행 ll -dev dev : 디바이스의 약자\n표준 입력 장치 : 키보드\n표준 출력 장치 : 모니터\n표준 입출력을제외한 모든 다른 것들은 스트림을 연결해야한다. 그 다음에 통신이고 뭐고 해야함\n# 0,1,2 파일 디스크럽터 0,1,2를 만나게 됨 lrwxrwxrwx 1 root root 15 9월 13 18:04 stderr -\u0026gt; /proc/self/fd/2 lrwxrwxrwx 1 root root 15 9월 13 18:04 stdin -\u0026gt; /proc/self/fd/0 lrwxrwxrwx 1 root root 15 9월 13 18:04 stdout -\u0026gt; /proc/self/fd/1 파일 타입 확인 2 #brw-rw---- 1 root disk 202, 1 9월 13 18:04 xvda1 crw-rw-rw- 1 root root 1, 5 9월 13 18:04 zero $ file /dev/zero /dev/zero: character special (1/5) $ file /dev/xvda /dev/xvda: block special (202/0) $ ll /dev/zero crw-rw-rw- 1 root root 1, 5 9월 13 18:04 /dev/zero 파일 타입 c와 b # c : character special\n바로바로 출력하는 방식. ex) 키보드 입력 타이핑. (하나하나 출력) b : block special\n모아서 처리 하는 방식. 버퍼링이 가능. ex) HDD저장 (내용을 모아서 저장) 타입별로 리스트 조회 # 타입이 p로 시작하는 리스트 (+ 에러메세지 제거) $ find / -type p -exec ls -Al {} \\; 2\u0026gt;/dev/null prw------- 1 root root 0 10월 19 09:24 /run/systemd/sessions/5648.ref 타입이 s로 시작하는 리스트 (+ 에러메세지 제거) $ find / -type s -exec ls -Al {} \\; 2\u0026gt;/dev/null 파이프 #파이프 파일 위치 #$ file /run/systemd/initctl/fifo 파이프 파일 생성 #mkfifo f200 lrwxrwxrwx 1 root root 9 9월 28 2020 lock -\u0026gt; /run/lock/ $ file /var/lock /var/lock: symbolic link to /run/lock t 파일명만 입력해도 출력되도록 설정 # 순서대로 따라해보기 $ gcc t.c $ ls a.out t.c $ a.out C언어 짱... $ ./a.out C언어 짱... $ PATH=$PATH:. $ a.out C언어 짱... $ file t.c t.c: C source, UTF-8 Unicode text $ file a.out a.out: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=bc3fc853d2d5f17c78e80c2c49a483e4c6377f62, not stripped $ gcc t.c -o t $ ls a.out t t.c $ t C언어 짱... # 앞에 숫자는 C언어 주소값. # 3번째 숫자 1 하드 링크 수 # 텍스트 파일은 작고 실행 파일은 용량 큼. 2623670 -rwxrwxr-x 1 j10 j10 8296 10월 19 16:52 a.out 2624436 -rwxrwxr-x 1 j10 j10 8296 10월 19 16:55 t 2621630 -rw-r--r-- 1 j10 j10 77 10월 19 16:52 t.c 하드링크 # 용량이 늘어나지 않음 참조 수는 같은 주소값을 쓰는 파일의 갯수만큼으로 늘어남 첫 파일을 지워도 복사본은 실행됨. 컴퓨터 입장에서는 원본을 구분하지 않음 =\u0026gt; 이런 기능을 \u0026lsquo;하드 링크\u0026rsquo; 라고 함. 하드링크 파일 복사 및 원본파일 삭제해보기 ## 1) 원본 t를 lt라는 파일명으로 복사 $ ln t lt $ li total 52 2624436 -rwxrwxr-x 2 j10 j10 8296 10월 19 16:55 lt 2624436 -rwxrwxr-x 2 j10 j10 8296 10월 19 16:55 t $ t C언어 짱... $ lt C언어 짱... # 2) 원본 t를 삭제 $ rm t # 3) 복사본 lt 실행 $ lt C언어 짱... # 정상적으로 실행됨 심볼릭링크 # 윈도우의 바로가기 같은 기능 (윈도우 바로가가 파일은 보통 4바이트) 심볼링 링크 파일 생성 방법은 하드링크와 동일하나 속성에 -s 를 추가로 넣어주면 됨 파일 심볼릭링크 생성 #$ ln -s t st1 $ li total 52 2623670 -rwxrwxr-x 1 j10 j10 8296 10월 19 16:52 a.out 2624436 -rwxrwxr-x 2 j10 j10 8296 10월 19 16:55 lt 2624436 -rwxrwxr-x 2 j10 j10 8296 10월 19 16:55 lt2 2624549 lrwxrwxrwx 1 j10 j10 1 10월 19 17:02 st1 -\u0026gt; t #심볼릭링크 파일 2621630 -rw-r--r-- 1 j10 j10 77 10월 19 16:52 t.c 2624518 -rwxrwxr-x 1 j10 j10 8296 10월 19 16:57 t2 디렉토리 심볼릭 링크 생성 #$ ln -s /etc 33 $ li total 64 2624609 lrwxrwxrwx 1 j10 j10 4 10월 19 17:15 33 -\u0026gt; /etc 루트 권한에 저장한 설정을 j계정으로 복사해오기 #$ cp .bash_aliases ~j $ cd ~j $ chown j:j .bash_aliases $ chown j:j .vimrc # ~/.profile =\u0026gt; ~./bashrc =\u0026gt; ~/.bash_aliases ","date":"2023-10-19","permalink":"/devl/linux/002/","section":"Developer Course","summary":"오늘의 명령어 속성 # du -sh : 컴퓨터 용량 확인 li -h : 용량 단위 변환해서 보기 오늘의 단축키 # esc+gg : 편집 모드 처음 행으로","title":"linux 기초 Day02"},{"content":"putty.exe 설치 # https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html 64-bit86L putty.exe 다운 (사진에서 첫번째)\nputty.exe 실행 이거 뜨면 정상\n폰트 변경 오른쪽 클릭 \u0026gt; 체인지 세팅 \u0026gt; appearance \u0026gt; font d2 코딩으로 변경\n경고 소리 끄기 bell - none\n현재 설정 저장 세션 - 현재 만든 세션 선택 저장.\n명령어 # hostname : 컴퓨터 이름 호출\nwho -q : 접속된 아이디들만\nwho am i : 내가 누구인지\nwhoami : 내 id\nw 전체 로그인\necho \u0026ldquo;텍스트\u0026rdquo; : 텍스트 내용을 화면에 출력\n# who의 내용을 을 정렬 $ who | sort : 정렬 # who의 내용을 을 정렬 + 각 행마다 번호붙이기 $ who | sort | n 메일 보내기 # mail : 현재 받은 메일 확인 mail 상대방ID : 상대방ID로 메일 보내기 mail 이메일주소 : 이메일주소로 메일보내기 $ who | sort | nl | mail -s \u0026#34;who\u0026#34; ssomal_@naver.com who를 실행 후 정렬한 내용을 내 메일로 보내기 $ echo \u0026#34;오늘은 수요일\u0026#34; | mail -s \u0026#34;메일제목입니다\u0026#34; ssomal_@naver.com -s : subject mysql\u0026gt; use itDB; Database changed mysql\u0026gt; show tables; Empty set (0.00 sec) mysql\u0026gt; create table ta10( -\u0026gt; name char(20), -\u0026gt; age int); Query OK, 0 rows affected (0.01 sec) mysql\u0026gt; desc ta10; +-------+----------+------+-----+---------+-------+ | Field | Type | Null | Key | Default | Extra | +-------+----------+------+-----+---------+-------+ | name | char(20) | YES | | NULL | | | age | int(11) | YES | | NULL | | +-------+----------+------+-----+---------+-------+ 2 rows in set (0.00 sec) mysql\u0026gt; uptime j10@alinux:~$ cd j10@alinux:~$ pwd /home/j10 j10@alinux:~$ ls mbox public_html j10@alinux:~$ cat \u0026gt; public_html/index.html 이소연 j10@alinux:~$ nl public_html/index.html 1 이소연 cat \u0026gt; public_html/index.html : index.html 파일 생성\nnl public_html/index.html : 파일 읽기\n네이버 각\n우리가 지금 쓰고 있는 아이디, 테이블은 네이버 \u0026lsquo;각\u0026rsquo;에 있을 수있다 전쟁에 대비해 지하에 설치 돼 있음 localhost : 리눅스의 세계로 펼쳐짐. 찾아보자..\nlocalhost/~아이디\nlocalhost/~j10 : 내가 만든 index.html이 보임\n이 때 현재위치가 상위 디렉토리에 있어도 index.html을 찾아서 실행함.\nsqlite3 실행\nsqlite\u0026gt; .open myEB sqlite\u0026gt; .table sqlite\u0026gt; create table Man( ...\u0026gt; name char(20), ...\u0026gt; age int); sqlite\u0026gt; insert into Man values(\u0026#34;이소연\u0026#34;,20); sqlite\u0026gt; insert into Man values(\u0026#34;아이어\u0026#34;,33); sqlite\u0026gt; selet * from Man; Error: near \u0026#34;selet\u0026#34;: syntax error sqlite\u0026gt; select * from Man; 이소연|20 sqlite\u0026gt; .mo col sqlite\u0026gt; .hea on sqlite\u0026gt; select * from Man; sqlite\u0026gt;.import y3 Man sqlite\u0026gt; select * from Man; name age ---------- ---------- 이소연 20 이소연 44 나라미 22 쿠쿠로 24 #병합됨 sqlite 다운\nhttps://sqlite.org/index.html \u0026gt; download 클릭 소스코드 : Source Code\u0026gt; sqlite-amalgamation-3430200.zip 다운 프로그램 : Precompiled Binaries for Windows \u0026gt; sqlite-tools-win32-x86-3430200.zip 툴즈 : 설치 안해도 됨.\nsqlite3.exe 실행\n방금 전에 한거랑 똑같음. sqlite 작업을 빠르게 할 때 이 툴을 사용\n소스코드\nDNS 서비스 #ip주소를 도메일으로 바꿔서 접속 할 수 있도록 해주는 서비스\nC:\\Users\\wxy89\u0026gt;nslookup 기본 서버: kns.kornet.net Address: 168.126.63.1 # naver.com 서버: kns.kornet.net Address: 168.126.63.1 #나한테 응답한 ip 권한 없는 응답: 이름: naver.com Addresses: 223.130.200.107 #여기서부터 아래 4개를 주소창에 넣으면 네이버가 나옴 223.130.200.104 223.130.195.95 223.130.195.200 웹서비스 # DB넣고 뺄 수 있어야함\n게시판에 글을 쓰면 Db에 저장돼야함. -\u0026gt; 웹서비스가 돌아가고 있음\n웹서버 / 메일서버(도멘인이 있어야함) / 데이터 베이스 서버\n주요 오류 # 권한이 없음\nOnly root may add a user or group to the system. cannot create directory ‘/aa’: Permission denied 파일이 없을 때\n-bash: cd: /bb: No such file or directory :\n명령어가 없다.\ncommand not found\n리눅스 용어 의미 # ~: tilde, Home (집이라는 뜻)\n~K : k네 집\ncd ~아이디 : 접근은 가능/ 생성은 안됨.\ncd ~ : 내 집으로 돌아옴\nmkdir dd : dd라틑 디렉토리 생성\necho $HOME\n변수 선언 : a=50 b=3.5 c='corea'\n변수를 쓸때는 $ 사용\necho $a $b $c $ echo $LOGNAME\nid 출력됨 (j10)\n$ echo $SHELL\n네이버의 메일 용량\n~ssomal_ (내 계정의 집) 의 네이버의 하드디스크를 5G를 사용가능하다는 의미 \u0026gt; 네이버 각(데이터 센터) 어딘가 있음. quata : 50000 == 500mb\ndu -sh ~\n내가 사용중인 용량 용량이 꽉차면 더이상 파일 및 디렉토리가 만들어지지 않음 j10@alinux:~$ fallocate -l 500M k8 fallocate: fallocate failed: Disk quota exceeded j10@alinux:~$ mkdir bbbb mkdir: cannot create directory ‘bbbb’: Disk quota exceeded j10@alinux:~$ rm -rf bbbb j10@alinux:~$ rmf - f k7 Command \u0026#39;rmf\u0026#39; not found, but can be installed with: apt install mailutils-mh apt install mmh apt install nmh Ask your administrator to install one of them. j10@alinux:~$ rm -f k7 j10@alinux:~$ rm -f k8 j10@alinux:~$ du -sh ~ 단축키 만들기 #alias h=\u0026#39;history\u0026#39; alias c=\u0026#39;clear\u0026#39; 폴더보다 파일이 더 크다 디렉토리도 파일의 한 종류 운영체제 # 리눅스는 네트워크 서비스를 써야함.\n윈도우로 할 수는잇지만 제약사항이 많음\nNOS(네트워크용) : 유닉스, 리눅스, 윈도우 서버\nshell 명령어 해석기 (마우스?)\napplication : 응용프로그램\n펌웨어 : 프로그램을 만들어서 기기에 넣어버림. 구워버림. 뜯지도 고지치지도 못함 수정불가. 고정된 프로그램. 읽기만 가능 이런 문제를 해결하려면 OS(운영체제)가 필요함 = 컴퓨터 (삭제 업데이트 등 수정이 가능한 프로그램)\n리눅스가 천하통일. 슈퍼컴퓨터는 병렬로 연결.\n챗지피티 만오천대의 컴퓨터. 머니게임 수준. 네이버는 깜냥이 안됨.\n라이센스를 잘 확인해야함.\n참과 거짓 # 참/거짓 : 0이 거짓, 1이 참\n정상/비정상 : 0이 정상, 1이 비정상\n' : 싱글 쿼트(홑따옴표)\n\u0026quot; : 더블 쿼트(겹따옴표)\n[`]: back quote, back tick\n기본 명령어들 ## 오늘 날짜 정보 j10@alinux:~$ date 2023. 10. 18. (수) 15:28:57 KST # 변수 설정 j10@alinux:~$ k1=\u0026#39;date\u0026#39; j10@alinux:~$ echo $k1 date # 문자 그대로가 변수에 저장됨. # 변수 설정 j10@alinux:~$ k1=`date` j10@alinux:~$ echo $k1 2023. 10. 18. (수) 15:29:14 KST #사이즈가 0 인 빈파일을 만들 때 touch 사용. $ touch 파일명 # 현재 위치에 s4 이름으로 복사 $ cp /etc/services ./s4 #현재 위치에서 d5 디렉터리 아래로 이동, 디렉토리가 아닌 파일이면 이름을 바꿈 $ cp /etc/services ./d5 # 이름바꾸기 - A에서 B로 이름 변경 $ mv A B # lsy10 의 파일을 현재 내 디렉터리로 옮기면서 kk400으로 이름을 바꾼다. $ mv /tmp/lsy10 ./kk400 # 확장자가 .conf인 파일들만 복사해오기. $ cp /etc/*.conf . 2\u0026gt;/dev/null # 전체 확장자 바꿀 때 .conf-\u0026gt; .KING $ rename s/.conf/.KING/ *.conf # `-r` 디렉터리까지 복사 $ cp -r /etc/s* . 2\u0026gt;/dev/null # `-r` 디렉터리까지 삭제 $ rm -rf s* 단축키 # ctrl + A : 문단 처음으로 컿서 이동 ctrl + E : 문장 끝으로 커서 이동 ctrl + W : 단어별로 ctrl + n , 컨 + p esc + . === alt+. !! : 이전명령어 기타 #$ ls -alRSt # 일시 중지 : ctrl +S # 다시 실행 : ctrl+q # 종료 : ctrl+d ","date":"2023-10-18","permalink":"/devl/linux/001/","section":"Developer Course","summary":"putty.exe 설치 # https://www.","title":"linux 기초 Day01"},{"content":"파일 업로드 # http://www.servlets.com/cos/ 에서 cos~ 에 관한 파일을 다운받은 후 압축을 풀고 cos.jar 파일을 WEB-INF 의 lib 폴더에 넣는다\n폼을 만드는데 반드시 폼 타입을 반드시 method=\u0026quot;post\u0026quot; enctype=\u0026quot;multipart/form-data\u0026quot; 로 줘야한다.\n파일이 저장되는 실제 경로 구하기\nServletContext context=getServletContext();` realfolder=context.getRealPath(savefolder); MultipartRequest 라는 클래스를 사용 생성자 (request,fileDirectory(업로드할 경로),1024*5(업로드할 파일의 크기), \u0026ldquo;euc-kr\u0026rdquo;(한글타입) , new DefaultFileRenamePolicy() \u0026lt;-같은이름이 있을경우 다른이름으로 저장 )\n메소드\ngetParameterNames() : input 타입의 name들을 반환 (반환값:Enumeration)\ngetParameter(\u0026ldquo;name\u0026rdquo;) : name 에 해당하는 value 값 반환\ngetFileNames() : input 타입에서 속성이 file 로 된 이름들을 반환(반환값:Enumeration)\ngetFilesystemName(name) : 실제 업로드된 파일명(동일한이름일경우 변경된 이름반환)\ngetOriginalFileName(name) : 변경되기 전의 원래 파일명\ngetFile(name) : File 타입 리턴(파일 크기등을 알아볼수 있다)\n[출처] file upload (이문희의 프로그래밍수업) | 작성자 문희\n파일1 :\n파일2 :\n페이징처리 : 한페이지에 조금씩 보이는거\n","date":"2023-10-17","permalink":"/devl/javascript/009/","section":"Developer Course","summary":"파일 업로드 # http://www.","title":"파일 업로드"},{"content":"","date":null,"permalink":"/categories/jsp/","section":"Categories","summary":"","title":"Jsp"},{"content":"jsp에서 페이지 이동하는 방법\nforword : url주소 안바뀜, request, response 등이 그대로 전달됨 redirect : url 주소 바뀜 request, reponse 등이 새로 생성되므로 전달 안됨 forword #file1 : forword1.jsp\nfile1 : forword2.jsp\nforword2.jsp로 페이지 이동을 위한 설정 //forword1.jsp 파일에 작성 \u0026lt;jsp:forward page=\u0026#34;forword2.jsp\u0026#34;/\u0026gt; forword1.jsp을 띄우면 주소는 그대로 페이지는 forword2.jsp의 페이지가 보여짐. 데이터 전달 : request # 모든 Object 전달 가능 (String, List \u0026hellip;)\nforword2.jsp 보낼 데이터 저장하기 : request.setAttribute()\n\u0026lt;% //request에 데이터를 저장하기 String msg = \u0026#34;apple\u0026#34;; request.setAttribute(\u0026#34;msg\u0026#34;,msg); //첫번째 내가 설정할 이름, 두번째 요소 변수명 %\u0026gt; forword1.jsp에서 데이터 가져오기 : request.getAttribute() //1. 값 가져오기. 반드시 형변환을 해줘야 함 \u0026lt;% String msg = (String) request.getAttribute(\u0026#34;msg\u0026#34;); %\u0026gt; //2. 출력 \u0026lt;h2\u0026gt; \u0026lt;%=msg%\u0026gt; \u0026lt;/h2\u0026gt; 데이터 전달 : param # param은 String 타입만 전달 가능\nforword2.jsp에서 데이터 보내기\n\u0026lt;% //jsp:param 으로 한글을 전달시 현재 페이지에서 encoding을 해줘야 한다. request.setCharacterEncoding(\u0026#34;utf-8\u0026#34;); %\u0026gt; \u0026lt;jsp:forward page=\u0026#34;Ex4_forword.jsp\u0026#34;\u0026gt; \u0026lt;jsp:param value=\u0026#34;../29cm/1.jpg\u0026#34; name=\u0026#34;photo\u0026#34;/\u0026gt; \u0026lt;jsp:param value=\u0026#34;Hello! 안녕\u0026#34; name=\u0026#34;msg\u0026#34;/\u0026gt; \u0026lt;/jsp:forward\u0026gt; forword1.jsp에서 데이터 가져오기 : request.getParameter(). \u0026lt;% String photo = request.getParameter(\u0026#34;photo\u0026#34;); String msg = request.getParameter(\u0026#34;msg\u0026#34;); %\u0026gt; \u0026lt;img src = \u0026#34;\u0026lt;%=photo%\u0026gt;\u0026#34;\u0026gt; \u0026lt;h4\u0026gt;\u0026lt;%=msg%\u0026gt;\u0026lt;/h4\u0026gt; redirect #file1 : redorect1.jsp\nfile1 : redorect2.jsp\nredorect2.jsp로 페이지 이동을 위한 설정 \u0026lt;% response.sendRedirect(\u0026#34;redorect2.jsp\u0026#34;); %\u0026gt; redorect1.jsp을 띄우면 주소 및 내용이 redorect2.jsp로 변경됨.\nredorect2.jsp로 데이터 보내기\n\u0026lt;% String code = \u0026#34;Aiur\u0026#34;; response.sendRedirect(\u0026#34;Ex6_redirect.jsp?code=\u0026#34; + code +\u0026#34;\u0026amp;color=green\u0026#34;); %\u0026gt; redorect1.jsp에서 데이터 받기 : request.getParameter(). \u0026lt;% String code = request.getParameter(\u0026#34;code\u0026#34;); String color = request.getParameter(\u0026#34;color\u0026#34;); %\u0026gt; \u0026lt;h1 style=\u0026#34;color:\u0026lt;%=color%\u0026gt;\u0026#34;\u0026gt;\u0026lt;%=code%\u0026gt;\u0026lt;/h1\u0026gt; include #include : 다른 파일의 실행결과를 현재파일에 포함시킨다.\ninclude 설정 \u0026lt;jsp:include page=\u0026#34;불러올 페이지 경로\u0026#34;/\u0026gt; 끝.\n","date":"2023-10-16","permalink":"/devl/javascript/007/","section":"Developer Course","summary":"jsp에서 페이지 이동하는 방법","title":"jsp - 페이지 불러오기"},{"content":" html은 시멘틱 태그를 사용해 볼 것\n의미있는 이름을 사용할 것\n달력 기능 구현\n\u0026lsquo;연도\u0026rsquo;와 \u0026lsquo;월\u0026rsquo; 을 입력하면 달력을 출력하는 페이지 토요일과 일요일 날짜는 포인트 주기 마지막일가지 출력했다면 더이상 칸 생성 x 연도, 월, 필드에 유효한 값을 입력하는 지 검사하기 오늘 날짜 강조 이전 월, 다음 월 기능 구현 js 코드 모듈화 html # 시멘틱 태그의 사용이 처음이라 조금 억지일수도 있지만 일단은 넣어보았다. 날짜 입력 input은 타입을 number로 하고 css에서 조작 버튼을 지워버렸다. html 코드 (열기) \u0026lt;main\u0026gt; \u0026lt;header\u0026gt; \u0026lt;div id=\u0026#34;header\u0026#34;\u0026gt;January\u0026lt;/div\u0026gt; \u0026lt;/header\u0026gt; \u0026lt;nav\u0026gt; \u0026lt;div id=\u0026#34;prevMonth\u0026#34;\u0026gt; \u0026lt;i class=\u0026#34;fa-solid fa-caret-right fa-rotate-180\u0026#34;\u0026gt;\u0026lt;/i\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div id=\u0026#34;areaUserSetDate\u0026#34;\u0026gt; \u0026lt;figure\u0026gt; \u0026lt;label for=\u0026#34;setYear\u0026#34;\u0026gt;\u0026lt;input class=\u0026#34;dateBox\u0026#34; id=\u0026#34;setYear\u0026#34; type=\u0026#34;number\u0026#34;\u0026gt;년\u0026lt;/label\u0026gt; \u0026lt;figcaption id=\u0026#34;captionYear\u0026#34;\u0026gt;\u0026lt;/figcaption\u0026gt; \u0026lt;/figure\u0026gt; \u0026lt;figure\u0026gt; \u0026lt;label for=\u0026#34;setMonth\u0026#34;\u0026gt;\u0026lt;input class=\u0026#34;dateBox\u0026#34; id=\u0026#34;setMonth\u0026#34; type=\u0026#34;number\u0026#34;\u0026gt;월\u0026lt;/label\u0026gt; \u0026lt;figcaption id=\u0026#34;captionMonth\u0026#34;\u0026gt;\u0026lt;/figcaption\u0026gt; \u0026lt;/figure\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div id=\u0026#34;nextMonth\u0026#34;\u0026gt; \u0026lt;i class=\u0026#34;fa-solid fa-caret-right\u0026#34;\u0026gt;\u0026lt;/i\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/nav\u0026gt; \u0026lt;section\u0026gt; \u0026lt;table\u0026gt; \u0026lt;thead\u0026gt;\u0026lt;/thead\u0026gt; \u0026lt;tbody\u0026gt;\u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;/section\u0026gt; \u0026lt;section\u0026gt; \u0026lt;/section\u0026gt; \u0026lt;/main\u0026gt; \u0026lt;footer\u0026gt; Copyright ⓒ 2023 Aiur All Rights Reserved. \u0026lt;/footer\u0026gt; 기능별 함수 이름 짓기 # 이전 월 이동 : moveNextMonth() 다음 월 이동 : movePreviousMonth() 날짜 유효값 확인 : checkErrorDate() 헤드 출력 : setHerder() 달력 요일 생성 (thead) : setDayOfWeek() 달력 날짜 생성 (tbody) : generateCalenderTable() 가능하면 더 좋은 이름을 찾으려고 아직도 고민중이다.\n전역 변수 설정 const CURRENT_YEAR = new Date().getFullYear(); const CURRENT_MONTH = new Date().getMonth() + 1; const CURRENT_DATE = new Date().getDate(); const DAY_OF_WEEK = [\u0026#39;SUN\u0026#39;, \u0026#39;MON\u0026#39;, \u0026#39;TUE\u0026#39;, \u0026#39;WED\u0026#39;, \u0026#39;THU\u0026#39;, \u0026#39;FRI\u0026#39;, \u0026#39;SAT\u0026#39;]; const MONTH_HEADER_NAME= [\u0026#39;January\u0026#39;, \u0026#39;February\u0026#39;, \u0026#39;March\u0026#39;, \u0026#39;April\u0026#39;, \u0026#39;May\u0026#39;, \u0026#39;June\u0026#39;, \u0026#39;July\u0026#39;, \u0026#39;August\u0026#39;, \u0026#39;September\u0026#39;, \u0026#39;October\u0026#39;, \u0026#39;November\u0026#39;, \u0026#39;December\u0026#39;]; const getYear = document.getElementById(\u0026#39;setYear\u0026#39;); const getMonth = document.getElementById(\u0026#39;setMonth\u0026#39;); const prevMonth= document.getElementById(\u0026#39;prevMonth\u0026#39;); const nextMonth= document.getElementById(\u0026#39;nextMonth\u0026#39;); const areaUserSetDate = document.getElementById(\u0026#39;areaUserSetDate\u0026#39;); //연도, 월 input 영역 위와 같이 설정하고 함수를 작성하는데 값이 넘어오질 않아서 알아보니 html영역에서 script파일에 설정을 해줘야했다. defer를 붙여주면 된다. 이것은 스크립트 실행 순서와 관련이 있다.\n\u0026lt;script defer src=\u0026#34;calendar.js\u0026#34; \u0026gt;\u0026lt;/script\u0026gt; 또는 위 스크립트를 html 문서 하단에 넣어주니 defer가 없이도 작동 됐다.\n각 함수 작성 moveNextMonth() 코드 (열기) const moveNextMonth = () =\u0026gt; { if (Number(getMonth.value) === 12) { getYear.value++; getMonth.value = 1; } else { getMonth.value++; } generateCalenderTable(getYear.value, getMonth.value); }; movePreviousMonth() 코드 (열기) const movePreviousMonth = () =\u0026gt; { if (Number(getMonth.value) === 1) { getYear.value--; getMonth.value = 12; } else { getMonth.value--; } generateCalenderTable(getYear.value, getMonth.value); } checkErrorDate() 코드 (열기) const checkErrorDate = (year, month) =\u0026gt; { let errYearCaption = document.getElementById(\u0026#39;captionYear\u0026#39;); let errMonthCaption= document.getElementById(\u0026#39;captionMonth\u0026#39;); let yearRange = (1900 \u0026lt;= year) \u0026amp;\u0026amp; (year \u0026lt;= 2100) ? \u0026#39;in\u0026#39; : \u0026#39;out\u0026#39;; let monthRange = (1 \u0026lt;= month) \u0026amp;\u0026amp; (month \u0026lt;= 12) ? \u0026#39;in\u0026#39; : \u0026#39;out\u0026#39;; let errMessage = \u0026#34;* 눈을 들어 BOX를 보라\u0026#34;; let errCssOutline = \u0026#34;2px solid #f06e50\u0026#34;; const setError = (e1_Message1, e2_Message2, e1_Outline1, e2_Outline2) =\u0026gt; { errYearCaption.innerText = e1_Message1; errMonthCaption.innerText = e2_Message2; getYear.style.outline = e1_Outline1; getMonth.style.outline = e2_Outline2; }; if (yearRange === \u0026#39;in\u0026#39; \u0026amp;\u0026amp; monthRange === \u0026#39;in\u0026#39;) { setError(\u0026#34;\u0026#34;, \u0026#34;\u0026#34;, \u0026#34;0\u0026#34;, \u0026#34;0\u0026#34;); generateCalenderTable(year, month) } else if (yearRange === \u0026#39;out\u0026#39; \u0026amp;\u0026amp; monthRange === \u0026#39;out\u0026#39;) { setError(errMessage, errMessage, errCssOutline, errCssOutline); } else if (yearRange === \u0026#39;in\u0026#39; \u0026amp;\u0026amp; monthRange === \u0026#39;out\u0026#39;) { setError(\u0026#34;\u0026#34;, errMessage, \u0026#34;0\u0026#34;, errCssOutline); } else { setError(errMessage, \u0026#34;\u0026#34;, errCssOutline, \u0026#34;0\u0026#34;); } } setHerder() 코드 (열기) const setHerder = (month) =\u0026gt; { let header = document.getElementById(\u0026#39;header\u0026#39;); header.innerText = MONTH_HEADER_NAME[month - 1].toUpperCase(); } setDayOfWeek() 코드 (열기) const setDayOfWeek = () =\u0026gt; { const thead = document.querySelector(\u0026#39;thead\u0026#39;); let outputCalendar= \u0026#39;\u0026#39;; Array.from(DAY_OF_WEEK).forEach(day =\u0026gt; outputCalendar += `\u0026lt;th\u0026gt;${day}\u0026lt;/th\u0026gt;`); thead.innerHTML = outputCalendar; } generateCalenderTable() 코드 (열기) const generateCalenderTable = (year, month) =\u0026gt; { const lastDate = new Date(year, month, 0).getDate(); const firstDate = new Date(year, month - 1, 1); const tbody = document.querySelector(\u0026#39;tbody\u0026#39;); const maxIndex = lastDate + (6 - new Date(year, month - 1, lastDate).getDay()) + firstDate.getDay(); let date= 1; let isPossibleDateInput= false; let outputCalendar= \u0026#39;\u0026#39;; setHerder(month); for (let col = 1; col \u0026lt;= maxIndex; col++) { let createTd = `\u0026lt;td class=\u0026#34;containDate row${col % 7}\u0026#34;\u0026gt;${date}\u0026lt;/td\u0026gt;`; let createTodayTd = `\u0026lt;td class=\u0026#34;containDate row${col % 7} today\u0026#34;\u0026gt;\u0026lt;div class=\u0026#34;todayCaption\u0026#34;\u0026gt;today\u0026lt;/div\u0026gt;${date}\u0026lt;/td\u0026gt;`; let checkToday = Number(date) === Number(CURRENT_DATE) \u0026amp;\u0026amp; Number(month) === Number(CURRENT_MONTH) \u0026amp;\u0026amp; Number(year) === Number(CURRENT_YEAR) ? \u0026#39;y\u0026#39; : \u0026#39;n\u0026#39;; if (col % 7 === 1) { outputCalendar += \u0026#39;\u0026lt;tr\u0026gt;\u0026#39;; } if (isPossibleDateInput) { if (checkToday === \u0026#39;y\u0026#39;) { outputCalendar += createTodayTd; } else { outputCalendar += createTd; } date++; } else if (Math.floor((col - 1) / 7) === 0 \u0026amp;\u0026amp; firstDate.getDay() === (col - 1) % 7) { if (checkToday === \u0026#39;y\u0026#39;) { outputCalendar += createTodayTd; } else { outputCalendar += createTd; } date++; isPossibleDateInput = !isPossibleDateInput; } else { outputCalendar += \u0026#39;\u0026lt;td\u0026gt;\u0026lt;/td\u0026gt;\u0026#39;; } if (date - 1 === lastDate) { date = 0; isPossibleDateInput = !isPossibleDateInput; } if (col % 7 === 0) { outputCalendar += \u0026#39;\u0026lt;/tr\u0026gt;\u0026#39;; } } tbody.innerHTML = outputCalendar; } 가능한 한 중복코드를 피하려고 여러번 수정했는데 .. 잘 됐는지는 모르겠다.\n스타일은 scss라는 존재을 알게돼서 한번 써보게 됐는데.. 뭔가 객체처럼 다룰 수 있어서 내 취향에 맞아다. 이 부분은 다음에 다뤄보는 것으로.\n결과물 # ","date":"2023-10-16","permalink":"/devl/javascript/008/","section":"Developer Course","summary":"html은 시멘틱 태그를 사용해 볼 것","title":"달력 만들기 #1"},{"content":"","date":null,"permalink":"/categories/jquery/","section":"Categories","summary":"","title":"JQuery"},{"content":"Dropdowns #Dropdowns 태그 # Dropdowns 태그\nDropdowns 적용 #\u0026lt;div class=\u0026#34;dropdown\u0026#34;\u0026gt; \u0026lt;button type=\u0026#34;button\u0026#34; class=\u0026#34;btn btn-primary dropdown-toggle\u0026#34; data-bs-toggle=\u0026#34;dropdown\u0026#34;\u0026gt; Dropdown button \u0026lt;/button\u0026gt; \u0026lt;ul class=\u0026#34;dropdown-menu\u0026#34;\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a class=\u0026#34;dropdown-item\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;Link 1\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a class=\u0026#34;dropdown-item\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;Link 2\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; Range #Range 적용 #\u0026lt;input type = \u0026#34;range\u0026#34; class = \u0026#34;photoSize\u0026#34; style = \u0026#34;width:300px;\u0026#34; min = \u0026#34;100\u0026#34; max = \u0026#34;500\u0026#34;\u0026gt; \u0026lt;img src = \u0026#34;../29cm/29.jpg\u0026#34; class = \u0026#34;photo\u0026#34;\u0026gt; $(\u0026#34;.photoSize\u0026#34;).mousemove(function (){ $(\u0026#34;img.photo\u0026#34;).css(\u0026#34;width\u0026#34;, v+\u0026#34;px\u0026#34;); }); Modal #Modal 태그 # modal 태그\nModal 적용 #\u0026lt;div class=\u0026#34;modal fade\u0026#34; id=\u0026#34;myModal\u0026#34;\u0026gt; \u0026lt;!--target에서 불러올 id--\u0026gt; \u0026lt;div class=\u0026#34;modal-dialog modal-sm\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;modal-content\u0026#34;\u0026gt; \u0026lt;!-- Modal Header --\u0026gt; \u0026lt;div class=\u0026#34;modal-header\u0026#34;\u0026gt; \u0026lt;h4 class=\u0026#34;modal-title\u0026#34;\u0026gt;상세정보\u0026lt;/h4\u0026gt; \u0026lt;button type=\u0026#34;button\u0026#34; class=\u0026#34;btn-close\u0026#34; data-bs-dismiss=\u0026#34;modal\u0026#34;\u0026gt;\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;!-- Modal body --\u0026gt; \u0026lt;div class=\u0026#34;modal-body\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;!-- Modal footer --\u0026gt; \u0026lt;div class=\u0026#34;modal-footer\u0026#34;\u0026gt; \u0026lt;button type=\u0026#34;button\u0026#34; class=\u0026#34;btn btn-danger\u0026#34; data-bs-dismiss=\u0026#34;modal\u0026#34;\u0026gt;Close\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; toggle와 target 설정 \u0026lt;img src = \u0026#34;${item.url}\u0026#34; class = \u0026#34;photo\u0026#34; width=\u0026#34;200\u0026#34; data-bs-toggle=\u0026#34;modal\u0026#34; data-bs-target=\u0026#34;#myModal\u0026#34;\u0026gt; Animate #Animate 적용 #$(\u0026#34;img\u0026#34;).animate({width: \u0026#39;+=10\u0026#39;,height:\u0026#39;+=30px\u0026#39;},\u0026#39;slow\u0026#39;); 속성 설정 : width, height, top, borderWidth 등. 값 설정 '+=50' : 이벤트 작동 시 50px 증가 '500px' : 해당 사이즈로 증가 속도 설정 : 'slow', 'fast', 1000 (따옴표없음, 1000은 1초)와 같이 설정 Animate 연속으로 주기 #$(\u0026#34;img\u0026#34;).animate(애니메이션1).animate(애니메이션2); 애니메이션1 종료 후 애니메이션2 동작. Animate 종료 후 함수 호출 #$(\u0026#34;img\u0026#34;).animate({width:\u0026#39;200px\u0026#39;},1000,function (){}); Animate 응용 # $(\u0026#34;btn\u0026#34;).click(function (){ $(\u0026#34;img\u0026#34;).animate({width:\u0026#39;200px\u0026#39;,height: \u0026#39;200px\u0026#39;, opacity:\u0026#39;0.5\u0026#39;},2000,function (){ $(this).css({ width: \u0026#39;100px\u0026#39;, height: \u0026#39;110px\u0026#39;, opacity: 1 }); $(this).after(\u0026#34;\u0026lt;h5\u0026gt;이미지 애니메이션 종료\u0026lt;/h5\u0026gt;\u0026#34;); }); }); Effect #Effect 종류 # Hide Show Toggle : Hide/Show 번갈아가면서 작동 SlideUp : ↖ 좌상단 방향으로 압축됨. SlideDown : ↘ 우하단 방향으로 펼쳐짐. SlideToggle : SlideUp/SlideDown 번갈아가며 적용 FadeOut : 서서히 사라짐 FadeIn : 서서히 나타남 FadeToggle : FadeOut/FadeIn 번갈아가며 적용 Effect 적용 #//기본 이벤트 적용 $(\u0026#34;#btn\u0026#34;).click(function (){ $(\u0026#34;img\u0026#34;).hide(); }); //속도 넣기 $(\u0026#34;img\u0026#34;).hide(\u0026#39;slow\u0026#39;); Effect 응용 #\u0026lt;div class = \u0026#34;title\u0026#34;\u0026gt; \u0026lt;b\u0026gt;기사 제목1\u0026lt;/b\u0026gt; \u0026lt;div class = \u0026#34;content\u0026#34;\u0026gt; 기사 내용1 \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class = \u0026#34;title\u0026#34;\u0026gt; \u0026lt;b\u0026gt;기사 제목2\u0026lt;/b\u0026gt; \u0026lt;div class = \u0026#34;content\u0026#34;\u0026gt; 기사 내용2 \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; $(\u0026#34;div.content\u0026#34;).hide(); $(\u0026#34;.title\u0026gt;b\u0026#34;).click(function (){ $(this).next().slideDown(\u0026#39;slow\u0026#39;); $(this).parent().siblings().find(\u0026#34;.content\u0026#34;).slideUp(\u0026#39;slow\u0026#39;); }); \u0026lt;/script\u0026gt; Audio #Audio 변수 설정 및 사용 #let myAudio = new Audio(\u0026#34;../gunShot.wav\u0026#34;); myAudio.play(); + CSS : 이미지 분할 출력 (background-position) #CSS 속성 # width : 300px, height:900px 의 이미지를 상/중/하 3등분 출력하기 \u0026lt;div class=\u0026#34;img1\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;img2\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;img3\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; .img1{ background-image: url(\u0026#39;../image/gun.png\u0026#39;); background-position: left top; } .img2{ background-image: url(\u0026#39;../image/gun.png\u0026#39;); background-position: left center; } .img3{ background-image: url(\u0026#39;../image/gun.png\u0026#39;); background-position: bottom; /*left 생략가능*/ } + CSS : 요소 우선 순위 # x = width,y = height, z = depth 의 z-index라고 생각하면 됨. style1에 우선 순위를 주고자 할 경우 z-index의 값을 style2보다 높게 주면 됨. .style1{ position:relative; z-index: 10; } .style2{ position:relative; z-index: 1; } ","date":"2023-10-11","permalink":"/devl/javascript/006/","section":"Developer Course","summary":"Dropdowns #Dropdowns 태그 # Dropdowns 태그","title":"jQuery 기초 #4"},{"content":"text #\u0026lt;input type=\u0026#34;text\u0026#34; class=\u0026#34;txtmsg\u0026#34;\u0026gt; \u0026lt;script\u0026gt; $(\u0026#34;.txtmsg\u0026#34;).keyup(function(){ $(\u0026#34;.result\u0026#34;).text($(this).val()); }); \u0026lt;/script\u0026gt; \u0026lt;h3 class=\u0026#34;result\u0026#34;\u0026gt;\u0026lt;/h3\u0026gt; radio #\u0026lt;label\u0026gt;\u0026lt;input type=\u0026#34;radio\u0026#34; class=\u0026#34;color\u0026#34; value=\u0026#34;yellow\u0026#34;\u0026gt; 노랑 \u0026lt;/label\u0026gt; \u0026lt;label\u0026gt;\u0026lt;input type=\u0026#34;radio\u0026#34; class=\u0026#34;color\u0026#34; value=\u0026#34;pink\u0026#34;\u0026gt; 분홍 \u0026lt;/label\u0026gt; \u0026lt;script\u0026gt; $(\u0026#34;.color\u0026#34;).click(function(){ let color=$(this).val(); $(\u0026#34;.result\u0026#34;).html(`\u0026lt;b style=\u0026#34;background-color:${color}\u0026#34;\u0026gt;${color}\u0026lt;/b\u0026gt;`); }); \u0026lt;/script\u0026gt; \u0026lt;h3 class=\u0026#34;result\u0026#34;\u0026gt;\u0026lt;/h3\u0026gt; select #\u0026lt;select class=\u0026#34;mySel\u0026#34;\u0026gt; \u0026lt;option hidden disabled selected\u0026gt;select\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;orange\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;pink\u0026lt;/option\u0026gt; \u0026lt;/select\u0026gt; \u0026lt;script\u0026gt; $(\u0026#34;.mySel\u0026#34;).change(function(){ let v=$(this).val(); $(\u0026#34;.result\u0026#34;).text(v).css(\u0026#34;color\u0026#34;,v); }); \u0026lt;/script\u0026gt; \u0026lt;h3 class=\u0026#34;result\u0026#34;\u0026gt;\u0026lt;/h3\u0026gt; checkbox #\u0026lt;label\u0026gt;\u0026lt;input type=\u0026#34;checkbox\u0026#34; class=\u0026#34;mycolor\u0026#34; value=\u0026#34;orange\u0026#34;\u0026gt;오렌지색\u0026lt;/label\u0026gt; \u0026lt;label\u0026gt;\u0026lt;input type=\u0026#34;checkbox\u0026#34; class=\u0026#34;mycolor\u0026#34; value=\u0026#34;pink\u0026#34;\u0026gt;핑크색\u0026lt;/label\u0026gt; \u0026lt;!--체크된 항목 스크립트 효과 주기 (중복 체크 허용)--\u0026gt; \u0026lt;script\u0026gt; $(\u0026#34;#btn\u0026#34;).click(function(){ $(\u0026#34;.result2\u0026#34;).empty(); $(\u0026#34;.mycolor:checked\u0026#34;).each(function(){ let v=$(this).val(); let s=`\u0026lt;div class=\u0026#34;box\u0026#34; style=\u0026#34;background-color:${v}\u0026#34;\u0026gt;\u0026lt;/div\u0026gt;`; $(\u0026#34;.result\u0026#34;).append(s); }); }); \u0026lt;/script\u0026gt; \u0026lt;div class=\u0026#34;result\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 휴대폰 입력폼에서 자동으로 포커스 옮기기 #\u0026lt;input type=\u0026#34;text\u0026#34; class=\u0026#34;form-control\u0026#34; id=\u0026#34;hp1\u0026#34; maxlength=\u0026#34;3\u0026#34;\u0026gt; \u0026lt;b\u0026gt;-\u0026lt;/b\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; class=\u0026#34;form-control\u0026#34; id=\u0026#34;hp2\u0026#34; maxlength=\u0026#34;4\u0026#34;\u0026gt; \u0026lt;b\u0026gt;-\u0026lt;/b\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; class=\u0026#34;form-control\u0026#34; id=\u0026#34;hp3\u0026#34; maxlength=\u0026#34;4\u0026#34;\u0026gt; \u0026lt;script\u0026gt; $(\u0026#34;#hp1\u0026#34;).keyup(function(){ //3글자 입력시 자동으로 다음칸으로 포커스주기 if($(this).val().length == 3) $(\u0026#34;#hp2\u0026#34;).focus(); }); \u0026lt;/script\u0026gt; Email Form + Select \u0026lsquo;직접 입력\u0026rsquo; 선택 시 조건 주기 #\u0026lt;input type=\u0026#34;text\u0026#34; class=\u0026#34;form-control\u0026#34; id=\u0026#34;email1\u0026#34;\u0026gt; \u0026lt;b\u0026gt;@\u0026lt;/b\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; class=\u0026#34;form-control\u0026#34; id=\u0026#34;email2\u0026#34;\u0026gt; \u0026lt;select class=\u0026#34;form-select selemail\u0026#34;\u0026gt; \u0026lt;option hidden selected disabled\u0026gt;select email\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;-\u0026#34;\u0026gt;직접 입력\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;naver.com\u0026#34;\u0026gt;네이버\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;gmail.com\u0026#34;\u0026gt;구글\u0026lt;/option\u0026gt; \u0026lt;/select\u0026gt; \u0026lt;script\u0026gt; $(\u0026#34;.selemail\u0026#34;).change(function(){ let v=$(this).val(); if(v==\u0026#39;-\u0026#39;){ $(\u0026#34;#email2\u0026#34;).val(\u0026#34;\u0026#34;); $(\u0026#34;#email2\u0026#34;).focus(); }else{ $(\u0026#34;#email2\u0026#34;).val(v); } }); \u0026lt;/script\u0026gt; ","date":"2023-10-10","permalink":"/devl/javascript/005/","section":"Developer Course","summary":"text #\u0026lt;input type=\u0026#34;text\u0026#34; class=\u0026#34;txtmsg\u0026#34;\u0026gt; \u0026lt;script\u0026gt; $(\u0026#34;.","title":"jQuery 기초 #3"},{"content":"jQuery API #.next() / .prev() / .find() # .next() : 다음 노드 .prev() : 이전 노드 .find(selector) : 하위 태그 중 특정 노드 찾기 \u0026lt;figure\u0026gt; \u0026lt;img src=\u0026#34;../29cm/26.jpg\u0026#34;\u0026gt; \u0026lt;figcaption\u0026gt; \u0026lt;b\u0026gt;상품명\u0026lt;/b\u0026gt; \u0026lt;/figcaption\u0026gt; \u0026lt;/figure\u0026gt; \u0026lt;h3\u0026gt;출력할 곳\u0026lt;/h3\u0026gt; $(\u0026#34;figure img\u0026#34;).mouseover(function (){ //이미지에 마우스오버 시 함수 실행 // figure\u0026gt;img ➡️ 다음 태그(figcaption) 내부에서 ️➡️ \u0026lt;b\u0026gt; 태그를 찾는다.➡️ 텍스트로 반환해서 name으로 넣는다. let name = $(this).next().find(\u0026#34;b\u0026#34;).text(); //\u0026lt;h3\u0026gt;함수에 출력한다. $(\u0026#34;h3\u0026#34;).text(name); }); .siblings() / .parents() # .sibling() : 선택한 요소의 형제 요소를 선택 .siblings() : 선택한 요소의 형제 요소를 모두 선택 .parent() : 선택한 요소의 부모 요소를 선택 .parents() : 선택한 요소의 부모 요소를 모두 선택 \u0026lt;div class=\u0026#34;boxParent\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;box\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;boxParent\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;box\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; $(\u0026#34;div.box\u0026#34;).mouseenter(function(){ //1. box클래스 영역에 마우스가 들어왔을 때 텍스트 출력 $(this).after(\u0026#34;\u0026lt;b\u0026gt;💚💚💚💚💚\u0026lt;/b\u0026gt;\u0026#34;); //2. box클래스➡ ️부모 클래스(boxParent)➡ 모든 형제 요소 중 ➡ \u0026lt;b\u0026gt;태그를 찾아 삭제 $(this).parent().siblings().find(\u0026#34;b\u0026#34;).remove(); }); $.each() # 배열 반복 할 때 사용. $.each(배열명, function (index,item) { 함수 구현 }); // body 영역에 \u0026lt;div class=\u0026#34;a\u0026#34;\u0026gt; 가 4개 있을 때 let arr = [\u0026#34;red\u0026#34;, \u0026#34;blue\u0026#34;, \u0026#34;yellow\u0026#34;, \u0026#34;gray\u0026#34;]; $.each(arr,function (index,item){ $(\u0026#34;div.a\u0026#34;).eq(index).css(\u0026#34;background-color\u0026#34;, item); }); //각 div.a 배경색이 순서대로 \u0026#34;red\u0026#34;, \u0026#34;blue\u0026#34;, \u0026#34;yellow\u0026#34;, \u0026#34;gray\u0026#34; 로 적용됨. json에서 $.each() 사용 #1 #let arr = [ {txtColor: \u0026#34;blue\u0026#34;, border: \u0026#34;5px\u0026#34;}, {txtColor: \u0026#34;pink\u0026#34;, border: \u0026#34;10px\u0026#34;}, ]; $.each(arr,function (index,item){ let show = `\u0026lt;div style=\u0026#34;color : ${item.txtColor}; border : ${item.border};\u0026#34;\u0026gt;\u0026lt;/div\u0026gt;`; $(\u0026#34;div.show\u0026#34;).append(show); }); //이런식으로 접근이 가능하다. json에서 $.each() 사용 #2 #let arr ={ \u0026#34;navData\u0026#34;: [ //충첩 json 형태 중 하나 ➡ key(str) : value(arr) {title : \u0026#34;쇼핑하기\u0026#34;}, {title : \u0026#34;빠른배송\u0026#34;}, ]}; $.each(arr.navData, function (index, item){ //arr이 아닌 `arr.navData\u0026#39; 로 지정 let show = `\u0026lt;div\u0026gt;${item.title}\u0026lt;/div\u0026gt;`; $(\u0026#34;div.show\u0026#34;).append(show); }); json에서 $.each() 사용 #3 #let arr = [ { part: \u0026#34;Acc\u0026#34;, data: [\u0026#34;../29cm/2.jpg\u0026#34;, \u0026#34;../29cm/6.jpg\u0026#34;, \u0026#34;../29cm/9.jpg\u0026#34;] },]; // 중접 $.each()문 사용하기 $.each(arr, function (arrIndex, item){ let show= `\u0026lt;div\u0026gt;${item.part}\u0026lt;/div\u0026gt;`; $.each(item.data, function (itemIndex, imgUrl){ //두번째 $.each()문 에서 function 파라미터 주의. show += `\u0026lt;img src = \u0026#34;${imgUrl}\u0026#34;\u0026gt;`; // `url` 또는 \u0026#39;item.data[itemIndex]\u0026#39; 사용 }); $(\u0026#34;div.show\u0026#34;).append(show); }); ","date":"2023-10-06","permalink":"/devl/javascript/004/","section":"Developer Course","summary":"jQuery API #.","title":"jQuery 기초 #2"},{"content":"jQuery 적용하기 #\u0026lt;script src=\u0026#34;https://code.jquery.com/jquery-3.7.0.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; jQuery 시작 함수 #// jQuery 시작 함수 1 $(document).ready(function(){ alert(\u0026#34;jQuery로 시작합니다.\u0026#34;) }); // jQuery 시작 함수 2 $(function(){ alert(\u0026#34;jQuery로 시작합니다.\u0026#34;) }); 1번과, 2번 중 하나만 사용하면 됨. 주로 2번으로 사용 위 시작 함수는 window.onload()와 같은 함수이므로 같이 사용하면 에러 발생함. jQuery API #.attr() : 속성 변경 # 속성 하나만 쓰면 getter 속성 두개를 쓰면 setter .css() : 스타일시트 내 속성 변경 # 스타일 속성 하나만 쓰면 얻어옴 스타일 속성 두개를 쓰면 변경 \u0026lt;img src=\u0026#34;../shop/2.jpg\u0026#34; title=\u0026#34;타이틀1\u0026#34; width=\u0026#34;120\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;../shop/3.jpg\u0026#34; title=\u0026#34;타이틀2\u0026#34; style=\u0026#34;width:90px\u0026#34;\u0026gt; \u0026lsquo;타이틀1\u0026rsquo;의 width 값을 수정할 때는 .attr() 사용 \u0026lsquo;타이틀2\u0026rsquo;의 스타일의 width 값을 수정할 때는 .css() 사용 요소 지정 eq(i) : i번째 요소만 변경 $(odd),$(even) : 홀수 또는 짝수 지정 first, last gt(index) : index보다 큰 요소. 단, index 요소는 제외 lt(index) : index보다 작은 요소. 단, index 요소는 제외 \u0026lt;div class=\u0026#34;A\u0026#34;\u0026gt; \u0026lt;h3\u0026gt;데스 스트랜딩\u0026lt;/h3\u0026gt; \u0026lt;h3\u0026gt;코지마 프로덕션\u0026lt;/h3\u0026gt; \u0026lt;h3\u0026gt;샘 포터 브리지스\u0026lt;/h3\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;A\u0026#34;\u0026gt; \u0026lt;h3\u0026gt;CyberFunk2077\u0026lt;/h3\u0026gt; \u0026lt;h3\u0026gt;팬텀 리버티\u0026lt;/h3\u0026gt; \u0026lt;h3\u0026gt;조니 실버핸드\u0026lt;/h3\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;B\u0026#34;\u0026gt; \u0026lt;h3\u0026gt;호라이즌 제로던\u0026lt;/h3\u0026gt; \u0026lt;/div\u0026gt; // 변수에 스타일값 넣기 let a = $(\u0026#34;div.divA\u0026#34;).css(\u0026#34;background-color\u0026#34;); //사용 $(\u0026#34;div.divB\u0026#34;).css(\u0026#34;background-color\u0026#34;, a); 요소 지정 후 속성 변경 //1. eq 두번째 요소 글자색 변경 (eq는 0부터 시작) $(\u0026#34;div.A:eq(1)\u0026#34;).attr(\u0026#34;width\u0026#34;,\u0026#34;200px\u0026#34;); $(\u0026#34;div.A\u0026#34;).eq(1).css(\u0026#34;color\u0026#34;,\u0026#34;red\u0026#34;); //여러 속성 변경 - 중괄호 사용 (css도 동일하게 사용 가능) $(\u0026#34;div.A:eq(1)\u0026#34;).attr({ \u0026#34;width\u0026#34;:\u0026#34;100px\u0026#34;, \u0026#34;height\u0026#34;:\u0026#34;100px\u0026#34;, \u0026#34;border\u0026#34;:\u0026#34;3px inset blue\u0026#34; }); //2. first(==eq(0)) 와 last $(\u0026#34;div.A\u0026gt;h3:fist\u0026#34;).css(\u0026#34;color\u0026#34;,\u0026#34;red\u0026#34;); //첫번째 요소\u0026#39;데스 스트랜딩\u0026#39;의 글씨색 변경 $(\u0026#34;div.A\u0026gt;h3:last\u0026#34;).css(\u0026#34;color\u0026#34;,\u0026#34;blue\u0026#34;); //\u0026#39;실버핸드\u0026#39;의 글씨색 변경 //3. \u0026#39;:gt(index)\u0026#39;, \u0026#39;:lt(index)\u0026#39; .html() / .text() / .append() / .after() / .before() # $(\u0026quot;div.a\u0026quot;).html() : 자바스크립트의 innerHTML과 같음. \u0026lsquo;a\u0026rsquo;를 html 형태로 출력 $(\u0026quot;div.a\u0026quot;).text() : 자바스크립트의 innerTEXT와 같음. \u0026lsquo;a\u0026rsquo;를 text 형태로 출력 $(\u0026quot;div.a\u0026quot;).append() : div.a 다음에 삽입 (div 내에서) $(\u0026quot;div.a\u0026quot;).after() : div.a 다음에 삽입 (div 바깥에 적용) $(\u0026quot;div.a\u0026quot;).before() : div.a 이전에 삽입 (div 바깥에 적용) \u0026lt;div class=\u0026#34;a\u0026#34;\u0026gt;1\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;b\u0026#34;\u0026gt;2\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;c\u0026#34;\u0026gt;3\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;d\u0026#34;\u0026gt;4\u0026lt;/div\u0026gt; $(\u0026#34;div.a\u0026#34;).html(\u0026#34;\u0026lt;h4\u0026gt;안녕하세요\u0026lt;/h4\u0026gt;\u0026#34;); //\u0026#39;안녕하세요\u0026#39; 출력 $(\u0026#34;div.b\u0026#34;).text(\u0026#34;\u0026lt;h4\u0026gt;안녕하세요\u0026lt;/h4\u0026gt;\u0026#34;); //\u0026#39;\u0026lt;h4\u0026gt;안녕하세요\u0026lt;/h4\u0026gt;\u0026#39; 출력 //참조형 : html-\u0026gt; html $(\u0026#34;div.c\u0026#34;).html($(\u0026#34;div.b\u0026#34;).html()); // \u0026#39;안녕하세요\u0026#39; 출력 //참조형 : html-\u0026gt; text $(\u0026#34;div.d\u0026#34;).text($(\u0026#34;div.b\u0026#34;).html()); //\u0026#39;\u0026lt;h4\u0026gt;안녕하세요\u0026lt;/h4\u0026gt;\u0026#39; 출력 .addClass() / .removeClass() / .toggleClass() # .addClass(a b c) : class 추가, 여러 클래스일 경우 공백을 주고 나열하면 됨 .removeClass(a b c) : class 제거, 여러 클래스일 경우 공백을 주고 나열하면 됨 .toggleClass(a r) : 추가와 제거를 번갈아 가면서 실행. $(\u0026#34;img\u0026#34;).hover(function () { $(this).addClass(\u0026#39;photo\u0026#39;); }, function () { $(this).removeClass(\u0026#39;photo\u0026#39;); }); 주의할 점은 (\u0026quot;photo\u0026quot;) 라고 쓰면 오류가 난다. ('photo') 또는 (\u0026quot;.photo\u0026quot;)라고 써야 적용된다. .hover() #//마우스를 올리면 class적용 벗어나면 class 삭제 $(\u0026#34;img:eq(0)\u0026#34;).hover(function () { $(this).addClass(\u0026#34;photo\u0026#34;); }, function () { $(this).removeClass(\u0026#34;photo\u0026#34;); }); .each() # $(selector).each : selector 갯수만큼 반복 \u0026lt;div class=\u0026#34;a\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;a\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;a\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; $(\u0026#34;div.a\u0026#34;).each(function (index) { $(this).html(`\u0026lt;h5\u0026gt; ${index} : hello\u0026lt;/h5\u0026gt;`); }); /* 결과 0 : hello 1 : hello 2 : hello */ .children() # 하위 태그를 나타낼 때 사용 \u0026lt;h3\u0026gt; \u0026lt;span\u0026gt;클리프\u0026lt;/span\u0026gt; \u0026lt;span\u0026gt;프래자일\u0026lt;/span\u0026gt; \u0026lt;b\u0026gt;샘포터브리지스\u0026lt;/b\u0026gt; \u0026lt;/h3\u0026gt; \u0026lt;div\u0026gt;출력\u0026lt;/div\u0026gt; //1. \u0026#39;h3\u0026#39;에 속한 텍스트 모두 출력 let str = $(\u0026#39;h3\u0026#39;).children().text(); $(div).text(str); //결과 : 클리프프래자일샘포터브리지스 //2. \u0026#39;h3\u0026#39;에 속한 \u0026#39;span\u0026#39; 텍스트 모두 출력 let str = $(\u0026#39;h3\u0026#39;).children(\u0026#34;span\u0026#34;).text(); $(div).text(str); //결과 : 클리프프래자일 //3. \u0026#39;h3\u0026#39;에 속한 두번째 \u0026#39;span\u0026#39;텍스트 출력 let str = $(\u0026#39;h3\u0026#39;).children(\u0026#34;span:eq(1)\u0026#34;).text(); $(div).text(str); //결과 : 프래자일 ","date":"2023-10-05","permalink":"/devl/javascript/003/","section":"Developer Course","summary":"jQuery 적용하기 #\u0026lt;script src=\u0026#34;https://code.","title":"jQuery 기초 #1"},{"content":"테이블의 클래스는 부트스트랩을 사용했다.\nbody 프레임 #\u0026lt;div class=\u0026#34;container mt-5\u0026#34;\u0026gt; \u0026lt;div\u0026gt; \u0026lt;label for=\u0026#34;count\u0026#34;\u0026gt;열 수를 조절하세요 ➡️ \u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;number\u0026#34; id=\u0026#34;count\u0026#34; min=\u0026#34;1\u0026#34; max=\u0026#34;34\u0026#34; step =\u0026#34;2\u0026#34; value=\u0026#34;1\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div\u0026gt; \u0026lt;table class=\u0026#34;table table-bordered\u0026#34;\u0026gt; \u0026lt;tbody\u0026gt; \u0026lt;!-- 이미지가 출력되는 영역 --\u0026gt; \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; class=\u0026quot;container mt-5 : 부트스트랩의 컨테이너 클래스. 컨테이너는 콘텐츠를 가운데 정렬하고 미리 정의된 폭에 맞게 배치함.\nlabel 의 for 속성 : 이 라벨을 클릭하면 같은 id를 가진 입력 요소가 선택되거나 포커스를 받게 됨.\ninput 태그\ntype = \u0026quot;number\u0026quot; : 숫자를 입력 할 수 있는 입력 필드 min 속성 : 요소의 최솟값. max 속성 : 요소의 최댓값. step 속성 : 요소에 입력할 수 있는 숫자들의 간격. value 속성 : 요소의 초깃값을 명시. script 영역 #1. script로 id count의 max값 가져오기 # const maxAttriVal = document.querySelector(\u0026#39;#count\u0026#39;).getAttribute(\u0026#39;max\u0026#39;); 2. count 조작 시 이벤트 동작 #const count = document.querySelector(\u0026#39;#count\u0026#39;); count.addEventListener(\u0026#39;change\u0026#39;, () =\u0026gt; { const column = count.value; let output = \u0026#39;\u0026#39;; for (let i = 1; i \u0026lt;= maxAttriVal; i++) { //column==9일 경우 나머지는 0~8까지 나올 수 있다. //나머지가 1일 경우 if (i % column === 1) { output += `\u0026lt;tr\u0026gt;`; } //1을 제외한 다른 나머지일 경우 output += `\u0026lt;td\u0026gt;\u0026lt;img src=\u0026#34;../shop/${i}.jpg\u0026#34; class=\u0026#34;img-thumbnail\u0026#34;\u0026gt;\u0026lt;/td\u0026gt;`; //위 나머지가 0이면 아래 if문까지 출력 if (i % column === 0) { output += `\u0026lt;/tr\u0026gt;`; } } }); === : 값뿐만아니라 타입까지 같은지 엄격하게 비교하는 Equal Operator. 3. tbody에 전달 #const tbody = document.querySelector(\u0026#39;tbody\u0026#39;); //count.addEventListener() 영역 tbody.innerHTML = output; 결과 # addEventListener() 사용 법 #변수명.addEventListener(\u0026#39;이벤트종류\u0026#39;,() =\u0026gt; 이벤트 구현); 자바 스크립트 이벤트 종류 - # UI 이벤트 이벤트 설명 load 웹 페이지의 로드가 완료되었을 때 unload 웹 페이지가 언로드 될 때 (새 페이지를 요청한 경우) error 브라우저가 자바스크립트 오류를 만났거다 요청한 자원이 없는 경우 resize 브라우저의 창 크기를 조절했을 때 scroll 사용자가 페이지를 위 아래로 스크롤 할 때 뭔가 블로그에 적용해 보고 싶은게 많네. 키보드 이벤트 이벤트 설명 keydown 사용자가 키를 처음 눌렀을 때 keyup 키를 땔 때 keypress 사용자가 눌렀던 키의 문자가 입력되었을 때 마우스 이벤트 이벤트 설명 click 사용자가 동일한 요소 위에서 마우스 버튼을 눌렀다 땔 때 dbclick doubleclick. 두 번 눌렀다가 땔 때 mousedown 마우스를 누르고 있는 상태 mouseup 눌렀던 마우스에서 버튼을 땔 때 mousemove 마우스를 움직였을 때 mouseover 요소 위로 마우스를 움직였을 때 mouseout 요소 바깥으로 마우스를 움직였을 때 포커스 이벤트 이벤트 설명 focus 요소가 포커스를 얻을 때 발생 focusin 요소가 포커스를 얻을 때. + 버블링 되는 이벤트 blur 요소가 포커스를 잃을 때 발생 focusout 포커스를 잃을 때 + 버블링 되는 이벤트 갑자기 튀어나온 버블링.. : 버블링이란 이벤트 요소가 상위 구조로 전파되는 현상. ex) id=\"child\" 이벤트를 실행하면 상위에 있던 id=\"parent\" 까지 같이 작동. 필요한 상황에 코드를 다시 찾아보자. 폼 이벤트 이벤트 설명 input \u0026lt;input\u0026gt;,\u0026lt;textarea\u0026gt; 요소 값이 변경되었을 때 change 선택상자, 체크박스, 라디오 버튼의 상태가 변경되었을 때 submit 사용자가 버튼키를 이용하여 폼을 제출 할 때 reset 리셋 버튼을 클릭 할 때 cut 폼 필드의 콘텐츠를 잘라내기 했을 때 copy 폼 필드의 콘텐츠를 복사 했을 때 paste 폼 필드의 콘텐츠를 붙여넣을 때 select 텍스트를 선택했을 때 출처 https://yoonjong-park.tistory.com/entry/addEventListener-%EC%9D%B4%EB%B2%A4%ED%8A%B8%EB%A6%AC%EC%8A%A4%EB%84%88-%EC%A2%85%EB%A5%98\n","date":"2023-10-04","permalink":"/devl/javascript/002/","section":"Developer Course","summary":"테이블의 클래스는 부트스트랩을 사용했다.","title":"테이블 - 열 개수 조작"},{"content":"","date":null,"permalink":"/devl/db/","section":"Developer Course","summary":"","title":"Database"},{"content":"","date":null,"permalink":"/categories/sqld/","section":"Categories","summary":"","title":"Sqld"},{"content":" 각 문제를 풀면서 새롭게 안 사실 + 개념 복습\n1번 문제 # 어플리케이션과 데이터 간의 연계성을 명확하게 높게 정의?\n어플리케이션이 변경 될 때마다 데이터 모델도 변경되는 상황 초래 ➡️ 비유연성 데이터 모델링을 할 때 지양할 점 : 중복, 비유연성, 비일관성\n데이터의 정의를 데이터 사용 프로세스와 분리함으로써 프로세스의 변화로 인해 데이터 모델이 수시될 가능성을 줄인다.\n개념적 모델링 : 업무 중심적으로 프로세스를 포괄적으로 모델링. 논리적 독립성 : 개념 스키마가 변경돼도 외부스키마는 영향을 받지 않음. 데이터 간의 일관성을 유지하기 위해 상호 연관 관계를 명확하게 정의\n모델링의 세가지 특징 중 명확화에 대한 것이다 (나머지 : 추상화, 단순화) 2번 문제 #엔터티 분류는 2가지 유형으로 나뉨\n엔터티 분류 - 발생 시점 (엔터티가 생성되는 시점에 따른 분류) 기 : 독립적으로 생성, 자식 엔터티 ⭕, 먼저 기본 엔터티 부터 생성 ex)상품, 회원 중 : 기본 엔터티에서 파생, 행위 엔터티 생성 기본 엔터티로부터 연관된 엔터티를 생성 업무에 있어 중심적인 역할을 함 ex) 주문 : 상품 또는 회원과 관련된 \u0026lsquo;주문\u0026rsquo;엔터티 생성 행 : 2개 이상의 엔터티로 파생 초기 단계보다는 설계 단계에서 많이 도출됨. ex) 주문상품 = 주문 부모 엔터티 + 상품 부모 엔터티 엔터티 분류 - 유형과 무형 유 : 물리적인 형태 존재, 안정적, 지속적 , ex)회원, 상품 개 : 물리적인 형태 없음, 개념적 , ex)부서, 학과 사 : 행위를 함으로써 발생, 빈번함, 통계자료로 이용. ex)주문, 이벤트 응모 3번 문제 # ERD에서 나타내는 것\n관계명 관계차수 관계 선택 사양 필수 \u0026gt; 1개 이상, ERD 표현 --|\u0026lt; 선택 \u0026gt; 0 가능, ERD 표현 --o|\u0026lt; 존재 관계 ex) 학생 - 학과 : (소속된다)\n행위 관계 ex) 학생 - 출석부 : (출석한다)\n존재 및 행위에 관한 관계\nERD에서 존재 및 행위에 관한 관계는 구분해서 표현하지 않는다. 클래스 다이어그램에서는 이것을 구분하여 연관 관계와 의존 관계로 표현한다. 4번 문제 # 또나옴 데이터 모델링을 할 때 지양해야 할 점 비일관성 문제점 ➡️ 개발자가 다른 데이터와의 연관성을 고려하지 않고 일부 데이터만 변경했을 때 (데이터의 중복이 없는 경우에도 발생 가능) 대책 ➡️ 모델링을 할 때 데이터 간의 연관 관계에 대해 명확하게 정의 비유연성(1번 문제에서 다룸) 문제점 ➡️ 어플리케이션의 경우 사소한 변경에도 데이터 모델이 수시로 변경돼야 할 수 있음 대책 ➡️ 유지보수의 어려움을 가중시키므로 데이터 모델과 프로세스를 분리하여 유연성을 높여야함. 중복 5번 문제 # 상품 : 엔터티 상품명/카테고리/가격 : 상품 엔터티의 속성명 6번 문제 # 식별자 비식별자 강한 관계 약한 관계 부모 엔터티의 식별자가\n자식 엔터티의 주식별자 부모 엔터티의 식별자가\n자식엔터티의 일반 속성 부모 엔터티가 있어야 생성 가능 부모 엔터티 없이 자식 엔터티 생성 가능 ERD 실선 ERD 점선 7번, 8번 문제 # 출처 https://ppomelo.tistory.com/51\n9번 문제 #ERD 작성 순서 올바르게 나열하기\n엔터티를 그린다. 엔터티 간의 관계를 나타낸다. 관계명을 정의한다. 엔터티를 적절하게 배치한다. 관계의 참여도를 나타낸다. 관계의 필수 여부를 나타낸다. 내 답 : 1-4-3-2-5-6\n틀림.\n엔터티 이름과 관계명을 헷갈려서 실수한 문제.\n엔터티 : 학생, 출석부 관계명 : 출석한다. 등록된다. erDiagram\n\u0026ldquo;학생\u0026rdquo; ||\u0026ndash;o{ \u0026ldquo;출석부\u0026rdquo; : \u0026ldquo;↓출석한다/↑등록된다\u0026rdquo;\n답 : 1-4-2-3-5-6 10번 문제 # 출처 https://ppomelo.tistory.com/51\n11번 문제 # 중심 엔터티 발생 시점에 따른 엔터티 분류 중 하나. 업무에 있어 핵심적인 역할 데이터의 양이 많이 발생됨 ex) 계약, 사고, 예금원장, 청구, 주문, 매출 엔터티 등 개념 추가\n기본 엔터티\n업무에 원래 존재하는 정보 독립적으로 생성 자식 엔터티를 가질 수 있음 행위 엔터티\n2개 이상의 엔터티로부터 파생 초기 단계보다는 설계 단계에서 많이 도출됨. 데이터가 자주 변경되거나 증가할 수 있음 12번 문제 #ERD 표기법 종류\n출처 https://itwiki.kr/w/ER_%EB%8B%A4%EC%9D%B4%EC%96%B4%EA%B7%B8%EB%9E%A8\n출처 https://okky.kr/questions/1342081\n13번 문제 # 속성의 특징\n의미상으로 더이상 쪼개질 수 없어야 함.(최소의 데이터 레벨) 한개의 속성은 하나의 속성값을 가짐 속성 분류\n특성에 따른 분류 : 기본 속성, 설계 속성, 파생 속성 구성방식에 따른 분류 : PK속성, FK 속성, 일반 속성(=PK, FK를 제외한 나머지 속성) 기본 속성\n가장 일반적인 속성으로 업무 프로세스 분석을 통해 바로 정의 가능한 속성. 쉽게 생각하면 \u0026lsquo;학생\u0026rsquo;엔터티의 \u0026lsquo;이름, 학년\u0026rsquo; 등 이런 기본 속성들은 바로 정의를 내릴 수 있지만 \u0026lsquo;학번(설계)\u0026rsquo;, \u0026lsquo;평균점수(파생)\u0026rsquo; 속성들은 \u0026lsquo;학생\u0026rsquo;엔터티의 기본 속성이 없이는 정의를 내릴 수 없다.\n엔터티의 가장 많은 퍼센티지를 차지하는 속성 ex)상품 이름, 상품 가격 설계 속성\n인스턴스에 유니크함을 부여 ex) 학번 파생 속성\n다른 속성으로부터 계산된 값이나, 가공된 값을 나타낸 속성 ex) \u0026lsquo;상품 재고\u0026rsquo; \u0026gt; 주문이라는 행위에 의해 계산되어지는 파생 속성이다. 14번, 15번 문제 #위 7번 ,8번 ,10번와 비슷한 유형\n16번 문제 #관계 표기법\n관계명 : 관계의 이름 (엔터티 이름이 아님) ex) 포함한다, 소속된다, 주문한다, 출석을 한다 관계차수 : 관계에 참여하는 수 1:1, 1:M, N:M 관계선택사양 : 필수 or 선택을 나타냄 0개가 포함이면 선택, 1개 이상이면 필수 17번 문제 # 엔터티 간의 관계 두 엔터티 사이를 이어주는 동사(관계명)가 존재해야한다. 두 엔터티 사이에 조합되는 정보가 존재해야 한다. 두 엔터티 사이에 영향력 있는 관계가 존재해야 한다. ※ 엔터티 간의 관계에는 부모-자식 외 다른 관계도 존재할 수 있다.\n엔터티의 특징 업무에 필요한 정보여야 함. 유니크함을 보장하는 식별자가 있어야 함 2개 이상의 인스턴스를 가지고 있어야 함 반드시 속성을 가지고 있어야 함 다른 엔터티와 1개 이상의 관계를 가지고 있어야 함 18번, 19번, 20번 문제 # 주식별자\n유일성, 최소성, 불변성, 존재성을 가진 대표 식별자. PK가 이에 해당함. 여러 개의 속성이 주 식별자가 될 수도 있음 ex) 부서코드, 주문번호, 사원번호 식별자 분류\n대표성 여부 주식별자 : 다른 엔터티와 참조 관계로 연결 보조식별자 : 인스턴스를 식별할 수는 있지만 대표 식별자가 아님, 다른 엔터티와 참고관계로 연결되지 않음 스스로 생성 여부 내부식별자 : 엔터티 내부에서 스스로?(처음) 생성된 식별자. 외부식별자 : 다른 엔터티에서 온 식별자, 다른 엔터티와의 연결고리 역할 단일 속성 여부 단일식별자 : (하나의 엔터티 내) 하나의 속성 식별자 복합식별자 : (하나의 엔터티 내) 두 개 이상의 식별자 대체 여부 원조식별자 : 업무 프로세스에 존재하는 식별자. 가공되지 않은 원래의 식별자 (본질 식별자) 대리식별자 : 주식별자의 속성이 두 개 이상인 경우 그 속성들을 하나로 묶어서 사용하는 식별자(인조식별자) ","date":"2023-10-02","permalink":"/devl/db/005/","section":"Developer Course","summary":"각 문제를 풀면서 새롭게 안 사실 + 개념 복습","title":"데이터 모델링의 이해 - 문제 풀이"},{"content":"데이터 모델의 이해 #1. 데이터베이스에서 모델링이란? # 현실 세계를 반영 단순화하여 표현 관리하고자 하는 데이터 모델로 설계 2. 모델링의 특징 # 추상화(Abstraction) : 아이디어나 개념을 간략하게 표현하는 과정 단순화(Simplification) 명확화(Clarity) 3. 모델링의 세 가지 관점 # 데이터 관점 (What, Data) 데이터의 업무와의 상관도, 데이터 간의 관계에 따른 모델링 프로세스 관점 (How, Process) 업무의 지향점과 업무 과정에 따른 모델링 데이터와 프로세스의 상관 관점(Data vs.Process, Interaction) 프로세스 흐름에 따라 데이터가 어떤 영향을 받는지 모델링 4. 데이터 모델링의 세가지 단계 # flowchart LR classDef basic fill:#D1E4F6, stroke:#0F477E, stroke-width:0px, color:#0F477E, font-size:14px md1(개념적 모델링):::basic md2(논리적 모델링):::basic md3(물리적 모델링):::basic md1--\u0026gt;md2--\u0026gt;md3 머메이드 연습 겸.. 개념적 데이터 모델링 : 추상화 레벨이 가장 높고 업무 중심적 포괄적 수준의 모델링 단계 논리적 데이터 모델링 : 재사용성이 가장 높은 모델링. 데이터 베이스 모델에 대한 Key,속성, 관계를 모두 설정하는 단계 물리적 데이터 모델링 : 실제 데이터 베이스로 구현할 수 있도록 성능이나 가용성 등의 물리적인 성격을 고려하여 모델을 표현하는 단계 5. 데이터의 독립성 # 3단계 스키마 구조\n외부 스키마 : View 단계로 여러 개의 사용자 관점으로 구성 되는 것, DB의 각 사용자나 응용 프로그래머가 접근하는 DB. 개념 스키마 : 모든 사용자 관접을 통합한 조직 전체 관점의 통합적인 표현. 내부 스키바 : 물리적인 저장 구조를 나타내는 것. 3단계 스키마 구조가 보장하는 독립성\n논리적 독립성 : 개념 스키마 변경 ⇨ 외부 스키마에 영향 없음 물리적 독립성 : 내부 스키마 변경 ⇨ 외부/개념 스키마에 영향 없음 6. ERD(Entity Relationshop Diagram) #ERD 표기를 할 수 있는 다양한 방법이 있으나, 주로 IE/Crow's Foot 표기법을 가장 많이 사용함.\nIE/Crow\u0026rsquo;s Foot(까마귀발 표기법) 이렇게 생겼다. erDiagram\nLocation ||\u0026ndash;o{ Person : places\nERD 작성 순서 flowchart LR classDef basic fill:#D1E4F6, stroke:#0F477E, stroke-width:0px, color:#0F477E, font-size:14px pr1( 엔터티 도출 \u0026amp; 그리기 ):::basic pr2( 적절히 엔터티 배치 ):::basic pr3( 엔터티 간의 관계 설정 ):::basic pr4( 관계명 기입 ):::basic pr5( 관계의 참여도 기입 ):::basic pr6( 관계의 필수/선택 여부 기입 ):::basic\npr1--\u0026gt;pr2--\u0026gt;pr3--\u0026gt;pr4--\u0026gt;pr5--\u0026gt;pr6 시스템 분석을 위한 모델링의 기능 시스템이 향후 변화하고자 하는 모습으로 가시화 해준다. 시스템을 구축하는 과정에서 결정한 것을 문서화한다. 시스템의 구조와 행동을 명세화 해준다. 엔터티(Entity) #데이터베이스에서 엔터티 정의 # 식별이 가능한 객체 업무에서 쓰이는 데이터를 용도별로 분류한 그룹 명확한 조건이 기준이 되어야 함 (모호한 기준x) 각각의 엔터티는 자신을 나타내는 속성(Attribute)을 가짐. 속성의 수는 엔터티마다 상이. 간단하게 생각하자면\n엔터티 ⇨ 테이블 인스턴스 ⇨ ROW (레코드 같은 개념) 속성 ⇨ Column 엔터티의 특징 # 업무에서 쓰이는 정보로 사용 유니크함을 보장할 수 있는 식별자 필요(ex, 상품 코드, 모델명 등) 2개 이상의 인스턴스(ROW)를 가지고 있어야 함. (1개의 인스턴스는 엔터티로 볼 수 없다) 반드시 속성을 가지고 있어야 함.(속성 없는 엔터티는 깡통) 다른 엔터티와 1개 이상의 관계를 가지고 있어야 함 엔터티의 분류 # 유형 vs 무형에 따른 분류 유형 엔터티 개념 엔터티 사건 엔터티 물리적인 형태 존재\n안정적, 지속적 물리적인 형태 없음\n개념적 행위를 함으로써 발생\n빈번함, 통계자료로 이용 가능 ex) 상품, 회원 ex) 부서, 학과 ex) 주문, 이벤트 응모 발생 시점에 따른 분류 기본 엔터티 중심 엔터티 행위 엔터티 독립적으로 생성\n자식 엔터티를 가질 수 있음 기본 엔터티에서 파생\n행위 엔터티 생성 2개 이상의 엔터티로부터 파생 ex) 상품, 회원 ex) 주문 ex) 주문 내역, 이벤트 응모 이력 엔터티 이름을 정할 때 주의할 점 # 업무에서 실제로 쓰이는 용어 사용\n한글을 약어 사용 x, 영문은 대문자로 표기\n단수 명사로 표현, 띄어쓰기 x\n다른 엔터티와 의미상으로 중복될 수 없음\n해당 엔터티가 갖고 있는 데이터가 무엇인지 명확하게 표현\n아래 엔터티명의 문제점\n집계 : 무엇을 집계했는지 불문명하므로 적합하지 않음 ⇨ 주문집계 월매출내역들 : 단수로 명명 ⇨ 월매출내역 주문한 회원 : 띄어쓰지 하지 않음 ⇨ 주문회원 속성(Attribute) #속성이란? # 엔터티의 특징을 나타내는 최소의 데이터 단위\n의미상 더 쪼개질 수 없어야 함\n프로세스에 필요한 항목 일 것\n\u0026lsquo;가격변경 이력\u0026rsquo;은 속성이 될 수 있는가? ⇨ 이력은 속성이 아니라 별도의 엔터티가 돼야 함.\n속성 값 # \u0026lsquo;이름\u0026rsquo; ➡ 속성 / \u0026lsquo;매즈미켈슨\u0026rsquo; ➡ 속성값 하나의 속성은 한개의 속성값만 가짐. 그렇다면 하나의 속성에 속성값 여러개일 경우는? ⇨ 별도의 엔터티를 만들면 됨.\nex) \u0026lsquo;매즈미켈슨 \u0026lsquo;의 직업이 여러개일 경우\n이름 생년월일 매즈미켈슨 1965. 11. 22 ⇓ 이름 직업 매즈미켈슨 배우 매즈미켈슨 가수 매즈미켈슨 작곡가 엔터티 ⊃ 인스턴스 ⊃ 속성 # 한 개의 엔터티는 두 개 이상의 인스턴스를 가짐 한 개의 인스턴스는 두 개 이상의 속성을 가짐 한 개의 속성은 하나의 속성값을 가짐 erDiagram\n\u0026ldquo;엔터티\u0026rdquo; ||\u0026ndash;|{ \u0026ldquo;인스턴스\u0026rdquo; : \u0026quot; \u0026quot; \u0026ldquo;인스턴스\u0026rdquo; ||\u0026ndash;|{ \u0026ldquo;속성\u0026rdquo; :\u0026quot; \u0026quot; \u0026ldquo;속성\u0026rdquo; ||\u0026ndash;|| \u0026ldquo;속성값\u0026rdquo; :\u0026quot; \u0026quot;\n속성 분류 (특성, 구성방식) # 특성에 따른 속성 분류\n기본 속성 : 업무 프로세스 분석을 통해 바로 정의가 가능한 속성 ex) 이름, 학과, 학년 등 설계 속성 : 설계 시 필요로 의해 도출된 속성 (* 업무에 존재하지는 않음) ex) 학번이라는 속성을 만들어 유니크함을 보장. 파생 속성 : 다른 속성의 값을 계산 또는 특정한 규칙으로 변형된 속성 누락 등, 결과값이 제대로 도출 되지 않을 우려가 있어 불가피하게 필요할 경우 설정. 데이터 조회 시 빠른 성능을 보장하기 위해 본래의 속성값을 계산하여 따로 저장할 수 있음. ex) 이벤트 응모건 수 주의 주민등록번호는 설계 속성이 아닌 기본속성.\n* 주민등록번호는 개인 정보를 식별하거나 연결하는 데 있어 중요한 역할을 하는데, 개인 정보 보호 측면에서 민감한 정보이기 때문에 모델의 설계 속성으로 사용하는 경우 주의깊게 고려하고 적절한 보안 및 개인정보 보호 조치를 취해야 한다고 함. 구성 방식에 따른 속성 분류 PK (Primary Key) 엔터티의 인스턴스들을 식별할 수 있는 속성. 인스턴스에 유니크함 부여 ex) 회원번호, 학번, 사번 FK (Foreign Key) 다른 엔터티의 속성에서 가져온 속성 다른 엔터티와 관계를 맺게 해주는 매개체 역할 다른 엔터티의 PK값과 일치하거나 NULL값을 가질 수도 있음 ex) 직원 부서 코드, 학생 엔터티의 학과코드 등 일반 속성 : PK, FK 를 제외한 나머지 ex) 상품 엔터티의 상품명, 가격 등 도메인 # 도메인 : 속성이 가질 수 있는 속성값의 범위 우편번호 예) flowchart LR classDef basic fill:#D1E4F6, stroke:#0F477E, stroke-width:0px, color:#0F477E, font-size:14px\ni1(우편번호):::basic i2(다섯자리 숫자):::basic i3(엔터티 정의):::basic i4(데이터 타입):::basic i5(데이터 크기):::basic i1--\u0026gt;i2--\u0026gt;i3 i3--\u0026gt;i4 i3--\u0026gt;i5 기타 # 용어사전 하나의 데이터베이스에서 같은 의미를 가진 데이터가 엔터티마다 다른 명의로 정의되면 혼란을 초래.\n이를 방지 하기 위해 설계 시 용어사전을 두고 각 엔터티에 공통된 룰로 적용\n관계 #관계란? #엔터티와 엔터티의 관계\nflowchart LR classDef basic fill:#D1E4F6, stroke:#0F477E, stroke-width:0px, color:#0F477E, font-size:14px\ncon1(고객):::basic con2(메뉴):::basic\ncon1\u0026ndash; \u0026ldquo;주문한다\u0026rdquo; \u0026ndash;\u0026gt; con2\n존재 관계 : 엄마와 아기처럼 존재 자체로 연관성이 있는 관계 ex) 직원과 부서, 학생과 학과 행위 관계 : 특정한 행위를 함으로써 연관성이 생기는 관계 ex) 회원과 주문, 학생과 출석부, 상품과 주문상품(주문된다 라는 행위) erDiagram\n\u0026ldquo;(학생)이하빈\u0026rdquo; }o\u0026ndash;|| \u0026ldquo;학과\u0026rdquo; : \u0026ldquo;소속된다\u0026rdquo;\n\u0026ldquo;(학생)이하울\u0026rdquo; ||\u0026ndash;o{ \u0026ldquo;(출석부)데이터베이스\u0026rdquo; : \u0026ldquo;출석한다\u0026rdquo;\n존재 관계 행위 관계\n까마귀발 방향에 유의하자. 표기법 # 관계명 관계차수 : 관계에 참여하는 수 관계선택사양 : 필수인지 선택인지 여부 관계명 # 엔터티와 엔터티가 어떠한 관계를 맺고 있는지 나타내주는 문장 모든 관계는 두 개의 관계명을 가지고 있음. (각 엔터티마다 1개의 관계명 관계명은 반드시 명확한 \u0026lsquo;문장\u0026rsquo;으로 현재형으로 표현. ⭕ 주문한다/소속된다/츨석을 한다 ❌️ 연관성이 있다/관계가 있다/출석을 했다 관계차수 # 각 엔터티 관계에 참여하는 수를 의미 1:1 1:M M:N erDiagram\n\u0026ldquo;회원\u0026rdquo; ||\u0026ndash;|| \u0026ldquo;회원상세\u0026rdquo; : \u0026quot; \u0026quot;\n\u0026ldquo;상품\u0026rdquo; ||\u0026ndash;o{ \u0026ldquo;상품가격 이력\u0026rdquo; : \u0026quot; \u0026quot;\n\u0026ldquo;학생\u0026rdquo; }|\u0026ndash;o{ \u0026ldquo;수강생\u0026rdquo; : \u0026quot; \u0026quot;\n**1:1** **1:M** **N:M** 관계선택사양 # 필수적 관계 : 주문과 주문상품 선택적 관계 : 학생과 출석부 식별자 #모든 엔터티는 인스턴스를 가지고 있고, 인스턴스는 속성으로 자신의 특성을 나타냄. 각각의 인스턴스를 구분 가능하게 만들어주는 대표 속성을 식별자로 함.\nex) 학번, 군번, 사번\n주식별자 # 기본키(PK)에 대한 속성이다. 여러 개의 속성도 주식별자 가능 유일성 : 각 인스턴스에 식별이 가능한 유니크함을 부여 최소성 : 유일성을 보장하는 최소 개수의 속성 불변성 : 속성 값이 변하지 않아야 함 존재성 : NULL 이 될 수 없음 식별자 분류 # 대표성 여부 주식별자 보조식별자 * 유일성, 최소성, 불변성, 존재성을 가진 대표 식별자\n* 다른 엔터티와 참조 관계로 연결됨 * 인스턴스를 식별할 수 있지만 대표식별자는 아님\n* 다른 엔터티와 참조 관계로 연결되지 않음 스스로 생성되었는지 여부 내부식별자 외부식별자 * 엔터티 내부에서 스스로 생성된 식별자 * 다른 엔터티에서 온 식별자\n* 다른 엔터티와 연결고리 역할 단일 속성 여부 단일식별자 복합식별자 하나의 속성으로 구성됨 두 개 이상의 속성으로 구성됨 대체 여부 원조식별자(본질식별자) 대리식별자(인조식별자) * 업무프로세스에 존재하는 식별자 * 가공되지 않은 원래의 식별자 * 주식별자의 속성이 두 개 이상인 경우 그 속성들을\n하나로 묶어 사용하는 식별자 식별자 관계와 비식별자 관계 # 식별자 관계 부모 엔터티의 식별자가 자식 엔터티의 주 식별자가 되는 관계 주식별자는 반드시 존재해야하므로 부모 엔터티가 있어야 생성 가능 복합식별자의 경우 1:1이나 1:M 비식별자 관계 부모 엔터티의 식별자가 자식 엔터티의 주식별자가 아닌 일반 속성이 되는 관계 일반 속성 값은 Null 이 될 수 있으므로 부모 엔터티가 없는 자식 엔터티 생성 가능 자식 엔터티가 존재하는 상태에서 부모 엔터티 삭제 가능 erDiagram \"게시글\" ||--o{ \"댓글\" : \" \" \"게시글\" { int list_no PK string title string content string writer } \"댓글\" { int list_no FK int comment_no PK string content string writer } \u0026quot;주문번호\u0026quot; ||..o{ \u0026quot;상품\u0026quot; : \u0026quot; \u0026quot; \u0026quot;주문번호\u0026quot; { int order_no PK int product_code FK int quantity } \u0026quot;상품\u0026quot; { int product_code PK string product_name string buyprice } 식별자 관계 비식별자 관계 ","date":"2023-10-01","permalink":"/devl/db/004/","section":"Developer Course","summary":"데이터 모델의 이해 #1.","title":"데이터 모델링의 이해"},{"content":"","date":null,"permalink":"/categories/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0/","section":"Categories","summary":"","title":"자료구조"},{"content":"11번 문제 #다음 중 선형 구조로만 묶인 것은?\n스택, 트리 큐, 그래프 큐, 데크 리스트, 그래피 나의 답 3) 큐, 데크 솔직히 데크가 뭔진 몰라도 답이 3번인 것은 알겠다. 이제 데크가 뭔지 알아보자. 알아야 할 것과 정리\n데크(Deque) # Double-Ended Queue 줄임말로 양쪽 끝에서 데이터를 추가/반환/삭제가 가능한 자료구조 스택과 큐의 특징을 모두 가지고 있음. 배열도 가능하지만 일반적으로 이중 연결 리스트(Double Linked List)로 구현. 데크의 종류 스크롤(입력 제한 데크) : 한쪽의 입력을 제한한 데크 셀프(출력 제한 데크) : 한쪽의 출력을 제한한 데크 #12번 문제 #Which of the following is a linear list in that elements are accessed, created and deleted in a last in – first out order?\nStack Queue Graph Tree 영어 너무 싫다.\nlinear list : 일단 선형을 찾는 것이기 때문에 3,4번 탈락 in a last in – first out : 후입선출 나의 답 1) Stack #13번 문제 #정렬 알고리즘을 선택할 때 고려사항으로 거리가 먼 것은?\n키값의 분포 상태 소요 공간 및 작업 시간 증가 데이터의 배열 상태 정렬에 필요한 기억 공간의 크기 뭔가 다 맞는 말 같아서 찾아봐야겠다. 블로그 자료들이 모호해서 그냥 GPT 썼다.\n정렬 알고리즘을 선택할 때 고려해야할 점 # 소요 시간 (Time Complexity) 정렬 알고리즘의 소요 시간은 중요한 고려 요소입니다. 어떤 알고리즘을 선택하느냐에 따라 정렬에 필요한 시간이 크게 달라질 수 있습니다. 일반적으로 빠른 알고리즘을 선호합니다. 메모리 사용량 (Space Complexity) 알고리즘의 메모리 사용량도 고려해야 합니다. 몇몇 알고리즘은 추가 메모리를 요구할 수 있으므로 사용 가능한 메모리에 따라 선택해야 합니다. 데이터 분포 (Data Distribution) 정렬할 데이터가 어떤 분포를 가지고 있는지 고려해야 합니다. 데이터가 거의 정렬되어 있거나 역순으로 정렬되어 있을 때에도 잘 작동하는 알고리즘을 선택하는 것이 중요합니다. 안정성 (Stability) 안정성은 정렬 알고리즘의 특성 중 하나입니다. 안정적인 알고리즘은 동일한 키 값을 가지는 요소들의 순서가 정렬 전과 동일하게 유지됩니다. 비교 기반 vs. 비교 미기반 (Comparison vs. Non-comparison) 비교 기반 정렬 알고리즘은 요소들을 비교하여 정렬하는 방식이며 일반적으로 O(nlogn)의 시간 복잡도를 가집니다. 비교 미기반 정렬 알고리즘은 특정한 데이터 타입에 대해 더 빠른 정렬을 제공합니다. 추가 요구 사항 특별한 요구 사항이 있는 경우, 예를 들어 정렬 중간에 데이터를 더 추가해야 하는 상황이나 정렬된 데이터 중간에 요소를 삭제해야 하는 경우 등을 고려해야 합니다. 알고리즘의 안정성 및 사용 목적 데이터 정렬 알고리즘의 안정성과 사용 목적을 고려해야 합니다. 어떤 상황에서 안정적인 정렬이 필요한지, 빠른 정렬이 필요한지를 고려하여 선택합니다. 자주 사용되는 정렬 알고리즘 자주 사용되는 정렬 알고리즘 중 일반적인 경우에 적합한 것을 선택하는 것도 방법입니다. 이러한 알고리즘 중 몇 가지는 버블 정렬, 삽입 정렬, 퀵 정렬, 합병 정렬, 힙 정렬 등이 있습니다. 오답 (열기) 나의 오답 1) 키값의 분포 상태 답은 과연 1번일 것인가? 결국 틀렸다.\n아래 사이트에 들어가면 정렬 알고리즘의 선택 시 고려사항이 나온다.. https://itwiki.kr/w/%EC%A0%95%EB%A0%AC\n나의 답(재도전) 3) 증가 데이터의 배열 상태 증가 데이터의 배열 상태라는 말이 무슨 말인지 와닿지 않아 고려사항이 맞는지 아닌지 아직도 잘 모르겠다. 스터디시간에 물어보고 다시 정리해놓자. #14번 문제 #다음의 자료를 선택 정렬을 사용하여 오름차순으로 정렬하려 한다. 3회전 후 결과는?\n37, 14, 17, 40, 35 #최소값을 찾아서 맨앞자리와 교체. 맨앞을 제외한 나머지에서 최소값을 두번째 자리와 교체. 같은 방식으로 반복.\n1회차 : 14,37,17,40,35 2회차 : 14,17,37,30,35 3회차 : 14,17,35,40,37 나의 답 2) 14,17,35,40,37 15번 문제 #다음과 같이 오름차순으로 정렬됐을 때 사용한 정렬 기법은?\n초기 상태 : 9, 4, 5, 11, 8, 3, 7 PASS 1 : 4, 5, 9, 8, 3, 7, 11 PASS 2 : 4, 5, 8, 3, 7, 9, 11 PASS 3 : 4, 5, 3, 7, 8, 9, 11 PASS 4 : 4, 3, 5, 7, 8, 9, 11 오답 (열기) 나의 오답 3) 퀵정렬 정렬마다 1회전을 기준이 다른데 잘못 파악하고 있어서 생긴 오답이다. (숫자 자리교체가 일어나면 1회전이 끝난 줄 알았는데 아니었다.)\n각 정렬 1회전 기준 # 삽입 정렬 퀵 정렬 선택 정렬 버블 정렬 여기까지 버블 정렬 1회전 삽입 정렬과, 선택 정렬은 확실히 아닌 걸 알아서 제외했는데. 버블 정렬의 1회전이 저렇게 길 줄이야..\n나의 답 (재도전) 4) 버블 정렬 이미지 출처\nHeee\u0026rsquo;s Development Blog Slow, But Steady ","date":"2023-09-30","permalink":"/devl/study/003/","section":"Developer Course","summary":"11번 문제 #다음 중 선형 구조로만 묶인 것은?","title":"자료구조 문제풀이 - 11~15"},{"content":"16번 문제 #다음 정수들을 순서대로 삽입해서 이진 탐색 트리를 구성했을 떄의 터미널 노드에 해당하는 값들로 옳은 것은?\n보기 \u0026gt; 45, 36, 62, 2, 16, 51, 75, 69\n터미널노드 : 자신의 자식노드가 없는 가장 아랫부분에 위치하는 노드들을 나뭇가지 끝에 붙은 잎과 같다는 의미에서 리프(leaf), 또는 터미널 노드(terminal node)라고 부른다. 직접 그려보았다. 45 / \\ 36 62 / / \\ 2 51 75 \\ / 16 69 나의 답 3) 16, 51, 69 17번 문제 #다음 트리의 차수(Degree)와 터미널 노드의 수를 올바르게 나열한 것은?\n노드의 차수(degree) # A의 차수 : 3 B의 차수 : 2 C, D의 차수 : 1 트리의 차수(degree of tree) # 트리의 최대 차수 (노드의 차수 중 가장 큰 것을 뽑으면 됨.) A가 가장 최대 차수를 가짐 : 3 기타 # 노드의 크기 : 자신을 포함한 모든 자손 노드의 개수 (A의 크기 8, B의 크기: 3) 노드의 깊이 : 루트에서 어떤 노드에 도달하기 위해 거쳐야 하는 간선의 수 (F의 깊이 : 2) 노드의 레벨 : 트리의 특정 깊이를 자기는 노드의 집합 (1레벨 A / 2레벨 B,C,D / 3레벨 E,F,G,E) 트리의 높이 : 루트 노드 중 가장 깊숙히 있는 노드의 깊이 (위 그림은 2) 나의 답 3) 차수 3 / 터미널 노드 수 4 참고사이트 https://worlf.tistory.com/16\n18번 문제 #다음 이진 트리를 전위, 중위, 후위 순회 순서로 방문할 때, 각 순회 7번째에 방문한 노드를 순서대로 나열한 것은?\n알아야 할 것과 정리\n전위, 순위 ,후위는 루트 노드를 몇번째로 탐색하는 지를 생각하면 편하다고 함.\n트리 전위 순회 (= 깊이우선탐색 = 깊이우선순회) # 루트 → 왼쪽 서브트리 전위 순회 → 오른쪽 서브트리 전위 순회 트리 중위 순회 (= 대칭 순회) # 왼쪽 서브트리 중위 순회 → 루트 → 오른쪽 서브트리 중위 순회 솔직히 중위가 제일 헷갈리는데 그냥 Λ Λ Λ Λ Λ 이런 느낌으로 왔다갔다 반복한다고 생각하니 할만했다 트리 후위 순회 # 왼쪽 서브트리 후위 순회 → 오른쪽 서브트리 후위 순회 → 루트 다시 문제로 돌아가서\n전위 순서 : A-B-D-F-C-E-G-H 중위 순서 : B-D-F-A-C-G-E-H 후위 순서 : F-D-B-G-H-E-C-A 나의 답 1) G/E/C 이미지\u0026amp;내용 출처\nhttps://withhamit.tistory.com/282 https://blog.naver.com/sedi1017/223144612932 19번 문제 #해싱을 이용한 파일 구조로 옳은 것은?\n순차 파일 다중 키 파일 직접 파일 색인 순차 파일 알아야 할 것과 정리\n자료 구조 - 형태에 따른 분류 # 파일 : 고유한 이름을 갖는 것. 관련 정보 단위의 집합.\n파일 시스템\n보조 기억 장치에 저장돼 있는 파일들을 관리해주는 총제적인 기술 쳬계를 의미 컴퓨터에서 파일이나 자료를 쉽게 발견 및 접근할 수 있도록 보관 또는 조직하는 체제 일반적으로는 HDD, CD-ROM같은 물리적인 것들을 가리킴. 깊게는 파일 서버 상의 자료로의 접근을 제공하는 방식, 가상의 형태로서 접근 수단만이 존재하는 방식도 파일시스템 범위에 포함. 너무 깊어서 익사하는 줄.. 빠르게 넘어가자\n파일 구조란? (GPT야, 아주 쉽게 설명해줘~) # 데이터를 파일에 저장하고 그 데이터를 읽고 쓰기 위한 논리적인 조직 방식 파일은 일반적으로 0과 1로 이루어진 이진 데이터로 저장됩니다. 이진 데이터를 사용자가 이해하고 다루기 어렵기 때문에 파일 구조는 데이터를 보다 읽기 쉽고 이해하기 쉽게 구성하는 방법을 제공합니다.예를 들어, 텍스트 파일은 문자열 데이터를 줄 단위로 구조화하여 저장하는 파일 구조를 갖습니다. 각 줄은 텍스트로 표현된 데이터를 포함하고 있으며, 줄 바꿈 문자로 구분됩니다. 이러한 파일 구조는 텍스트 편집기에서 텍스트를 읽고 수정하기 용이하게 만들어줍니다. 데이터베이스 파일은 테이블, 레코드, 필드와 같은 구조로 데이터를 저장하며, 이러한 파일 구조는 데이터를 효율적으로 검색하고 관리하기 위한 방법을 제공합니다. 데이터에 접근하는 연산에 관한 것을 다룸 텍스트 파일의 경우, 데이터는 문자열이 줄 단위로 저장되어 있고 각 줄은 개행 문자로 분리됩니다. 파일 구조가 이렇게 설계되면 데이터를 읽고 쓰기가 쉽고, 줄 단위로 데이터에 접근할 수 있습니다. 데이터베이스 파일의 경우, 데이터는 테이블, 레코드 및 필드로 구성되며, 파일 구조는 데이터베이스 관리 시스템(DBMS)에서 정의됩니다. 이 구조에 따라 데이터를 삽입, 갱신, 삭제 및 검색하는 연산을 수행할 수 있습니다. 파일 안에 저장된 데이터의 형태와 레코드 간의 관계를 결정 데이터를 효과적으로 접근하고 처리하는 방법을 정의 각 파일 구조는 특정 응용프로그램 또는 사용 사례에 가장 적합한 방식으로 데이터를 저장 및 관리 가끔은 내용이 좀 길어도 이해만 잘되면 괜찮다고 생각한다.\n주요 파일 구조 # 순차 파일(Sequential File) 데이터가 일렬로 연속적으로 저장 순차 접근만 가능(판독 시에도 마찬가지) 모든 데이터가 순서대로 기록됨 -\u0026gt; 저장공간의 낭비가 없음 새로운 데이터를 삽입하거나, 삭제할 때 시간이 많이 걸림. 검색 효율 떨어짐 사용 주로 순차적 시간 흐름에 따라 기록하는 로그 파일 미디어 스트리밍 로그, 주문 이력 로그 등 인덱스 파일(= 색인 파일 = Indexed File) 데이터가 키+값 세트로 저장됨 키를 사용하여 레코드에 빠르게 접근 가능 검색 속도가 빠르고 레코드 수정 및 삭제가 용이 사용 주로 데이터베이스에서 레코드에 대한 빠른 검색 제공(B-트리, B+ 트리 인덱스) 학생 성적 관리 시스템에서 ID로 성적 검색 직접 파일(= 임의 접근 화일 = Direct File) 레코드 단위로 저장됨. 레코드마다 고유 key를 가짐. 해싱 함수(Hashing Function)를 이용하여 키에 대한 보조기억장치의 물리적 상대 레코드 주소를 계산한 후 해당하는 주소에 레코드를 저장한다. 레코드는 해싱함수에 의해 계산된 무리적 주소를 통해 접근 가능 사용 레코드 위치를 직접 지정하거나 읽거나 쓸 수 있어 빠른 데이터 액세스 가능 이진 파일 또는 바이너리 파일로 사용됨 그림 파일, 멀티미디어 파일 저장에 사용. 주식 거래 시스템에서 주식 가격 데이터를 저장하고 빠르게 검색. 인덱스 순차 파일(= 색인 순차 파일 = Indexed Sequential File) 색인+순차 파일 결합으로 데이터를 해시 테이블에 저장 키를 사용한 레코드 검색과 순차적 접근을 모두 지원. 사용 대용량 데이터 파일에서 특정 조건에 맞는 레코드 검색 시 사용 도서 대출 목록을 저장하고 대출일, 도서ID 등으로 검색 사용 물류 시스템에서 제품 인벤토리 정보를 저장하고 제품 ID 검색. 해시 파일(Hash File) 데이터를 해시 함수를 사용하여 저장. (⇨ 해싱) 주어진 키에 해당하는 데이터를 빠르게 찾을 수 있으며, 검색 시간이 상수 시간에 가깝다. (해시 함수를 사용하여 빠르게 검색) 사용 DB에 비밀번호 저장. 복제 문서 판별 파일 캐싱과 같은 시스템에서 데이터 검색 및 저장에 사용. 해시 사용 예 https://m.blog.naver.com/mage7th/221493776888 검색 시간이 상수 시간에 가깝다?\n⇨ 데이터 구조나 알고리즘이 특정 작업을 수행하는 데 걸리는 시간이 입력 데이터의 크기에 무관하게 일정하다는 것을 의미 ⇨ 즉, 입력 데이터의 크기가 커져도 검색 시간이 일정하게 유지됨. 파일 캐싱 나중에 동일한 데이터에 빠르게 액세스 할 수 있도록 내 컴퓨터에 데이터를 저장하는 것. 웹 페이지에 표시되는 이미지와 리소스는 내 컴퓨터에 캐시됨 ⇨ 다음 번 같은 웹 페이지를 방문 시, 내 컴퓨터의 캐시에서 이 데이터를 가져와서 웹 페이지를 더 빠르게 로드함. 데이터베이스에서 쿼리 결과를 캐시에 저장하면 동일한 쿼리 반복 시 빠른 응답 제공됨. 뭔가 쿠키도 비슷한 거 아니었나? 찾아봄. 쿠키 웹 서버와 웹브라우저 간의 정보 교환을 위한 작은 데이터 조각 주로 사용자의 웹 경험을 개선하거나 사용자를 추적, 인증 정보를 저장하는 데 사용 쿠키는 브라우저에서 관리됨. ex) 로그인 정보 저장, 쇼핑카트 내용을 기억 다.름. 문제로 다시 돌아가서\n단일 키 파일 # 순차 파일 : 기본키에 따라 정렬된 순차 접근 지원 직접 파일 : 기본키에 따라 해싱 결과로 직접 접근 지원 색인순차 파일 : 기본키에 대해 만들어진 인덱스를 통해 직접 접근 및 키 값에 따른 순차 접근 지원 다중 키 파일 # 하나의 데이터 파일에 대해 여러 다른 탐색 키를 이용하여 여러 접근 경로를 제공 사용되는 키는 보조키가 됨 보조키는 레코드가 유일하지 않을 수도 있음 나의 답 3) 직접 파일 19번 문제 풀면서 깨달은 점 : gpt 맹신하지 말자. 조장님이 늪에서 구해주심. 이미지\u0026amp;내용 출처\nhttps://developerjun2.tistory.com/149 20번 문제 #해시 함수 중 주어진 키를 여러 부분으로 나누고, 각 부분의 값을 더하거나 배타적 논리합 연산을 통해 출력된 결과로 주소를 취하는 방법은?\n기수 변환법 중간 제곱 방법 제산 방법 중첩 방법 알아야 할 것과 정리\n해시 # 주어진 키를 이용해 실제 레코드 주소를 직접적으로 계산해 내는 것 데이터 개수 n개와 무관하게 데이터를 빨리 찾기 위한게 궁극적임. 탐색 효율 O(1)을 지향한다고 함. 키를 입력하면 해시함수를 통해서 해시테이블의 인덱스로 바로 접근함. 정적 해싱 구현 기법 # 기수 변환법 : 어떠한 진법으로 변환된 키를 다른 진법으로 간주하고 키를 변환하여 버킷 주소를 얻는 방법\n중간 제곱 방법 : 레코드 키 값을 제곱한 후에 결과 값의 중간 부분에 있는 몇 비트를 선택하여 해시 테이블의 홈 주소로 사용\n제산 방법 : 레코드키를 해시표의 크기보다 큰 수 중에서 가장 작은 소수로 나눈 나머지를 버킷 주소로 결정하는 방법\n무작위 방법 : 난수 발생 프로그램을 이용하여 난수를 발생시켜 키의 버킷주소를 결정하는 방법\n폴딩법(중첩 방법) : 키를 마지막 부분을 제외한 모든 부분의 길이가 동일하게 여러부분으로 나누고, 이들 부분을 모두 더하거나 XOR(배타적 논리합) 연산을하여 버킷 주소로 이용하는 방법\n경계 폴딩 : 원래의 키값을 여러부분으로 나눈 후, 나누어진 각 부분의 경계선을 종이 접듯이 접어 역으로 정렬한 후 같은 자리에 위치한 수를 더한 값을 버킷 주소로 사용하는 방법\n숫자 분석법(계수 분석법) : 키를 구성하는 수들이 모든 키들 내에서 각 자리별로 어떤 분포인지를 조사하여 비교적 고른 분포를 나타내는 자릿 수를 필요한만큼 선택하여 버킷 주소로 사용하는 방법\nXOR(배타적 논리합(排他的論理合, exclusive or)\n수리 논리학에서 주어진 2개의 명제 가운데 1개만 참일 경우를 판단하는 논리 연산이다. 약칭으로 XOR, EOR, EXOR라고도 쓴다. 정적 해싱 외에도 동적 해싱 및 확장 해싱이 있다. 자세한건 아래 링크를 ..\nhttps://dev-kani.tistory.com/2 더이상 깊게 빠져들지 않을래.. 힘들어 나의 답 4) 중첩 방법 ","date":"2023-09-30","permalink":"/devl/study/004/","section":"Developer Course","summary":"16번 문제 #다음 정수들을 순서대로 삽입해서 이진 탐색 트리를 구성했을 떄의 터미널 노드에 해당하는 값들로 옳은 것은?","title":"자료구조 문제풀이 - 16~20"},{"content":"21번 문제 #Which data structure best represents the day of the week (Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday)?\nLiked List Array Gragh Tree 음.. 요일 순서는 선형 구조를 쓰되, 굳이 수정할 일이 없으니 수정에 자유로운 LikedList 보다 좀더 정적?인 Array가 아닐까?\n영어는 딱 이 정도로만 나왔으면 좋겠네.. 나의 답 2) Array 22번 문제 #삽입과 삭제가 양쪽 끝에서 이루어지고, 두 개의 포인터를 사용하는 선형 자료구조는?\n나의 답 2) Deque 앞에서 내용 정리 했음. 23번 문제 #비선형구조와 선형구조를 올바르게 짝지은 것은?\n㉠ 스택(Stack) ㉡ 큐(Queue) ㉢ 그래프(Graph) ㉣ 트리(Tree) ㉤ 연결리스트(Linked List)\n선형 : 스택, 큐, 연결리스트 비선형 : 그래프 , 트리 나의 답 2) 비선형 : ㉢, ㉣ / 선형 : ㉠,㉡,㉤ 역시 앞에서 내용 정리 했음. 24번 문제 #희소 행렬을 연결리스트(Linked List)로 표현할 때 가장 큰 장점은?\n기억 장소가 절약된다. 임의 위치 액세스가 가능하다. 이진 검색(Binary Search)이 가능하다. 행렬 간의 연산 시간을 줄일 수 있다. 알아야 할 것과 정리\n희소 행렬(=성긴 행렬 = Sparse Matrix) # 희소 행렬이란 행렬 안의 많은 항들이 0으로 되어있는 행렬. 희소 행렬의 예 위 성긴 행렬은 35개중 26개가 0이고 9개만이 0이 아니다 희소행렬 반대 개념 ↔ 밀집 행렬, 조밀 행렬 희소 행렬의 자료구조 저장법 # List of lists (LIL) 링크드 리스트 알고리즘을 이용한 저장 기법 내용의 추가, 삭제가 용이 행렬의 연산들을 간단하게 구현 링크드 리스트로 표현하면 기억장소(ex, HDD)가 절약된다. 아래 다른 저장법인 CSR과 CSC에 비해 메모리가 낭비됨. Dictionary of keys Coordinate list (COO) Compressed sparse row (CSR or CRS) Compressed sparse column (CSC or CCS) 문제에서는 LinkedList만을 다뤘기 때문에 2~5번은 나중에 필요할 때 찾아보기로.\n나의 답 1) 기억 장소가 절약된다. 자료 출처\n성긴 행렬 https://ko.wikipedia.org/wiki/%EC%84%B1%EA%B8%B4_%ED%96%89%EB%A0%AC#cite_note-3 연결 리스트 https://m.blog.naver.com/PostView.naver?isHttpsRedirect=true\u0026blogId=davidoff73\u0026logNo=30028621356 25번 문제 #다음과 같이 주어진 후위 표기 방식의 수식을 중위 표기 방식으로 나타낸 것은?\nA B C - / D E F + * +\n(A-B)/C+D+E*F A/(B-C)+D+E*F A/(B-C)+D*(E+F) A/(B-C)+F*E+D 피연산자를 만나면, 피연산자를 Stack에 Push한다. 연산자를 만나면 피연산자 2개를 Pop해 적절히 조합한다. 이 값을 다시 스택에 Push하고 위 과정 반복 일단 위 규칙대로 STACK에 담아 트리를 만들어본다.\n'적절히'라는 표현이 모호해서 할 수 있을까 싶었는데.. 진짜 적절히.. 조합하면 된다. 설명하기 복잡해서 직접 그렸다! 이렇게 고생까지 했는데 틀리면 ㅜㅜ 나의 답 3) A/(B-C)+D*(E+F) 26번 문제 #다음 트리를 후위 순회(Post-order)할 경우의 탐색 순서를 올바르게 나열한 것은?\n바..방금까지 열심히 그린거네? 10초컷 나의 답 2) D-E-B-F-C-A 27번 문제 #해싱에서 충돌로 인해 동일한 홈 주소를 갖는 레코드들의 집합을 의미하는 용어는?\nOverflow Collision Bucket Synonym 알아야 할 것과 정리\n해싱(Hashing) 관련 용어 # Hash Collision (해시 충돌) : 다른 레코드가 같은 키를 가지는 충돌 현상. 레코드는 버킷의 다음 슬롯에 들어가게 됨. 서로 다른 키를 가진 레코드들이 하나의 버킷에 매핑되는 경우 해시 함수의 충돌은 해싱의 검출 속도를 떨어뜨림 버킷 오버플로우가 발생 Bucket : 하나의 주소를 갖는 파일의 한 구역 Synonym (동의어) : 충돌이 일어난 레코드의 집합. 키값이 같은 레코드의 집합으로, 동의어가 슬롯의 갯수보다 많으면 오버플로우가 일어날 수 있음. Overflow : 한 홈 주소의 버킷 내에 더이상의 레코드를 저장할 슬롯이 없는 상태 Slot : 한개의 레코드를 저장 할 수 있는 공간. 한 버킷 안에 여러개의 슬롯이 있음. Hash table : 해시 함수가 키값을 생성할때 참조하는 테이블 Home address : 해시 함수에 의해 변환된 키값의 주소 Hash Function : 데이터를 키로 변환하는 함수. ex) 길고 복잡한 문자열을 짧고 단순한 문자열로 변경 나의 답 4) Synonym 자료 출처 데이터베이스-해싱Hashing-관련-용어\n28번 문제 #아래의 함수를 통해 주어진 배열을 오름차순으로 정렬하는 정렬 연산을 수행하고자 한다. 4회전 직후 배열의 중간 정렬 결과로 옳은 것은? (단, n은 항목의 개수이다.)\n5, 3, 8, 4, 9, 1, 6\nvoid sort(int list[], int n) { int i, j, key; for(i=1; i＜n; i++) { key = list[i]; for(j=i-1; j＞=0 \u0026amp;\u0026amp; list[j]＞key; j--) list[j+1] = list[j]; list[j+1] = key; } } 일단 첫번째 for문에서 i = 1 이고, key = list[i]을 지정해 줬다는 것은 배열에서 두번째 요소부터 비교를 시작하겠다는 것이다. 두번째 요소부터 비교를 시작하는 정렬은 \u0026lsquo;삽입 정렬\u0026rsquo;이 있다.\n1회전 : 3-5-8-4-9-1-6 2회전 : 3-5-8-4-9-1-6 \u0026gt; 세번째 요소가 위치 이동이 필요없기때문에 이대로 2회전 종료 3회전 : 3-4-5-8-9-1-6 4회전 : 3-4-5-8-9-1-6 \u0026gt; 다섯번째 요소가 위치 이동이 필요없기때문에 이대로 4회전 종료 나의 답 2) 3-4-5-8-9-1-6 29번 문제 #연결리스트에 다음과 같이 데이터가 저장되어있을 때, 리스트에 저장된 원소를 순서대로 바르게 나열한 것은?\n주소 데이터 다음노드주소링크 100 31 NULL 104 41 116 108 59 112 112 26 104 116 53 100 연결 리스트에 대한 개념이 없어도 풀 수 있는 친절한 문제다. 너무 친절해서 수상하게 느껴질 정도.\n다음 노드 주소 링크를 참고해서 주소 순서를 나열하면 108 → 112 → 104 → 116 → 100 그대로 데이터 값을 넣어주면 59 → 26 → 41 → 53 → 41 알아야 할 것과 정리\nLinked List(연결 리스트) # 각 노드가 데이터와 포인터를 가지고 한 줄로 연결되어 있는 방식 노드의 포인터가 다음이나 이전의 노드와의 연결을 담당 늘어선 노드의 중간 지점에서도 자료의 추가와 삭제가 O(1)의 시간에 가능함 배열이나 트리 구조와는 달리 특정 위치의 데이터를 검색해 내는데에는 O(n)의 시간이 걸림. 연결 리스트 종류 단일 연결 리스트 이중 연결 리스트 원형 연결 리스트 나의 답 1) 59 - 26 - 41 - 53 - 31 30번 문제 #트리 표현에 가장 적합한 자료구조는?\n위 24번 문제를 풀면서 참고했던 블로그에서 연결리스트는 트리를 만들기 가장 적합하다는 글을 봤다.\n더 아는 건 없고 그거 하나 때문에..\n연결 리스트 나의 답 2) Linked List 알아야 할 것과 정리\nCircular Queue (원형 큐 자료구조) # 선형 큐의 문제점을 보완하기 위한 자료구조 (큐의 일종) 배열에 데이터를 저장하는 방식 원형 큐는 front(첫번째 데이터), rear(마지막 데이터) 두 개의 인덱스 변수가 존재 데이터의 맨 앞과 맨 뒤 위치를 기억하기 때문에 기존의 큐처럼 데이터를 매번 한 칸씩 당겨오지 않아도 공간이 허락하는 한 데이터를 빠르게 처리 자료 출처 원형 큐(Circular Queue) 알아보기\n드디어 끝났다.\n많이 참아 준 우리 귤이 사진💙 으로 마무리 # ","date":"2023-09-30","permalink":"/devl/study/005/","section":"Developer Course","summary":"21번 문제 #Which data structure best represents the day of the week (Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday)?","title":"자료구조 문제풀이 - 21~30"},{"content":"항상 팀원의 성장을 바라시는 조조장님께서 추석 과제로 자료구조 문제를 내주셨다. 찾아보며 푸는 일명 노베이스에 욱여넣기.\n시작 전에 자료구조는 왜 배워야하는 지 찾아보았다.\n자료구조는 왜 배워야 할까? # 자료구조의 내부를 이해하면 처리 속도, 메모리의 효율 등 상황에 맞춰 최대한 성능을 잘 뽑아 낼 수 있는 자료구조를 선택 할 수 있게된다. 알고리즘 데이터를 효율적으로 사용할 수 있게 도와주는 것. 자료구조를 모르면 알고리즘을 공부하는 데 어려움이 있다. 1번 문제 #다음 중 자료구조에 대한 설명으로 옳지 않은 것은?\n스택은 서브루틴 호출, 인터럽트 처리, 수식 계산 및 수식 표기법에 응용된다. 큐는 비선형구조에 해당한다. 큐는 First In - Frist Out 처리를 수행한다. 스택은 Last In - First Out 처리를 수행한다. 알아야 할 것과 정리\n스택(Stack) 개념 # 데이터 구조 : 후입선출 (LIFO) 활용 예 : 웹브라우저 뒤로가기, 실행 취소(Undo), 수식의 괄호 검사, 역순 문자열 만들기 등 큐(Queue) 개념 # 큐는 \u0026lsquo;줄을 서서 기다린다\u0026rsquo;는 의미. 데이터 구조 : 선입선출 (FIFO) 활용 예 : 은행 업무, 맛집 대기 등 일상생활에서 줄서서 기다리는 행동. 캐시 구현. 비선형구조 (+ 선형 구조) 개념 # 선형 구조 : 자료를 구성하는 원소들을 하나씩 순차적으로 나열. → 배열, 리스트, 스택, 큐 비선형 구조 : 하나의 자료 뒤에 여러개의 자료가 존재할 수 있는 형태. → 트리, 그래프 자료구조 # 기타 # 서브루틴 호출 : 프로그램 내에서 다룬 부분의 코드를 재사용하기 위해 작성된 코드블록 또는 함수.\npublic class SubroutineExample { public static void main(String[] args) { int result = addNumbers(5, 7); // 서브루틴 호출 System.out.println(\u0026#34;Result: \u0026#34; + result); } public static int addNumbers(int a, int b) { int sum = a + b; return sum; // 서브루틴 반환 } } 인터럽트 처리 : 일반적으로 외부에서 발생하는 이벤트나 상황으로, 프로세스나 스레드의 실행 흐름을 중단하고 특별한 처리를 할 수 있게 함.\n예시 코드를 넣기엔 너무 길어서, 그냥 '인터럽트는 스택 방식으로 처리한다'라고만 알고있자. ADT(Abstract Data Types) # 자료구조의 동작 방법을 표현하는 데이터 형식. 말은 어려워 보이나 List로 따지면 .get(), .append(), .insert(), .remove() 같은 기능을 말하는 것. 나의 답 2. 큐는 비선형구조에 해당한다. 이미지 \u0026 내용 출처 스택/큐 : https://devuna.tistory.com/22 자료구조 : https://m.hanbit.co.kr/channel/category/category_view.html?cms_code=CMS8073601837 2번 문제 #레코드가 다음과 같이 구성되어 있을 때, 이진 검색으로 \u0026lsquo;11\u0026rsquo;을 찾으려 한다. 비교횟수는 몇 번인가?\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15\n알아야 할 것과 정리\n레코드의 개념 # 기본적인 자료구조.\n데이터베이스 또는 스프레드 시트에서는 레코드를 ROW라고 부름.\n객체지향 프로그래밍에서는 멤버라고 불림.\n일반적으로 고정 숫자나 시퀀스로 이루어짐.\n학생 성적 리스트로 본 예\n이름 나이 평균 학점 김나나 15 77.5 C 이이진 15 89.5 B - 학생 성적 레코드는 이름, 학번, 평균, 학점 필드로 구성됨\n이진 탐색 # 중간값을 찾는다 중간값 기준으로 찾는 값이 포함되어 있지 않은 범위는 버린다. 남은 범위에서 다시 중간값을 찾는다. 새로운 중간값 기준으로 찾는 값이 포함되지 않은 범위는 버린다. 이 과정을 반복 한 것. 그런데 홀수 범위의 중간값은? 위 문제에서는 중간값이 7.5가 나오는데, 이진 탐색에서는 소수점은 버린다고 한다. 그러니 비교 시작점을 7부터 보면 된다. 나의 답 3) 4회 이미지 \u0026 내용 출처 레코드 : https://ko.wikipedia.org/wiki/%EB%A0%88%EC%BD%94%EB%93%9C_(%EC%BB%B4%ED%93%A8%ED%84%B0_%EA%B3%BC%ED%95%99) 이진탐색 : https://namu.wiki/w/%EC%9D%B4%EC%A7%84%20%ED%83%90%EC%83%89 3번 문제 # 3번은 쉬워서 스킵 다음은 입력된 배열을 오름차순으로 정렬하는 코드이다. ㉠, ㉡에 들어갈 내용으로 올바르게 짝지어진 것은?\n#include \u0026lt;stdio.h\u0026gt; void swap(int a[], int idx1, int idx2) { int t = a[idx1]; a[idx1] = a[idx2]; a[ ㉠ ] = t; } void sort(int a[], int len) { for (int i = 0; i \u0026lt; len - 1; i++) { for (int j = 0; j \u0026lt; len - i - 1; j++) { if (a[j] \u0026gt; a[j + 1]) swap(a, j, j + 1); } } } int main() { int nx = 5; int a[] = {5, 15, 7, 20, 11}; sort(a, ㉡ ); for (int i = 0; i \u0026lt; nx; i++) printf(\u0026#34;%d \u0026#34;, a[i]); return 0; } 나의 답 ㉠ idx2 ,㉡ nx 4번 문제 #다음 중 정렬에 대한 설명으로 옳지 않은 것은?\n퀵 정렬은 스택을 이용해 수행한다. 힙 정렬은 배열을 이용한 완전 이진 트리를 사용한다. 5개의 원소를 가진 배열을 버블 정렬로 정렬하면 최대 20번의 비교 연산은 수행한다. 쉘 정렬은 최적의 경우 선택 정렬보다 빠르다. 알아야 할 것과 정리\n퀵 정렬 # 분할 정복 알고리즘의 일종 스택을 활용하는 재귀 알고리즘. 컴퓨터로 가장 많이 구현된 정렬 알고리즘 중 하나. 그러나 불안정한 정렬로 꼽음. 정렬 갯수가 n개 일 때, 최악의 경우 n2번 비교 수행. 원리 분할(Divide): 입력 배열을 피벗을 기준으로 비균등하게 2개의 부분 배열(피벗을 중심으로 왼쪽: 피벗보다 작은 요소들, 오른쪽: 피벗보다 큰 요소들)로 분할한다. 정복(Conquer): 부분 배열을 정렬한다. 부분 배열의 크기가 충분히 작지 않으면 순환 호출 을 이용하여 다시 분할 정복 방법을 적용한다. 결합(Combine): 정렬된 부분 배열들을 하나의 배열에 합병한다. 순환 호출이 한번 진행될 때마다 최소한 하나의 원소(피벗)는 최종적으로 위치가 정해지므로, 이 알고리즘은 반드시 끝난다는 것을 보장할 수 있다. 힙 정렬 # 일단 힙에 대해 알아야함.\n힙은 항상 완전 이진 트리. 전체 정렬 목적모다는 가장 큰 수 (또는 가장 작은 수)의 몇 개의 값만 필요할 때 유용함. 부모의 값은 항상 자식들의 값보다 크거나 작아야 함. 데이터 삽입 시 가장 끝자리에 노드를 삽입 후 부모 노드와 비교해서 규칙에 맞지 않을 경우 부모와 값과 교환. 힙 정렬 원리\n일단 힙에 데이터를 모두 넣는다. (최소 힙트리 or 최대 힙트리 규칙에 따라.) 최대 힙을 구성한다. 최대 힙이란 부모노드가 자식노드보다 큰 트리를 말하는데, 단말 노드를 자식노드로 가진 부모노드부터 구성하며 아래부터 루트까지 올라오며 순차적으로 만들어 갈 수 있다. 가장 큰 수(루트에 위치)를 가장 작은 수와 교환한다. 2-3번 과정을 반복한다. 위 이미지로도 이해가 안돼서 찾은 그나마 이해가 쉬운 영상(링크)\n버블 정렬 # 시간복잡도가 상당히 느리지만 코드가 단순해서 자주 사용됨. 버블 정렬은 기본적으로 배열의 두 수 a, b를 선택 두 수가 정렬되었다면 그대로 두고 아니라면 두 수를 바꿈. 거의 모든 상황에서 최악의 성능을 보여줌. 쉘 정렬 # 삽입 정렬의 성질을 이용, 삽입 정렬의 장점은 살리고 단점은 보완. 부분 리스트는 어느 정도 정렬이 된 상태이기 때문에 부분 리스트의 개수가 1이 되게 되면 셸 정렬은 기본적으로 삽입 정렬을 수행하는 것이지만 삽입 정렬보다 더욱 빠르게 수행된다. 삽입 정렬과는 다르게 셸 정렬은 전체 리스트를 한번에 정렬하지 않음. 정렬을 거의 마친 상태의 리스트일수록 효율적이다. 성능은 힙정렬 등에 버금 갈 정도로 빠름. 원리 먼저 정렬해야 할 리스트를 일정한 기준에 따라 분류\n연속적이지 않은 여러 개의 부분 리스트를 생성\n각 부분 리스트를 삽입 정렬을 이용하여 정렬\n모든 부분 리스트가 정렬되면 다시 전체 리스트를 더 적은 개수의 부분 리스트로 만든 후에 알고리즘을 반복\n위의 과정을 부분 리스트의 개수가 1이 될 때까지 반복\n나의 답 3) 5개의 원소를 가진 배열을 버블 정렬로 정렬하면 최대 20번의 비교 연산은 수행한다. 버블 정렬 최악의 수행 횟수 : n(n-1)/2 로 원소가 5개라면 최대 10번을 수행함.! 이미지 \u0026 내용 출처 정렬 알고리즘 : https://ko.wikipedia.org/wiki/%EC%A0%95%EB%A0%AC_%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98 셸 정렬 : https://gmlwjd9405.github.io/2018/05/08/algorithm-shell-sort.html 퀵 정렬 : https://gmlwjd9405.github.io/2018/05/10/algorithm-quick-sort.html 5번 문제 #다음은 스택에 자료를 삽입하는 알고리즘이다. 괄호 안에 들어갈 내용으로 옳은 것은? (단, n은 스택의 최대크기이다.)\nprocedure Insert(element, n, top, Stack) if (top ≥ n) then call Stack → Full; end if; top = top + 1; Stack(top) = ( ); end Insert 나의 답 4) element 솔직히 코드 내용은 잘 모르겠으나, 파라미터 가 쓰이지 않았으니 element로 선택! * 파라미터가 쓰이지 않을 때 오류가 발생할까? * Java,C++ 모두 경고 메세지 정도로만 알려주고 컴파일은 정상적으로 됨. ","date":"2023-09-29","permalink":"/devl/study/001/","section":"Developer Course","summary":"항상 팀원의 성장을 바라시는 조조장님께서 추석 과제로 자료구조 문제를 내주셨다.","title":"자료구조 문제풀이 - 01~05"},{"content":" 6번 문제 #다음 중 순서가 [A, B, C, D]인 자료를 스택에 입력하였다가 출력한 결과로 가능한 것은?\nA, D, C, B D, C, A, B D, B, A, C C, D, A, B 스택이면 후입선출인데, 단순히 D-C-B-A만을 생각했다. 근데 조조장님이 데이터를 쌓았다가 중간에 꺼내는 경우도 생각해야한단다.\nA를 넣고 A를 꺼낸다. 그다음 B를 넣고 , C를 넣고, D를 넣는다. 꺼내면 D가 나오고, 그다음 C, 그다음 B. 가능하다. D를 먼저 꺼냈다는건 다른 알파벳은 이미 스택에 쌓였거나, 이미 출력이 끝났거나. 전자의 경우 D-C-B-A 순으로만 가능하다. 위와 동일 C를 꺼내본다. 하지만 C 밑에 D가 깔려 있을 순 없다. 나의 답 1) A, D, C, B 가능한 경우는 아래 7개인가? 더 있나? 헷갈리네.. A-B-C-D / A-B-D-C / A-D-C-B / B-A-C-D / B-A-D-C / C-B-A-D / D-C-B-A 7번 문제 #분할 정복(Dive and Conquer)에 기반한 알고리즘으로 피벗(pivot)을 사용하며 최악의 경우 n(n-1)/2회의 비교를 수행해야하는 정렬은?\nInsertion Sort Quick Sort Bubble Sort Selection Sort 나의 답 2) Quick Sort 일단 분할 정복이며 피벗 개념을 사용하는 정렬은 이전 문제에서 한번 정리했다. 퀵정렬이다.\n헷갈렸는데 퀵정렬에서 n2는 시간복잡도라고한다. → O(n2) 최대 비교 횟수는 n(n-1)/2회. 알아야 할 것과 정리\n삽입 정렬 # 자료 배열의 요소를 앞에서부터 차례대로 이미 정렬된 부분과 비교하여 자신의 위치를 삽입. 배열이 길어질수록 효율은 떨어지지만 구현이 간단함. 선택 정렬이나 버블정렬과 같은 O(n2) 알고리즘보다 빠르고 안정적이며 in-place알고리즘이다. 원리 두번째 원소부터 비교 시작. ← 방향으로 첫번째 원소가 비교 대상. 첫번째 원소가 더 높은 숫자일 경우 첫번째 원소 이전 위치에 삽입. 세번째 원소 비교 차례. 두번째 원소와 비교 후 조건이 성립하면 첫번째 원소와도 비교한다. 맞는 위치가 나오면 삽입 선택 정렬 # 제자리 정렬 알고리즘. 버블정렬보다 두배 정도 빠름. 어떻게 정렬이 되어 있든 일관성있게 n(n-1)/2에 비례하는 시간이 걸림. 원리 주어진 리스트 중 최소값을 찾는다. 그 값을 맨 앞에 위치한 값과 교체한다. \u0026lsquo;패스(pass)\u0026lsquo;한다고 표현함. 맨 처음 위치를 뺀 나머지 리스트를 같은 방법으로 교체한다. 대략적인 정렬은 다 훑어본 것 같으니\n정렬 알고리즘 종합 비교 #1. 장단점 비교 # 2. 시간복잡도/공간복잡도 비교 # 이미지 출처 정렬 알고리즘 : https://velog.io/@jaeyunn_15 8번 문제 #다음 중 최악의 경우 검색 효율이 가장 나쁜 트리 구조는?\nAVL 트리 2-3 트리 이진 탐색 트리 레드-블랙 트리 알아야 할 것과 정리\n이진 탐색 트리 (Binary Search Tree) # 범위를 줄여나가면서 원하는 데이터를 검색하는 알고리즘 분할 정복의 쉬운 예 기존 이진 트리보다 탐색이 빠름. 높이가 h라면 O(h)의 시간복잡도를 가짐. 노드 특징 각 노드에 중복되지 않은 키가 있다. 루트 노드 \u0026lsquo;왼쪽\u0026rsquo; 서브트리는 해당 노드보다 작은 키, \u0026lsquo;오른쪽\u0026rsquo; 서브트리는 큰 키. 좌우 서브 트리도 모두 이진 탐색 트리여야 함. 이러한 노드 특성 때문에 찾는 값이 노드보다 작을 경우는 왼쪽, 클 경우는 오른쪽으로 탐색. 이진 탐색 트리의 노드 삽입 이진 탐색 트리는 연속적으로 낮은 수가 나올 경우 한쪽으로 노드가 쏠릴 수 있다. O(h)값만 높아짐 그것을 보완한게 AVL트리이다.\nAVL 트리 # 자가 균형 이진 탐색 트리. 스스로 균형을 잡는 데이터 구조. 임의의 이진 탐색 트리 T가 높이 균형 성질을 만족 할 때 AVL라고 함. 높이 균형 성질 : 트리 T는 모든 내부 노드 ν에 대하여 v의 자식 노드들의 높이 차이가 최대 1이다. (쉽게 말하면 노드가 쏠림없이 균형있게 이진 트리 형태로 배치되어 있기 때문에 각 노드 간의 그 높이 차이가 2가 나올 수 없다는 뜻) 균형이 무너졌는지 판단할 때 Balance Factor(BF) 로 감지. BF가 1보다 커지면 회전을 통해 균형을 맞춰 높이 차이를 줄인다. BF(K) = K의 왼쪽 서브트리의 높이 - K의 오른쪽 서브트리의 높이 BF가 -1,0,1 중 하나여야 하고 이를 벗어나면 회전을 진행하여 균형을 맞춘다.. 회전의 종류 : Right Rotation, Left Rotation , LLCase, RRCase, LRCase, RLCase B트리 # 2-3 Tree는 B트리의 일종이며 내부노드의 차수가 2 또는 3인 높이가 균형을 이룬 탐색트리. 중복된 키 허용 안함 일반 이진트리는 하향식 삽입인데 반해, B트리는 상향식 삽입 (삽입 시 root부터 내려오면서 비교하는 것이 아닌 leaf부터 위로 올라가면서 비교하는 방식) 숫자는 키값, 점은 포인터 내부 노드의 자식 노드의 수가 미리 정해진 범위 내에서 변경 가능함. (2-3트리의 경우 노드 2개 또는 3개의 자식 노드를 가질 수 있고 이를 넘기면 해당 내부 노드는 부적절한 상태에 있다고 함) 노드 접근 시간이 노드에서의 연산시간에 비해 길 경우 바른 방식보다 B트리가 상당한 이점을 지닌다. → 각 내부 노드의 자식 노드의 수를 최대화해서 트리높이 감소, 그로 인해 균형을 맞추는 작업이 덜 필요하게 됨. 결국 효율이 증가. 탐색 방식은 이진 탐색 트리와 동일하게 하향식 비교. 방대한 양의 저장된 자료를 검색해야 하는 경우 검색어와 일일이 비교해야해서 비효율적. 이미 충분히 복잡한데 B+트리, B*트리도 있다고 한다.\n레드-블랙 트리 # 자가 균형 이진 탐색 트리. 연관 배열 등을 구현하는데 쓰임 각각의 노드가 레드 or 블랙의 속성을 가짐. 이진 탐색 트리 + 아래 조건을 만족해야 레드-블랙 트리가 됨 노드는 레드 or 블랙. 모든 리프 노드(=NIL) 와 루트 노드는 블랙이다. 레드 노드의 자식은 모두 블랙. (레드 노드의 자식 또는 부모는 레드 노드가 될 수 없다.) 리프부터 루트까지의 모든 동선에서 Black 노드 갯수는 같다. 레드-블랙 트리 삽입 과정 새로운 노드는 항상 레드로 삽입 위 3번에 위배(= Double Red) 되므로 Restructuring이나 Recoloring 회전 과정을 통해 균형을 잡아줌. 밸런스를 잡는 추가 연산이 필요하지만, 높이 감소 덕분에 요소 개수가 늘어날수록 이진 탐색트리와는 극명한 성능 차이가 있음. 이진 탐색 트리의 단점을 해소하고, AVL트리보다는 조금 더 밸런스에 여유를 둬서 삽입, 삭제, 검색에 안정적임. 시간복잡도 비교 # 종류 삽입 삽입(최악) 검색 검색(최악) 삭제 삭제(최악) 이진탐색트리 O(log N) O(N) O(log N) O(N) O(log N) O(N) 링크드리스트 O(1) O(1) O(N) O(N) O(N) O(N) 레드블랙트리 O(log N) O(log N) O(log N) O(log N) O(log N) O(log N) 해시테이블 O(1) O(N) O(1) O(N) O(1) O(N) 기타 # O(h) : 트리 높이에 관련된 시간 복잡도 트리 구조에서 사용 일반적으로 트리를 탐색하는 연산에 대한 시간 복잡도를 나타냄 O(logN) : 데이터 구조에서 탐색 또는 검색 연산에 대한 시간 복잡도 N은 데이터의 개수 또는 크기 데이터가 많아져도 로그 시간으로 증가하기 떄문에 매우 효율적인 알고리즘. 배열, 이진 탐색 트리에서 사용 나의 답 3) 이진 탐색 트리 검색에 있어 균형 있는 트리의 경우 O(h)의 시간복잡도를 가지나, 그렇지 않은 트리는 O(n)의 시간복잡도를 가지게 된다. (h:높이, n:노드의 수) 보기에서 균형 속성이 없는 트리는 이진 탐색 트리이다. 이미지\u0026amp;내용 출처\n이진탐색\nhttps://code-lab1.tistory.com/10 AVL탐색\nhttps://ko.wikipedia.org/wiki/AVL_%ED%8A%B8%EB%A6%AC https://code-lab1.tistory.com/61 트리의 개념과 종류\nhttps://code-lab1.tistory.com/8 B트리/2-3트리\nhttps://ttl-blog.tistory.com/721#2-3%20Tree-1 https://rebro.kr/169 https://ko.wikipedia.org/wiki/B_%ED%8A%B8%EB%A6%AC 레드-블랙트리\nhttps://code-lab1.tistory.com/62 https://ko.wikipedia.org/wiki/%EB%A0%88%EB%93%9C-%EB%B8%94%EB%9E%99_%ED%8A%B8%EB%A6%AC https://hotfoxy.tistory.com/102 9번 문제 #다음 그래프에서 정점 A를 선택해 깊이우선탐색(DFS)으로 운행한 결과로 옳은 것은?\n알아야 할 것과 정리\n깊이우선탐색(DFS, Depth-First Search) # 그래프 순회 방식의 일종. 일반적으로 재귀호출을 사용하여 구현. 또는 스택 배열로 구현. (스택 오버플로우 주의 필요) 작동 방식 한 루트로 최대한 깊숙이 들어가서 확인한 뒤 다시 돌아가 다른 루트로 탐색하는 방식. 갈림길이 나타날 떄 \u0026lsquo;다른 길이 있다\u0026rsquo;는 정보만 기록하고 지나간 길은 지워나감. 막다른 곳에 도달하면 직전 갈림길까지 돌아가 (다시 부모노드로 돌아오는 것을 백트래킹이라 함) \u0026lsquo;이 길은 아님\u0026rsquo;이라는 표식을 남김 갈림길을 순차적으로 탐색하다 목표에 도달하면 종료. 검색 속도는 BFS에 비래 느림. 단, 검색이 아닌 순회를 할 경우 많이 사용됨. 단점 : 해가 없는 경로에 깊이 빠질 가능성이 있다. 얻어진 해가 최단 경로가 된다는 보장이 없다. 장점 : 목표 노드가 깊은 단계에 있을 경우 해를 빨리 구할 수 있다. 일단 위 이론대로 하면 트리에서 DFS 순서는 알겠는데. 위 예제는 그래프이다.\n주의할 건 라인 이동을 우선으로하고 백트래킹의 경우 오름차순을 적용하면 된다고한다. 둘 중 더 값 작은 것. 다시 문제로 돌아가자.\n일단 B, C, D중 오름차순에 의해 B루트 진입. 연결선 끝까지 간다. B-E-F-G. 더이상 내려 갈 길이 없기 때문에 백트래킹. C 에서 F, D, A 중 A와 F는 false 상태이기 때문에 D로 이동. 나의 답 3) A-B-E-F-G-C-D +1) 조장 질문 찬스 씀. +2) 깊이우선탐색은 너비우선탐색과 자주 비교된다고 함 이미지\u0026amp;내용 출처\n깊이우선탐색\nhttps://ko.wikipedia.org/wiki/%EA%B9%8A%EC%9D%B4_%EC%9A%B0%EC%84%A0_%ED%83%90%EC%83%89 https://blog.hexabrain.net/268 10번 문제 #다음은 스택의 자료 삭제 알고리즘이다. ㉠에 들어갈 내용으로 옳은 것은? (단, Top은 스택 포인터이고, S는 스택의 이름이다.)\nIf Top = 0 Then ( ㉠ ) Else { remove S(Top) Top = Top – 1 } ① Overflow ② Top = Top + 1 ③ call ④ Underflow\n알아야 할 것과 정리\n오버플로우(OverFlow) # 변수가 표현할 수 있는 최대의 범위를 넘어가는 경우 언더플로우(UnderFlow) # 변수가 표현할 수 있는 최소의 범위를 넘어가는 경우 (오버플로우와는 반대) 예~~전에 \u0026lsquo;문명\u0026rsquo;이라는 게임에서 간디의 폭력성 수치가 언더플로우로 인해 최대치를 찍었다는 이슈가 생각이 났다.\n[문명과 언더플로우] https://blog.naver.com/ruvendix/220776347049 하지만? # 하지만?이 궁금하다면 (열기) 그런데\u0026hellip; 찾다보니 이런 얘기가 있다. 1999년까지만 해도 underflow, overflow라고 했지만, 2000년 초반 C표준이 개정되면서 단순하게 표현범위를 벗어나면 overflow라고 바꾸어 정의했다고한다.\n출처 https://80000coding.oopy.io/10d17093-d9cd-4edb-8d2b-55a4bff86565 그러나 업계에서는 언더플로우와 오버플로우로 나눠 커뮤니케이션이 되고 있는 것이 현실.\n10번 지문의 if문은 스택에 쌓인 데이터가 0일 때 삭제를 시도할 경우를 나타내는 것이다. 그렇다면 언더플로우가 맞을 것 같긴한데.. 학문적으로 바라본다고 했을 때 답은 언더플로우라고 하면 안되는 것인가? 되는 것인가?\n조조장의 생각이 궁금해지는 문제이다.\n조조장님께 물어보고 피드백을 받았다.\n내가 찾은 블로그 내용을 보면 정수에 한하는 내용이라고. 무려 내가 싫어하는 영어로 된 자료 사이트도 보내주셨다. 일단\n마소에서는 언더플로어 용어를 사용하고 있고, https://learn.microsoft.com/ko-kr/cpp/sanitizers/error-stack-buffer-underflow?view=msvc-170 C표준에서 integer에서 연산 결과가 표현범위의 최소값 미만이 되면 underflow, 최대값을 초과하면 overflow 컴퓨터공학에서 용어 underflow는 부동소수점과 stack에서 쓰인다. https://en.wikipedia.org/wiki/Stack_(abstract_data_type) 라고 보내주심\n나 : 근데 10번 문제에 stack의 개수는 실수로 나타낼 수 없지 않나요?\n조조장 : 오버플로우 언더플로우는 단순히 정수형이 아니고 현재 최상단 등을 가리키는 포인터인데..\n나 : 화살표처럼 생각하면 되나요?\n조조장 : 스택을 구현하는 방법중에 연결리스트로 구현한 거..\n나 : 화살표가 포인터라는 건가요?\n조조장 : Top이 포인터죠. 자료를 push하면 그 값을 가리키게 바뀌면서 스택에 데이터를 넣으니까, 가장 최근에 삽입된 데이터 를 가리키는 ^^;;;;;;;\n나 : 아 알겠다, 알겠다.\n조장님이 질문폭탄에 어지럽다고해서 그만하기로 했다. (뭔가 아쉬움)\n나의 답 4) UnderFlow 이미지\u0026amp;내용 출처\n오버플로우와 언더플로우\nhttps://ko.wikipedia.org/wiki/%EA%B9%8A%EC%9D%B4_%EC%9A%B0%EC%84%A0_%ED%83%90%EC%83%89 https://dojang.io/mod/page/view.php?id=32 ","date":"2023-09-29","permalink":"/devl/study/002/","section":"Developer Course","summary":"6번 문제 #다음 중 순서가 [A, B, C, D]인 자료를 스택에 입력하였다가 출력한 결과로 가능한 것은?","title":"자료구조 문제풀이 - 06~10"},{"content":"","date":null,"permalink":"/categories/sql/","section":"Categories","summary":"","title":"Sql"},{"content":"UNION # 두 개의 SQL의 결과를 결합 -\u0026gt; 중복된 행을 제거 결과 집합에서 중복된 행을 하나로 처리. SELECT column1, column2 FROM table1 UNION SELECT column1, column2 FROM table2; UNION ALL # 두 개의 SQL의 결과를 결합 -\u0026gt; 중복된 행을 제거하지 않음. UNION보다 결과가 빠를 수 있음. SELECT column1, column2 FROM table1 UNION ALL SELECT column1, column2 FROM table2; ","date":"2023-09-24","permalink":"/devl/db/001/","section":"Developer Course","summary":"UNION # 두 개의 SQL의 결과를 결합 -\u0026gt; 중복된 행을 제거 결과 집합에서 중복된 행을 하나로 처리.","title":"집합 연산자 UNION / UNION ALL"},{"content":"","date":null,"permalink":"/categories/codingtest/","section":"Categories","summary":"","title":"Codingtest"},{"content":"","date":null,"permalink":"/tags/%EC%9E%AC%EA%B7%80/","section":"Tags","summary":"","title":"재귀"},{"content":"","date":null,"permalink":"/tags/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4/","section":"Tags","summary":"","title":"프로그래머스"},{"content":" 문제\n스터디 모임의 방식을 코딩 테스트형으로 변경했다. 이 주의 첫 번째 문제다.\n[프로그래머스 Lv.0] 문자열 밀기\n다른 사람 풀이 best 중 \u0026lsquo;3단어\u0026rsquo;로 푼 답이 있다고 했다. (feat. 조^2장)\n반복 작업이 필요한데 어떻게 3단어로 끝나지? while이나 for문으로 하기엔 작성할 내용이 많으니 탈락. 그것보다는 a.chars()?, a.tocharArray()? 같은 걸 사용했으려나?\n집에 가는 지하철 안에서 끊임없이 고민을 했다. 반복은 하는데 짧게 줄일 수 있는 메서드라\u0026hellip;\n메서드를 다시 호출하는 재귀 함수를 쓴 것인가? 그렇지만 재귀 함수를 써도 3단어로는 끝을 낼 수 없다. 하지만 더 이상 고민하는 것 보다 재귀 함수라도 써보자라고 생각이 들어 코드를 치기 시작했다.\n재귀함수로 접근\n일단, 재귀 호출의 대표적인 예는 팩토리얼이 있다.\n5! 은 5×4×3×2×1 . 0이 나오면 return.\n//재귀 함수 - 팩토리얼 예제 public static int factorial(int n) { if (n == 0) { return 1; } else { return n * factorial(n - 1); } } 재귀 호출의 스택 구조\n재귀 호출과 반복문의 비교\n점화식과 종료조건만 구현하면 만들 수 있어 가시성이 높고, 구현하기 쉽다. (간결하다고해서 가독성이 좋다고 볼 수는 없다.) 일반 반복문과 구현하기까지의 시간 복잡도는 같으나 , 실제 Stack 과정에서 재귀호출이 속도가 느리고, 메모리를 크게 차지한다. 반복문 재귀함수 정의 명령을 반복적으로 실행 함수를 다시 호출하여\n반복 작업 수행 Stack 메모리 Stack 메모리 사용x 함수 호출 시 매개변수, 지역변수 , 리턴값, 함수 종료 후 돌아가는 위치가 stack 메모리에 저장됨 무한 반복 시 무한 루프는\nCPU사이클을 반복적으로 사용 무한 재귀는 Stack Overflow 발생 속도 빠름 느림 하지만 직접 코드도 작성해볼 겸 이 문제에서는 재귀 호출을 활용할 것이다.\nclass Solution { //여기에 종료조건을 주기 위한 count 추가 public static int solution(String A, String B) { //여기에 코드 작성 } } A!=B 이면 A의 문자 요소 밀림 구현\nString A; A = A.charAt(A.length() -1) + A.substring(0, A.length() -1) 재귀 호출 탈출을 위해 solution 바깥에 static count요소 추가 : count가 A.length()와 같다면 return -1.\n재귀 호출에 A를 다시 집어 넣고 재검증 시도.\nclass Solution { static int count = 0; public static int solution(String A, String B) { if (A.equals(B)) return count; //문자열이 일치하면 count 반환 후 역행하기. count++; A = A.charAt(A.length() -1) + A.substring(0, A.length() -1) return A.length() == count ? -1 : solution(A, B); //조건 불만족 시 재귀 호출 } }\t문제는 풀었지만, 3단어는 역시나 계속 머리 속에 꽂힌 채였다.\n다른 사람 풀이를 봤다.\nreturn (B+B).indexOf(A); return B.repeat(2).indexOf(A); //둘 다 원리는 같다. 문자에서 맑고, 영롱하다는 느낌을 받아본 적이 있는가?\n아쉬웠던 부분은 처음 로직 고민할 때 \u0026rsquo;elloh\u0026rsquo; + \u0026rsquo;elloh\u0026rsquo; 를 하면 그 안에 \u0026lsquo;hello\u0026rsquo;가 있잖아? 까지는 생각을 했는데 indexOf 를 아예 몰라서 이 접근 방식은 뒤로하고 다른 방법을 찾아 헤맸다. indexOf에 대해 찾아보니 특정 문자 위치 인덱스를 반환하는 의외로 간단한 함수였다 . 그런데 A!=B 이면 \u0026lsquo;-1' 을 반환해야하고, 조건문이 없는데 어떻게 통과된거지? 라는 의문이 들었는데 , 원래 indexOf가 일치하는 값이 없으면 -1을 반환한단다.\n애초에 이걸 쓰라는 문제였던 것이다.\n다음날 조장님께 갔다. 나 : 조장, 나는 이 `IndexOf`라는 개념을 아예 몰랐어. 조조장 : 수업 시간에 했는데요? 나 : 앗..그렇군.. (머쓱) 수업을 똑바로 들어야겠다. 조조장 : IndexOf 도 모르는데 재귀 호출을 쓰신다고요? ...나도 내가 의문이다. 근본부터 잘하자 제발.. ","date":"2023-09-22","permalink":"/posts/codingtest_001/","section":"Posts","summary":"문제","title":"프로그래머스 Lv.0 - 문자열 밀기"},{"content":"","date":null,"permalink":"/categories/java/","section":"Categories","summary":"","title":"Java"},{"content":"","date":null,"permalink":"/devl/java/","section":"Developer Course","summary":"","title":"Java"},{"content":"Vector가 동기화가 된다고 하는데 그런 장점이 있다면 왜 책이나 인터넷에서 예제를 볼 때 ArrayList를 우선적으로 사용하는 지 궁금해서 charGPT에게 물어보았다.\nQ List Vector 객체 생성과 ArrayList 객체 생성 차이와 각각 어떤 상황에서 더 효율적인지 알려줘\nA List 인터페이스를 구현한 Vector와 ArrayList는 모두 동적 배열을 구현하는 자료 구조입니다. 그러나 이 두 클래스 간에는 몇 가지 차이점이 있으며, 어떤 것을 선택할지는 사용 사례와 요구 사항에 따라 다릅니다.\n1. 동기화 (Synchronization):\nVector: 스레드 안전(thread-safe)한 클래스로, 여러 스레드가 동시에 Vector에 접근하더라도 안전하게 사용할 수 있도록 동기화되어 있습니다. ArrayList: 동기화되지 않은 클래스로, 단일 스레드 환경에서 사용하기에 적합합니다. 다중 스레드 환경에서 사용하려면 별도의 동기화 메커니즘을 구현해야 합니다. 2. 성능:\nVector: 동기화 오버헤드 때문에 ArrayList보다 성능이 떨어질 수 있습니다. ArrayList: 동기화가 없으므로 단일 스레드 환경에서는 일반적으로 Vector보다 빠릅니다. 3. 용량 조절:\nVector: 요소가 추가될 때 자동으로 크기가 조절됩니다. ArrayList: 요소가 추가될 때 동적으로 크기가 증가하며, 일반적으로 추가될 때마다 용량(capacity)이 두 배씩 증가합니다. 이로 인해 크기를 조절하는 오버헤드가 발생할 수 있습니다. 4. Legacy Class:\nVector: Java의 초기 버전부터 제공되었고, 여전히 사용되고 있지만, 보다 최신의 ArrayList나 LinkedList가 선호됩니다. 어떤 것을 선택해야 할까요?\n단일 스레드 환경: ArrayList는 일반적으로 더 빠르며, 동기화 오버헤드가 없으므로 단일 스레드 환경에서 선호됩니다. 다중 스레드 환경: Vector는 스레드 안전한 클래스로, 여러 스레드가 접근하는 경우에 사용됩니다. 그러나 Java 5부터는 Collections.synchronizedList(new ArrayList\u0026lt;\u0026gt;())와 같이 ArrayList를 동기화할 수도 있습니다. 성능 중요: ArrayList는 일반적으로 더 빠르므로 대부분의 상황에서 선호됩니다. Legacy Code 호환성: 기존 코드나 라이브러리가 Vector를 사용하는 경우 호환성을 유지하기 위해 Vector를 사용해야 할 수도 있습니다. 요약하면, 대부분의 경우에는 ArrayList를 사용하는 것이 권장되며, 멀티스레드 환경에서 스레드 안전성이 필요한 경우에만 Vector를 고려하면 됩니다.\n추가 참고할 링크 https://smujihoon.tistory.com/158\n나중에 보려고 일단 저장만 해둔다.\n","date":"2023-09-18","permalink":"/devl/java/003/","section":"Developer Course","summary":"Vector가 동기화가 된다고 하는데 그런 장점이 있다면 왜 책이나 인터넷에서 예제를 볼 때 ArrayList를 우선적으로 사용하는 지 궁금해서 charGPT에게 물어보았다.","title":"Vector과 ArrayList 차이"},{"content":"수업 시간에 Date를 사용할 때마다 나타나는 취소선이 왜일지 궁금했다. 그 취소선 때문에 Date는 사용하기가 꺼려져 Calendar를 사용해볼까싶어 구글링했다. 그런데 전문가들의 블로그에서는 Date뿐만 아니라 Calendar도 사용을 하지 말라는 얘기가 많았다. 왜 그럴까? 그럼 어떤 API를 사용하는게 옳은 것일까?\n1. Calendar 과 Date 는 불변의 객체가 아니다. 무슨말인고 하니 Calendar와 Date는 사용자가 set 메소드에 직접 간섭할 수가 있다. set에 접근하는 방법을 찾아 코드를 돌려보았다.\n//Calendar 테스트 Calendar cal = Calendar.getInstance(); System.out.println(\u0026#34;현재 연도 : \u0026#34; + cal.get(Calendar.YEAR)); //결과값 : 현재 연도 : 2023\tcal.set(Calendar.YEAR, 2002); //set 설정 가능 System.out.println(\u0026#34;변경된 연도 : \u0026#34; + cal.get(Calendar.YEAR)); //결과값 : 변경된 연도 : 2002\t//Date 테스트 Date date = new Date(); System.out.println(\u0026#34;현재 날짜: \u0026#34; + date); //현재 날짜: Tue Sep 12 18:19:52 KST 2023 date.setTime(0); //set 설정 가능 System.out.println(\u0026#34;변경된 날짜: \u0026#34; + date); //변경된 날짜: Thu Jan 01 09:00:00 KST 1970 그러니까 get으로 모두가 사용하고 있는데 누군가 실수로 set을 건드리기라도 하는 순간 대참사가 날 수 있다는 것이다. 이것만으로도 벌써 쓰지 말아야 할 이유가 생긴 것 같은데 그 외에도 여러가지 문제점들이 이 두 클래스들을 사용하지 말아야 할 이유를 못박는다.\n2. 상수 필드의 남용 static 은 프로그램 실행 시부터 불러와 끝날 때까지 메모리를 차지하는 정적 요소이다. 그렇기 때문에 유의미하게 사용할 수 있도록 고민을 해야하는 요소라고 생각한다. 그런데 Calendar에서는 이게 남용이라니. 궁금해서 API를 들어가 직접 확인했는데 정말 많았다. 그래서 직접 세어봤더니 static final 상수만 50개였다. Calendar import시 50개의 상수가 떡!하고 메모리를 차지하고 있게 되는 것이다.\n(일부만 캡쳐했다.)\n사실 static 변수가가 40~50개라 하더라도 메모리 차지하는 비중은 거의 무시해도 되는 수준이긴하다.\n3. Date 와 Calendar의 역할 모호 날짜/시간 관련 내용을 계산하다보면 Date 클래스만으로는 부족해서 Calendar를 함께 사용하는 경우가 많다고 한다. 이 때 객체를 두개를 생성해야 해서 비효율적이라고한다.\n4. 헷갈리는 월 지정 System.out.println(Calendar.OCTOBER + \u0026#34;월\u0026#34;) //10월이 반환될 것 같지만 실제 반환되는 값은 9월 입력한 월에서 -1의 값이 반환된다는 점에서 이미 혼란을 초래한다.\n이 외에도 더 많은 문제점들이 있는데 나중에 여유가 되면 추가적으로 정리를 해봐야겠다.\n참고할 사이트 Java의 날짜/시간 API. Date와 Calendar는 왜 사용하면 안될까?\nJava의 날짜, 시간 클래스는 어떻게 편해졌나\nJava의 날짜와 시간 API 그러면 이런 문제점을 피하려면 어떤 API를 사용해야할까?\njava.time LocalDate : 년, 월, 일 (날짜만) LocalTime : 시, 분, 초 , 나노초 (시간만) LocalDateTime : 년, 월, 일, 시 , 분, 초, 나노 (날짜 + 시간) 더 직관적이며 가독성이 뛰어나다. Date와 Calendar와 달리 불변 클래스이다. 가독성 관련 - LocalDate\nimport java.time.LocalDate; import java.time.format.DateTimeFormatter; public class JavaTimeExample { public static void main(String[] args) { LocalDate currentDate = LocalDate.now(); DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\u0026#34;yyyy-MM-dd\u0026#34;); String formatDate = currentDate.format(formatter); System.out.println(\u0026#34;현재 날짜: \u0026#34; + formatDate); } } 가독성 관련 - Date\nimport java.text.SimpleDateFormat; import java.util.Calendar; import java.util.Date; public class DateCalendarExample { public static void main(String[] args) { Date currentDate = new Date(); SimpleDateFormat formatter = new SimpleDateFormat(\u0026#34;yyyy-MM-dd\u0026#34;); String formatDate = formatter.format(currentDate); System.out.println(\u0026#34;현재 날짜: \u0026#34; + formatDate); } } 간단한 예제로 가독성을 비교해 봤을 때 위 예제로는 별로 와닿지 않아 찾아보니 포맷 지원 시스템에서 차이가 나는 듯 했다. Date는 SimpleDateFormat을 사용해서 포맷하고, java.time은 DateTimeFormatter를 사용한다.\nSimpleDateFormat은 날짜 포맷을 지정할 때 사용하는 대소문자도 구분해야하고 여러 이유로 오타나 포맷 잘못된 문자열을 사용할 경우 오류가 발생하기 쉽다고한다.\n하지만...... Date와 Calendar 사용을 지양해야하지만, 기업에서 Date나 Calendar를 사용 중인 경우가 많다고하니.. 애석하게도 결국은 모두 알아두어야 하는 셈이다. 별도의 프로젝트일 경우에는 가능하면 java.time API를 쓰려고 노력은 해야겠다.\njava.time API가 가독성이 더 좋은 이유 (feat. chatGPT..)\n1.명확한 클래스 구조 : java.time 패키지의 클래스들은 날짜와 시간을 다루는 다양한 측면을 분리하고, 객체 지향적인 방식으로 설계되어 있습니다. 예를 들어, LocalDate, LocalTime, LocalDateTime 등 각각 특정 측면의 날짜와 시간을 다루는 클래스들이 분리되어 있어서 코드가 명확합니다.\n2.Immutable (불변) 객체 : java.time 클래스들은 변경 불가능한 객체입니다. 이것은 날짜와 시간을 변경하려면 항상 새로운 객체를 생성해야 한다는 의미입니다. 이로써 부작용이 없고 예측 가능한 동작을 보장합니다.\n3.Fluent API : java.time API는 메서드 체이닝을 지원하는 Fluent API를 제공합니다. 이는 여러 메서드를 연결하여 가독성이 높은 코드를 작성할 수 있도록 도와줍니다.\n4.타입 안정성 : java.time API는 컴파일 타임에 타입 안정성을 제공합니다. 예를 들어, LocalDate 타입의 변수에는 날짜만 저장할 수 있으므로 잘못된 데이터 타입으로 인한 오류를 방지합니다.\n5.날짜 및 시간 포맷 지정 : java.time API는 포맷 지정을 위한 DateTimeFormatter 클래스를 제공하며, 이를 사용하여 원하는 형식으로 날짜와 시간을 출력할 수 있습니다. 이는 가독성을 높이는 데 도움을 줍니다.\n","date":"2023-09-11","permalink":"/devl/java/002/","section":"Developer Course","summary":"수업 시간에 Date를 사용할 때마다 나타나는 취소선이 왜일지 궁금했다.","title":"Date, Calendar, LocalDate"},{"content":"","date":null,"permalink":"/categories/cleancode/","section":"Categories","summary":"","title":"Cleancode"},{"content":"1 난수 구하기 +중복제거 #let getRandomNum = new Array(7); for (let i = 0; i \u0026lt; box.length; i++) { getRandomNum[i] = parseInt(Math.random() * 45) + 1; for (let j = 0; j \u0026lt; i; j++) { if (getRandomNum[i] == getRandomNum[j]) { i--; continue; } } } 2 숫자틀 만들기 # class 선택자 사용하기 //하나의 선택자를 사용하고자 할 때 document.querySelector(선택자) //모든 선택자를 묶어 배열로 반환 document.querySelectorAll(선택자) 위 개념을 이용하여 다음과 같이 7개의 숫자가 들어갈 div 를 묶어 배열로 반환할 수 있다.\nlet box = document.querySelectorAll(\u0026#34;div.box\u0026#34;); 여기서부터 고민이었다.\ngetRandomNum에서 구한 난수를 정렬 정렬한 요소를 범위 값에 따라 배경색을 바꿔주기 정렬된 배경색이 바뀐 요소를 box.innerHTML에 저장하기 단순 for문으로 처리하기에는 노가다였기 때문이다. 고민이었지만 아직 JavaScript 문법이 약해 그냥 for문으로 쪼물딱 거리고 있는데 앞자리에서 Stream을 사용했다는 얘기가 오가는 것이 들려왔다.\n막 Java에서 Stream 챕터를 공부하고 있었던 터라 시도해봐야겠다는 생각이 들어 JavaScript에서 Stream 을 선언하는 방법을 찾아보았다.\n찾아보니 Stream 문법처럼 작동하지만 Stream이나 그와 비슷한 것을 선언해 줄 필요가 없었다. 그저 배열 뒤에 문법을 진행하면 그만이었다.\n//정렬을 원한다고 했을 때 아래처럼 시작하면 된다. box.innerHTML = Array.from(getRandomNum).sort(); //그런데 \u0026#39;Array.from\u0026#39;을 생략했는데도 작동됐다. box.innerHTML = getRandomNum.sort(); (로또 예제를 만들기 위해 찾아 본 것이기 때문에 깊게 찾아보지는 않았다. )\n그런데 sort()를 적용했을 때 오류는 없는데 작동이 안됐다. 숫자가 정렬되지 않고 그대로 출력됐다. 뭘까 싶어 sort() 에 커서를 놓고 설명을 읽어보았다.\n(method) Array\u0026lt;any\u0026gt;.sort(compareFn?: ((a: any, b: any) =\u0026gt; number) | undefined): any[] 문장 전체가 이해되지는 않았지만, 일단은 괄호 안에 람다식을 넣으라는 것 같아서 Java에서 오름차순 기본 Compare로 사용되는 (a, b)=\u0026gt;a-b 식을 넣어봤더니 잘 정렬되었다. (그러고보니 JavaScript의 람다식 화살표 몸통이 Java하고 다르다는 것도 처음 알게 되었다. )\nbox.innerHTML = getRandomNum.sort((a, b)=\u0026gt;a-b); //첫번째 요소를 a, 두번째 요소를 b라고 했을 때 //a-b의 결과가 양수가 나오면 두 요소를 바꿈. //b-a을 입력하면 반대의 결과가 나옴. 다음은 forEach()구문 단계이다. 여기에 요소가 해당되는 범위 따라 배경색을 다르게 넣어줄 것이다. 그런데 box요소의 스타일을 변경하려면 box[i]형태로 접근이 가능했기 때문에 별도의 인덱스 변수가 필요해졌다. box.innerHTML 선언한 바로 윗줄에 let index = 0으로 선언해줬다. 증감식으로 사용할 것이기 때문에 바로 초기화를 했다.\nlet index = 0; box.innerHTML = getRandomNum.sort((a, b)=\u0026gt;a-b).forEach(s=\u0026gt; { //s는 정렬된 첫번째 숫자 box[index].innerHTML = s; // s의 값을 index번째 box의 innterHTML 내용으로 넘겨주었다. //여기서 부터는 요소 s값의 범위에 맞춰 배경색을 변경해주는 부분 if (1 \u0026lt;= s \u0026amp;\u0026amp; s \u0026lt; 10) { box[index].style.backgroundColor = \u0026#39;#FEC202\u0026#39;; } else if (10 \u0026lt;= s \u0026amp;\u0026amp; s \u0026lt; 20) { box[index].style.backgroundColor = \u0026#39;#67C8F2\u0026#39;; } else if (20 \u0026lt;= s \u0026amp;\u0026amp; s \u0026lt; 30) { box[index].style.backgroundColor = \u0026#39;#FB7373\u0026#39;; } else if (30 \u0026lt;= s \u0026amp;\u0026amp; s \u0026lt; 40) { box[index].style.backgroundColor = \u0026#39;#ABABAB\u0026#39;; } else if (40 \u0026lt;= s \u0026amp;\u0026amp; s \u0026lt; 50) { box[index].style.backgroundColor = \u0026#39;#B0D841\u0026#39;; } index++;//색배치까지 끝났으면 인덱스를 증가시켜 다음 요소로 접근 할 수 있도록 해준다. }); 3 div 스타일 적용하기 #이제 출력 되는 부분을 다듬기를 들어갔다. 다른 것은 어려운게 없었는데 제일 해맸던 부분이 정렬이었다. 딱 상하좌우 중앙 정렬을 원했는데 px 노가다는 하기 싫고..그래서 찾아보았더니 이 세 문장으로 대부분이 해결됐다.\ndiv.setAline { display: flex; //감싸는 태그의 사이즈에 맞추어 적용됨 justify-content: center; //flex 내부항목의 \u0026#39;행\u0026#39;을 정렬 align-items: center; //flex 내부항목의 \u0026#39;열\u0026#39;을 정렬 } //대부분의 div에 위에서 설정한 setAline을 넣었다. \u0026lt;div id=\u0026#34;title_text\u0026#34; class=\u0026#34;setAline\u0026#34;\u0026gt; \u0026lt;b id=\u0026#34;title_count\u0026#34; style=\u0026#34;color: #B53E26;\u0026#34;\u0026gt;1079회 \u0026lt;/b\u0026gt;\u0026amp;nbsp;\u0026lt;div style=\u0026#34;color: #2E2E2E;\u0026#34;\u0026gt;당첨결과\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div id=\u0026#34;date_text\u0026#34; class=\u0026#34;setAline\u0026#34;\u0026gt;(2024년 9월 22일 추첨)\u0026lt;/div\u0026gt; \u0026lt;div id=\u0026#34;leftFrame_top\u0026#34; class=\u0026#34;leftFrame setAline\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;box\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;box\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;box\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;box\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;box\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;box\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div id=\u0026#34;mid_puls\u0026#34; class=\u0026#34;setAline\u0026#34;\u0026gt; \u0026lt;b\u0026gt;+\u0026lt;/b\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div id=\u0026#34;rightFrame_top\u0026#34; class=\u0026#34;rightFrame setAline\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;box\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;p\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;div id=\u0026#34;leftFrame_bottom\u0026#34; class=\u0026#34;leftFrame setAline\u0026#34;\u0026gt;당첨번호\u0026lt;/div\u0026gt; \u0026lt;div style=\u0026#34;width : 100px; float: left\u0026#34;\u0026gt;　\u0026lt;/div\u0026gt; \u0026lt;div id=\u0026#34;rightFrame_bottom\u0026#34; class=\u0026#34;rightFrame setAline\u0026#34;\u0026gt;보너스\u0026lt;/div\u0026gt; Java Stream에서는 매 연산이 끝날 때마다 반환 타입에 각별히 신경을 써야했는데 JavaScript의 Array 배열 반복은 뭐랄까 자유도가 높다고해야하나? 뭔가 휘뚜루마뚜루 사용할 수 있어서 편했다.\n생각해보니 개발자 커뮤니티를 보다가 누군가 이런 글을 남긴게 생각이 났다.\nJavaScript → Java : 이게 안된다고?? Java → JavaScript : 이게 된다고?? 4 완성 # 남겨진 과제\n첫번째 단계인 난수+중복제거 하는 방법도 Stream문법처럼 할 수 있는지 알아보기. ","date":"2023-09-10","permalink":"/devl/java/001/","section":"Developer Course","summary":"1 난수 구하기 +중복제거 #let getRandomNum = new Array(7); for (let i = 0; i \u0026lt; box.","title":"Lotto 만들기"},{"content":"이름 : 귤 #나이 : 11살 #MBTI : (아마도) ISTJ # 혼자있는 거 좋아함. 표현이 직설적이고 노빠꾸. 간식 달라고 할 때 시간이 일정한 것으로 보아 루틴이 확실한 편. 취미 # 간식 먹기 창 밖 감상 작은방 + 부엌 산책 (부르면 반드시 가야함) 집사 미라클 모닝 해주기 (새벽 5시는 좀..) ","date":"2023-09-10","permalink":"/posts/gyul/","section":"Posts","summary":"이름 : 귤 #나이 : 11살 #MBTI : (아마도) ISTJ # 혼자있는 거 좋아함.","title":"귤"},{"content":"코딩테스트의 답을 작성하려고 할때면 몇 글자 타이핑 후 그대로 멈춘 손이 키보드 위에 붕 떠있곤했다.\nint a ..... add? 음.... ? 전에 단기간 진행했던 스터디에서 한 팀원의 코드를 보게 되었는데 기초 단계의 스터디였음에도 불구하고 변수명을 구체적으로 지어놓은 것을 보고 감명을 받은 적이 있다. 그 변수명에서 의미가 있도록 짓기 위한 고찰이 느껴졌기 때문이다.\n사실 코딩테스트는 로직만 잘 구현해서 기댓값만 일치하면 되기 때문에 변수명을 깊게 고민하는 것은 비효율적일 수도 있다. 하지만 나중에 잘못된 습관을 바꾸느라 시간을 허비할 수도 있겠다는 생각이 들자 그냥 지금부터 노력하는게 낫겠다 싶었다. 그 데이터가 누적이 되면 이름 짓는 방법도 패턴화 될 것이라 믿으면서 말이다.\n기본적으로 이름을 지을 때 강제는 아니지만 개발자들 사이에서 표준으로 사용하는 표기법이 있다.\n표준 표기법 # 파스칼 표기법 : 첫글자를 대문자로. (주로 클래스명 지을 때 사용) 카멜 표기법 : 첫 단어 빼고 나머지 단어의 첫번째 글자만 대문자 사용 (주로 변수명, 함수명 지을 때 사용) 상수는 모두 대문자 패키지와 모듈은 모두 소문자 표기법 이름만 몰랐을 뿐, 이미 많은 예제를 공부하면서 그 규칙성을 느꼈었기 때문에 표기 방법이 생소하게 느껴지진 않았다.\n그리고 이어서 \u0026lsquo;변수명 잘 짓는 방법\u0026rsquo; , \u0026lsquo;표준 변수명\u0026rsquo; 등 생각나는 키워드를 모아모아 폭풍 구글링을 했다. 그 결과 \u0026ldquo;CleanCode\u0026rdquo; 라는 키워드에서 답을 찾을 수 있었다.\nCleanCode란? # 풀네임으로 작성할 것 . ex) btn (X) / button(O) 단어의 뉘앙스 고려 . ex) get, find 사용 함수는 동작을 시키는 명령어 개념이므로 첫 단어가 주로 동사. 마지막은 명사로 끝나도록 짓기. ex) is, exists, has, use boolean 반환 함수는 긍정문으로 작성. ex) ~이 없는지 체크(X) / ~이 있는지 체크?(O) 클래스나 인트턴스 변수명은 명사형으로 짓기. 관련 내용으로 더 공부하고자 \u0026ldquo;CleanCode\u0026quot;을 ebook으로 구매했다. (초반부만 읽었는데도 내용이 강력했다. 추후 정리해야지.)\n위 내용도 좋지만 구체적으로 잘 와닿지 않아 일단 Github에서 facebook Repositories를 찾아 fork 한 후 내부 파일을 들여다 봤다. 당연히 현재 나의 레벨로는 무슨 기능을 하는 건지 전혀 알 수 없었지만 일단은 길이가 긴 변수명과 메서드명(함수명)을 골라봤다.\n//변수명 var ASSETCATALOG_COMPILER_LAUNCHIMAGE_NAME; //함수명 func testAddingObserverWithTrailingClosure(); 음.. 어.. 어디서부터 해야하지?\n영어를 못하는 내겐 큰 장벽으로 느껴졌다. 저렇게 긴 이름을 짓는 건 어떤 기준으로 하는 것일까. 표준이 없다면 어떤 생각에서 출발해야 저렇게 지을 수 있을까. 다른 일을 다 제쳐두고 찾아보았다. 그러다 다른 책에서 그나마 원하던 답을 얻었다.\n변수명 짓기 # 이름 짓기는 창조가 아니라 조합.\n자바 네이밍 컨벤션 철저히 준수 (앞에 언급했던 카멜/파스칼/상수)\n품사는 주로 명사, 동사, 형용사 조합.\nex) 명사+명사+명사 / 동사+명사+명사 / 형용사+명사+명사 등\n긴 이름, 짧은 이름 고민보다는 검색이 잘되는 이름으로.\n복수형을 나타낼 때 \u0026rsquo;s\u0026rsquo;사용보다는 \u0026lsquo;Array\u0026rsquo;나 \u0026lsquo;ListOf\u0026rsquo; 사용\n중요한 단어를 앞에 쓰기 (검색 빈도 고려). ex) totalVisitor ➡️ visitorTotal\n함수명 짓기 #우선 동작할 함수의 기능을 서술한 것이다.\n사용자가 이름을 입력하고 등록 버튼을 클릭하면, 시스템이 사용자 이름을 input 태그에서 가져와 이름 입력 여부와 글자 수를 확인 한 후 입력이 안 되었으면 스크립트를 중단하고 input 태그를 활성화해 사용자가 쓸 수 있게 하고, 글자 수가 한글 두글자 이하면 확인을 요청해 사용자가 확인할 수 있게 한다.\n복잡..복잡.. 😭. 4 단계로 정리해본다.\n1단계 :\n문장에서 사용자가 할 일을 모두 지운다. (함수는 시스템이 할 일을 나타내는 것이므로)\n함수의 주체는 시스템만 남으므로 주어도 없앤다.\n내용 정리해서 불필요한 부분 수정\n\u0026lsquo;입력 여부\u0026rsquo; 를 → \u0026lsquo;글자 수 확인\u0026rsquo; 으로 대체\n스크립트 중단 : 이름 한 글자도 없으면 당연히 중단해야하므로\n사용자가 이름을 입력하고 등록 버튼을 클릭하면, 시스템이 사용자 이름을 input 태그에서 가져와 이름 입력 여부와 글자 수를 확인 한 후 입력이 안 되었으면 스크립트를 중단하고 input 태그를 활성화해 사용자가 쓸 수 있게 하고, 글자 수가 한글 두 글자 이하면 확인을 요청해 사용자가 확인할 수 있게 한다.\n정리하면,\n사용자 이름을 input 태그에서 가져온다\n사용자 이름의 글자 수를 확인한다.\n입력이 안 되었으면 input 태그를 활성화한다.\n글자 수가 한글 두 글자 이하면 확인을 요청한다.\n2단계 :\n1함수 1업무 규칙 적용.\n함수는 한 가지를 해야한다. 그 한 가지를 잘 해야 한다. 그 한 가지만을 해야 한다. \u0026lsquo;한 가지\u0026rsquo;란 무엇인가?(CleanCode 44p 추후 정리)\n3, 4번은 2번에 연속되는 동작이므로 2~4번은 하나의 함수로 묶어준다. 그리고 내용을 영어로 변환.\n#사용자 이름을 input 태그에서 가져온다 (함수1) get user\u0026#39;s name from the text input field #사용자 이름의 글자 수를 확인한다. #입력이 안 되었으면 input 태그를 활성화한다. #글자 수가 한글 두글자 이하면 확인을 요청한다. (함수2) do somthing if user\u0026#39;s name contains under 2 characters 정관사 및 불필요한 단어 빼고 \u0026lsquo;of\u0026rsquo;는 앞뒤 단어 바꾸기\n소유격 지우기\n\u0026lsquo;do something\u0026rsquo; 은 \u0026lsquo;check\u0026rsquo;로 바꾸기\n(함수1) get user name from input field (함수2) check if user name contains under 2 characters 3단계 :\n띄어쓰기 없애고 두번째 단어부터 카멜 표기 적용 (함수1) getUserNameFromInputField() (함수2) checkIfUserNameContainsUnder2Characters() 4단계:\n함수를 사용할 때 의미상 없어도 되는 단어 빼기 - 완성! (함수1) getUserNameFromField() (함수2) checkIfUserNameUnder2Characters() 물론 이 정도의 능력까지는 당장 나에게 필요 없을 수 있지만, 내가 뭘 모르지 모르는 상태에서 그나마 뭘 모르는지 아는 정도까지왔다는 것으로 충분하다.\n참고사이트\n메서드,클래스 명명규칙 (tistory.com)\n연습\n모던인자바 Stream 예제 문제이다. 이 내용을 토대로 변수명 짓는 연습을 해보았다.\n(연습이지, 이게 맞다는 것은 아니다 😥 + 파파고를 활용했다.)\n거래자가 근무하는 모든 도시를 중복없이 나열하시오\n\u0026gt;\u0026gt; citiesAll / citiesWithTrade 케임브리지에서 근무하는 모든 거래자를 찾아서 이름순으로 정렬하시오.\n\u0026gt;\u0026gt; tradersInCambridge / traderListOfCambridge 모든 거래자의 이름을 알파벳순으로 정렬해서 반환하시오.\n\u0026gt;\u0026gt; traderNameArray 밀라노에 거래자가 있는가?\n\u0026gt;\u0026gt; isTraderInMilan 책 예제 : milanBased 케임브리지에 거주하는 거래자의 모든 트랜잭션값을 출력하시오.\n\u0026gt;\u0026gt; allValueInCambridge 전체 트랜잭션 중 최댓값을 얼마인가?\n\u0026gt;\u0026gt; maxValue 책 예제 : highestValue ","date":"2023-09-10","permalink":"/posts/cleancode_001/","section":"Posts","summary":"코딩테스트의 답을 작성하려고 할때면 몇 글자 타이핑 후 그대로 멈춘 손이 키보드 위에 붕 떠있곤했다.","title":"이름 짓기"}]